
Two_MCU_Calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  000040e8  0000417c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012f  008001ac  008001ac  000042c8  2**0
                  ALLOC
  3 .stab         00004644  00000000  00000000  000042c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a80  00000000  00000000  0000890c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0000a38c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  0000a58c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  0000a7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  0000d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  0000ea6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000ff20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  00010140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  00010457  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010ee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_6>
      1c:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_7>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_11>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_13>
      38:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__vector_16>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__c.1790>:
      54:	6e 61 6e 00                                         nan.

00000058 <__c.1788>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e8 ee       	ldi	r30, 0xE8	; 232
     16a:	f0 e4       	ldi	r31, 0x40	; 64
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	ac 3a       	cpi	r26, 0xAC	; 172
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	ac ea       	ldi	r26, 0xAC	; 172
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ab 3d       	cpi	r26, 0xDB	; 219
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 ae 1a 	call	0x355c	; 0x355c <main>
     18c:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <__fixunssfsi>:
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	7b 01       	movw	r14, r22
     19e:	8c 01       	movw	r16, r24
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	5f e4       	ldi	r21, 0x4F	; 79
     1a8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__gesf2>
     1ac:	88 23       	and	r24, r24
     1ae:	8c f0       	brlt	.+34     	; 0x1d2 <__fixunssfsi+0x3e>
     1b0:	c8 01       	movw	r24, r16
     1b2:	b7 01       	movw	r22, r14
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	5f e4       	ldi	r21, 0x4F	; 79
     1bc:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
     1c0:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
     1c4:	9b 01       	movw	r18, r22
     1c6:	ac 01       	movw	r20, r24
     1c8:	20 50       	subi	r18, 0x00	; 0
     1ca:	30 40       	sbci	r19, 0x00	; 0
     1cc:	40 40       	sbci	r20, 0x00	; 0
     1ce:	50 48       	sbci	r21, 0x80	; 128
     1d0:	06 c0       	rjmp	.+12     	; 0x1de <__fixunssfsi+0x4a>
     1d2:	c8 01       	movw	r24, r16
     1d4:	b7 01       	movw	r22, r14
     1d6:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
     1da:	9b 01       	movw	r18, r22
     1dc:	ac 01       	movw	r20, r24
     1de:	b9 01       	movw	r22, r18
     1e0:	ca 01       	movw	r24, r20
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	08 95       	ret

000001ec <_fpadd_parts>:
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	ec ef       	ldi	r30, 0xFC	; 252
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__>
     1f8:	dc 01       	movw	r26, r24
     1fa:	2b 01       	movw	r4, r22
     1fc:	fa 01       	movw	r30, r20
     1fe:	9c 91       	ld	r25, X
     200:	92 30       	cpi	r25, 0x02	; 2
     202:	08 f4       	brcc	.+2      	; 0x206 <_fpadd_parts+0x1a>
     204:	39 c1       	rjmp	.+626    	; 0x478 <_fpadd_parts+0x28c>
     206:	eb 01       	movw	r28, r22
     208:	88 81       	ld	r24, Y
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	08 f4       	brcc	.+2      	; 0x210 <_fpadd_parts+0x24>
     20e:	33 c1       	rjmp	.+614    	; 0x476 <_fpadd_parts+0x28a>
     210:	94 30       	cpi	r25, 0x04	; 4
     212:	69 f4       	brne	.+26     	; 0x22e <_fpadd_parts+0x42>
     214:	84 30       	cpi	r24, 0x04	; 4
     216:	09 f0       	breq	.+2      	; 0x21a <_fpadd_parts+0x2e>
     218:	2f c1       	rjmp	.+606    	; 0x478 <_fpadd_parts+0x28c>
     21a:	11 96       	adiw	r26, 0x01	; 1
     21c:	9c 91       	ld	r25, X
     21e:	11 97       	sbiw	r26, 0x01	; 1
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	98 17       	cp	r25, r24
     224:	09 f4       	brne	.+2      	; 0x228 <_fpadd_parts+0x3c>
     226:	28 c1       	rjmp	.+592    	; 0x478 <_fpadd_parts+0x28c>
     228:	af e8       	ldi	r26, 0x8F	; 143
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	25 c1       	rjmp	.+586    	; 0x478 <_fpadd_parts+0x28c>
     22e:	84 30       	cpi	r24, 0x04	; 4
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x48>
     232:	21 c1       	rjmp	.+578    	; 0x476 <_fpadd_parts+0x28a>
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	a9 f4       	brne	.+42     	; 0x262 <_fpadd_parts+0x76>
     238:	92 30       	cpi	r25, 0x02	; 2
     23a:	09 f0       	breq	.+2      	; 0x23e <_fpadd_parts+0x52>
     23c:	1d c1       	rjmp	.+570    	; 0x478 <_fpadd_parts+0x28c>
     23e:	9a 01       	movw	r18, r20
     240:	ad 01       	movw	r20, r26
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	ea 01       	movw	r28, r20
     246:	09 90       	ld	r0, Y+
     248:	ae 01       	movw	r20, r28
     24a:	e9 01       	movw	r28, r18
     24c:	09 92       	st	Y+, r0
     24e:	9e 01       	movw	r18, r28
     250:	81 50       	subi	r24, 0x01	; 1
     252:	c1 f7       	brne	.-16     	; 0x244 <_fpadd_parts+0x58>
     254:	e2 01       	movw	r28, r4
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	11 96       	adiw	r26, 0x01	; 1
     25a:	9c 91       	ld	r25, X
     25c:	89 23       	and	r24, r25
     25e:	81 83       	std	Z+1, r24	; 0x01
     260:	08 c1       	rjmp	.+528    	; 0x472 <_fpadd_parts+0x286>
     262:	92 30       	cpi	r25, 0x02	; 2
     264:	09 f4       	brne	.+2      	; 0x268 <_fpadd_parts+0x7c>
     266:	07 c1       	rjmp	.+526    	; 0x476 <_fpadd_parts+0x28a>
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	2d 90       	ld	r2, X+
     26c:	3c 90       	ld	r3, X
     26e:	13 97       	sbiw	r26, 0x03	; 3
     270:	eb 01       	movw	r28, r22
     272:	8a 81       	ldd	r24, Y+2	; 0x02
     274:	9b 81       	ldd	r25, Y+3	; 0x03
     276:	14 96       	adiw	r26, 0x04	; 4
     278:	ad 90       	ld	r10, X+
     27a:	bd 90       	ld	r11, X+
     27c:	cd 90       	ld	r12, X+
     27e:	dc 90       	ld	r13, X
     280:	17 97       	sbiw	r26, 0x07	; 7
     282:	ec 80       	ldd	r14, Y+4	; 0x04
     284:	fd 80       	ldd	r15, Y+5	; 0x05
     286:	0e 81       	ldd	r16, Y+6	; 0x06
     288:	1f 81       	ldd	r17, Y+7	; 0x07
     28a:	91 01       	movw	r18, r2
     28c:	28 1b       	sub	r18, r24
     28e:	39 0b       	sbc	r19, r25
     290:	b9 01       	movw	r22, r18
     292:	37 ff       	sbrs	r19, 7
     294:	04 c0       	rjmp	.+8      	; 0x29e <_fpadd_parts+0xb2>
     296:	66 27       	eor	r22, r22
     298:	77 27       	eor	r23, r23
     29a:	62 1b       	sub	r22, r18
     29c:	73 0b       	sbc	r23, r19
     29e:	60 32       	cpi	r22, 0x20	; 32
     2a0:	71 05       	cpc	r23, r1
     2a2:	0c f0       	brlt	.+2      	; 0x2a6 <_fpadd_parts+0xba>
     2a4:	61 c0       	rjmp	.+194    	; 0x368 <_fpadd_parts+0x17c>
     2a6:	12 16       	cp	r1, r18
     2a8:	13 06       	cpc	r1, r19
     2aa:	6c f5       	brge	.+90     	; 0x306 <_fpadd_parts+0x11a>
     2ac:	37 01       	movw	r6, r14
     2ae:	48 01       	movw	r8, r16
     2b0:	06 2e       	mov	r0, r22
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <_fpadd_parts+0xd0>
     2b4:	96 94       	lsr	r9
     2b6:	87 94       	ror	r8
     2b8:	77 94       	ror	r7
     2ba:	67 94       	ror	r6
     2bc:	0a 94       	dec	r0
     2be:	d2 f7       	brpl	.-12     	; 0x2b4 <_fpadd_parts+0xc8>
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <_fpadd_parts+0xe6>
     2ca:	22 0f       	add	r18, r18
     2cc:	33 1f       	adc	r19, r19
     2ce:	44 1f       	adc	r20, r20
     2d0:	55 1f       	adc	r21, r21
     2d2:	6a 95       	dec	r22
     2d4:	d2 f7       	brpl	.-12     	; 0x2ca <_fpadd_parts+0xde>
     2d6:	21 50       	subi	r18, 0x01	; 1
     2d8:	30 40       	sbci	r19, 0x00	; 0
     2da:	40 40       	sbci	r20, 0x00	; 0
     2dc:	50 40       	sbci	r21, 0x00	; 0
     2de:	2e 21       	and	r18, r14
     2e0:	3f 21       	and	r19, r15
     2e2:	40 23       	and	r20, r16
     2e4:	51 23       	and	r21, r17
     2e6:	21 15       	cp	r18, r1
     2e8:	31 05       	cpc	r19, r1
     2ea:	41 05       	cpc	r20, r1
     2ec:	51 05       	cpc	r21, r1
     2ee:	21 f0       	breq	.+8      	; 0x2f8 <_fpadd_parts+0x10c>
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	79 01       	movw	r14, r18
     2fa:	8a 01       	movw	r16, r20
     2fc:	e6 28       	or	r14, r6
     2fe:	f7 28       	or	r15, r7
     300:	08 29       	or	r16, r8
     302:	19 29       	or	r17, r9
     304:	3c c0       	rjmp	.+120    	; 0x37e <_fpadd_parts+0x192>
     306:	23 2b       	or	r18, r19
     308:	d1 f1       	breq	.+116    	; 0x37e <_fpadd_parts+0x192>
     30a:	26 0e       	add	r2, r22
     30c:	37 1e       	adc	r3, r23
     30e:	35 01       	movw	r6, r10
     310:	46 01       	movw	r8, r12
     312:	06 2e       	mov	r0, r22
     314:	04 c0       	rjmp	.+8      	; 0x31e <_fpadd_parts+0x132>
     316:	96 94       	lsr	r9
     318:	87 94       	ror	r8
     31a:	77 94       	ror	r7
     31c:	67 94       	ror	r6
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <_fpadd_parts+0x12a>
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	04 c0       	rjmp	.+8      	; 0x334 <_fpadd_parts+0x148>
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	44 1f       	adc	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	6a 95       	dec	r22
     336:	d2 f7       	brpl	.-12     	; 0x32c <_fpadd_parts+0x140>
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	30 40       	sbci	r19, 0x00	; 0
     33c:	40 40       	sbci	r20, 0x00	; 0
     33e:	50 40       	sbci	r21, 0x00	; 0
     340:	2a 21       	and	r18, r10
     342:	3b 21       	and	r19, r11
     344:	4c 21       	and	r20, r12
     346:	5d 21       	and	r21, r13
     348:	21 15       	cp	r18, r1
     34a:	31 05       	cpc	r19, r1
     34c:	41 05       	cpc	r20, r1
     34e:	51 05       	cpc	r21, r1
     350:	21 f0       	breq	.+8      	; 0x35a <_fpadd_parts+0x16e>
     352:	21 e0       	ldi	r18, 0x01	; 1
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	59 01       	movw	r10, r18
     35c:	6a 01       	movw	r12, r20
     35e:	a6 28       	or	r10, r6
     360:	b7 28       	or	r11, r7
     362:	c8 28       	or	r12, r8
     364:	d9 28       	or	r13, r9
     366:	0b c0       	rjmp	.+22     	; 0x37e <_fpadd_parts+0x192>
     368:	82 15       	cp	r24, r2
     36a:	93 05       	cpc	r25, r3
     36c:	2c f0       	brlt	.+10     	; 0x378 <_fpadd_parts+0x18c>
     36e:	1c 01       	movw	r2, r24
     370:	aa 24       	eor	r10, r10
     372:	bb 24       	eor	r11, r11
     374:	65 01       	movw	r12, r10
     376:	03 c0       	rjmp	.+6      	; 0x37e <_fpadd_parts+0x192>
     378:	ee 24       	eor	r14, r14
     37a:	ff 24       	eor	r15, r15
     37c:	87 01       	movw	r16, r14
     37e:	11 96       	adiw	r26, 0x01	; 1
     380:	9c 91       	ld	r25, X
     382:	d2 01       	movw	r26, r4
     384:	11 96       	adiw	r26, 0x01	; 1
     386:	8c 91       	ld	r24, X
     388:	98 17       	cp	r25, r24
     38a:	09 f4       	brne	.+2      	; 0x38e <_fpadd_parts+0x1a2>
     38c:	45 c0       	rjmp	.+138    	; 0x418 <_fpadd_parts+0x22c>
     38e:	99 23       	and	r25, r25
     390:	39 f0       	breq	.+14     	; 0x3a0 <_fpadd_parts+0x1b4>
     392:	a8 01       	movw	r20, r16
     394:	97 01       	movw	r18, r14
     396:	2a 19       	sub	r18, r10
     398:	3b 09       	sbc	r19, r11
     39a:	4c 09       	sbc	r20, r12
     39c:	5d 09       	sbc	r21, r13
     39e:	06 c0       	rjmp	.+12     	; 0x3ac <_fpadd_parts+0x1c0>
     3a0:	a6 01       	movw	r20, r12
     3a2:	95 01       	movw	r18, r10
     3a4:	2e 19       	sub	r18, r14
     3a6:	3f 09       	sbc	r19, r15
     3a8:	40 0b       	sbc	r20, r16
     3aa:	51 0b       	sbc	r21, r17
     3ac:	57 fd       	sbrc	r21, 7
     3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <_fpadd_parts+0x1d4>
     3b0:	11 82       	std	Z+1, r1	; 0x01
     3b2:	33 82       	std	Z+3, r3	; 0x03
     3b4:	22 82       	std	Z+2, r2	; 0x02
     3b6:	24 83       	std	Z+4, r18	; 0x04
     3b8:	35 83       	std	Z+5, r19	; 0x05
     3ba:	46 83       	std	Z+6, r20	; 0x06
     3bc:	57 83       	std	Z+7, r21	; 0x07
     3be:	1d c0       	rjmp	.+58     	; 0x3fa <_fpadd_parts+0x20e>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	81 83       	std	Z+1, r24	; 0x01
     3c4:	33 82       	std	Z+3, r3	; 0x03
     3c6:	22 82       	std	Z+2, r2	; 0x02
     3c8:	88 27       	eor	r24, r24
     3ca:	99 27       	eor	r25, r25
     3cc:	dc 01       	movw	r26, r24
     3ce:	82 1b       	sub	r24, r18
     3d0:	93 0b       	sbc	r25, r19
     3d2:	a4 0b       	sbc	r26, r20
     3d4:	b5 0b       	sbc	r27, r21
     3d6:	84 83       	std	Z+4, r24	; 0x04
     3d8:	95 83       	std	Z+5, r25	; 0x05
     3da:	a6 83       	std	Z+6, r26	; 0x06
     3dc:	b7 83       	std	Z+7, r27	; 0x07
     3de:	0d c0       	rjmp	.+26     	; 0x3fa <_fpadd_parts+0x20e>
     3e0:	22 0f       	add	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	44 1f       	adc	r20, r20
     3e6:	55 1f       	adc	r21, r21
     3e8:	24 83       	std	Z+4, r18	; 0x04
     3ea:	35 83       	std	Z+5, r19	; 0x05
     3ec:	46 83       	std	Z+6, r20	; 0x06
     3ee:	57 83       	std	Z+7, r21	; 0x07
     3f0:	82 81       	ldd	r24, Z+2	; 0x02
     3f2:	93 81       	ldd	r25, Z+3	; 0x03
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	93 83       	std	Z+3, r25	; 0x03
     3f8:	82 83       	std	Z+2, r24	; 0x02
     3fa:	24 81       	ldd	r18, Z+4	; 0x04
     3fc:	35 81       	ldd	r19, Z+5	; 0x05
     3fe:	46 81       	ldd	r20, Z+6	; 0x06
     400:	57 81       	ldd	r21, Z+7	; 0x07
     402:	da 01       	movw	r26, r20
     404:	c9 01       	movw	r24, r18
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	a1 09       	sbc	r26, r1
     40a:	b1 09       	sbc	r27, r1
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	9f 4f       	sbci	r25, 0xFF	; 255
     410:	af 4f       	sbci	r26, 0xFF	; 255
     412:	bf 43       	sbci	r27, 0x3F	; 63
     414:	28 f3       	brcs	.-54     	; 0x3e0 <_fpadd_parts+0x1f4>
     416:	0b c0       	rjmp	.+22     	; 0x42e <_fpadd_parts+0x242>
     418:	91 83       	std	Z+1, r25	; 0x01
     41a:	33 82       	std	Z+3, r3	; 0x03
     41c:	22 82       	std	Z+2, r2	; 0x02
     41e:	ea 0c       	add	r14, r10
     420:	fb 1c       	adc	r15, r11
     422:	0c 1d       	adc	r16, r12
     424:	1d 1d       	adc	r17, r13
     426:	e4 82       	std	Z+4, r14	; 0x04
     428:	f5 82       	std	Z+5, r15	; 0x05
     42a:	06 83       	std	Z+6, r16	; 0x06
     42c:	17 83       	std	Z+7, r17	; 0x07
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 83       	st	Z, r24
     432:	24 81       	ldd	r18, Z+4	; 0x04
     434:	35 81       	ldd	r19, Z+5	; 0x05
     436:	46 81       	ldd	r20, Z+6	; 0x06
     438:	57 81       	ldd	r21, Z+7	; 0x07
     43a:	57 ff       	sbrs	r21, 7
     43c:	1a c0       	rjmp	.+52     	; 0x472 <_fpadd_parts+0x286>
     43e:	c9 01       	movw	r24, r18
     440:	aa 27       	eor	r26, r26
     442:	97 fd       	sbrc	r25, 7
     444:	a0 95       	com	r26
     446:	ba 2f       	mov	r27, r26
     448:	81 70       	andi	r24, 0x01	; 1
     44a:	90 70       	andi	r25, 0x00	; 0
     44c:	a0 70       	andi	r26, 0x00	; 0
     44e:	b0 70       	andi	r27, 0x00	; 0
     450:	56 95       	lsr	r21
     452:	47 95       	ror	r20
     454:	37 95       	ror	r19
     456:	27 95       	ror	r18
     458:	82 2b       	or	r24, r18
     45a:	93 2b       	or	r25, r19
     45c:	a4 2b       	or	r26, r20
     45e:	b5 2b       	or	r27, r21
     460:	84 83       	std	Z+4, r24	; 0x04
     462:	95 83       	std	Z+5, r25	; 0x05
     464:	a6 83       	std	Z+6, r26	; 0x06
     466:	b7 83       	std	Z+7, r27	; 0x07
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	93 81       	ldd	r25, Z+3	; 0x03
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	93 83       	std	Z+3, r25	; 0x03
     470:	82 83       	std	Z+2, r24	; 0x02
     472:	df 01       	movw	r26, r30
     474:	01 c0       	rjmp	.+2      	; 0x478 <_fpadd_parts+0x28c>
     476:	d2 01       	movw	r26, r4
     478:	cd 01       	movw	r24, r26
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	e2 e1       	ldi	r30, 0x12	; 18
     480:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__>

00000484 <__subsf3>:
     484:	a0 e2       	ldi	r26, 0x20	; 32
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	e8 e4       	ldi	r30, 0x48	; 72
     48a:	f2 e0       	ldi	r31, 0x02	; 2
     48c:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     490:	69 83       	std	Y+1, r22	; 0x01
     492:	7a 83       	std	Y+2, r23	; 0x02
     494:	8b 83       	std	Y+3, r24	; 0x03
     496:	9c 83       	std	Y+4, r25	; 0x04
     498:	2d 83       	std	Y+5, r18	; 0x05
     49a:	3e 83       	std	Y+6, r19	; 0x06
     49c:	4f 83       	std	Y+7, r20	; 0x07
     49e:	58 87       	std	Y+8, r21	; 0x08
     4a0:	e9 e0       	ldi	r30, 0x09	; 9
     4a2:	ee 2e       	mov	r14, r30
     4a4:	f1 2c       	mov	r15, r1
     4a6:	ec 0e       	add	r14, r28
     4a8:	fd 1e       	adc	r15, r29
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	b7 01       	movw	r22, r14
     4b0:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     4b4:	8e 01       	movw	r16, r28
     4b6:	0f 5e       	subi	r16, 0xEF	; 239
     4b8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ba:	ce 01       	movw	r24, r28
     4bc:	05 96       	adiw	r24, 0x05	; 5
     4be:	b8 01       	movw	r22, r16
     4c0:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     4c4:	8a 89       	ldd	r24, Y+18	; 0x12
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	89 27       	eor	r24, r25
     4ca:	8a 8b       	std	Y+18, r24	; 0x12
     4cc:	c7 01       	movw	r24, r14
     4ce:	b8 01       	movw	r22, r16
     4d0:	ae 01       	movw	r20, r28
     4d2:	47 5e       	subi	r20, 0xE7	; 231
     4d4:	5f 4f       	sbci	r21, 0xFF	; 255
     4d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_fpadd_parts>
     4da:	0e 94 b0 06 	call	0xd60	; 0xd60 <__pack_f>
     4de:	a0 96       	adiw	r28, 0x20	; 32
     4e0:	e6 e0       	ldi	r30, 0x06	; 6
     4e2:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

000004e6 <__addsf3>:
     4e6:	a0 e2       	ldi	r26, 0x20	; 32
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	e9 e7       	ldi	r30, 0x79	; 121
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     4f2:	69 83       	std	Y+1, r22	; 0x01
     4f4:	7a 83       	std	Y+2, r23	; 0x02
     4f6:	8b 83       	std	Y+3, r24	; 0x03
     4f8:	9c 83       	std	Y+4, r25	; 0x04
     4fa:	2d 83       	std	Y+5, r18	; 0x05
     4fc:	3e 83       	std	Y+6, r19	; 0x06
     4fe:	4f 83       	std	Y+7, r20	; 0x07
     500:	58 87       	std	Y+8, r21	; 0x08
     502:	f9 e0       	ldi	r31, 0x09	; 9
     504:	ef 2e       	mov	r14, r31
     506:	f1 2c       	mov	r15, r1
     508:	ec 0e       	add	r14, r28
     50a:	fd 1e       	adc	r15, r29
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	b7 01       	movw	r22, r14
     512:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     516:	8e 01       	movw	r16, r28
     518:	0f 5e       	subi	r16, 0xEF	; 239
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	ce 01       	movw	r24, r28
     51e:	05 96       	adiw	r24, 0x05	; 5
     520:	b8 01       	movw	r22, r16
     522:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     526:	c7 01       	movw	r24, r14
     528:	b8 01       	movw	r22, r16
     52a:	ae 01       	movw	r20, r28
     52c:	47 5e       	subi	r20, 0xE7	; 231
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_fpadd_parts>
     534:	0e 94 b0 06 	call	0xd60	; 0xd60 <__pack_f>
     538:	a0 96       	adiw	r28, 0x20	; 32
     53a:	e6 e0       	ldi	r30, 0x06	; 6
     53c:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

00000540 <__mulsf3>:
     540:	a0 e2       	ldi	r26, 0x20	; 32
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e6 ea       	ldi	r30, 0xA6	; 166
     546:	f2 e0       	ldi	r31, 0x02	; 2
     548:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__>
     54c:	69 83       	std	Y+1, r22	; 0x01
     54e:	7a 83       	std	Y+2, r23	; 0x02
     550:	8b 83       	std	Y+3, r24	; 0x03
     552:	9c 83       	std	Y+4, r25	; 0x04
     554:	2d 83       	std	Y+5, r18	; 0x05
     556:	3e 83       	std	Y+6, r19	; 0x06
     558:	4f 83       	std	Y+7, r20	; 0x07
     55a:	58 87       	std	Y+8, r21	; 0x08
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	be 01       	movw	r22, r28
     562:	67 5f       	subi	r22, 0xF7	; 247
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     56a:	ce 01       	movw	r24, r28
     56c:	05 96       	adiw	r24, 0x05	; 5
     56e:	be 01       	movw	r22, r28
     570:	6f 5e       	subi	r22, 0xEF	; 239
     572:	7f 4f       	sbci	r23, 0xFF	; 255
     574:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     578:	99 85       	ldd	r25, Y+9	; 0x09
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	88 f0       	brcs	.+34     	; 0x5a0 <__mulsf3+0x60>
     57e:	89 89       	ldd	r24, Y+17	; 0x11
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	c8 f0       	brcs	.+50     	; 0x5b6 <__mulsf3+0x76>
     584:	94 30       	cpi	r25, 0x04	; 4
     586:	19 f4       	brne	.+6      	; 0x58e <__mulsf3+0x4e>
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	51 f4       	brne	.+20     	; 0x5a0 <__mulsf3+0x60>
     58c:	04 c0       	rjmp	.+8      	; 0x596 <__mulsf3+0x56>
     58e:	84 30       	cpi	r24, 0x04	; 4
     590:	29 f4       	brne	.+10     	; 0x59c <__mulsf3+0x5c>
     592:	92 30       	cpi	r25, 0x02	; 2
     594:	81 f4       	brne	.+32     	; 0x5b6 <__mulsf3+0x76>
     596:	8f e8       	ldi	r24, 0x8F	; 143
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	c6 c0       	rjmp	.+396    	; 0x728 <__mulsf3+0x1e8>
     59c:	92 30       	cpi	r25, 0x02	; 2
     59e:	49 f4       	brne	.+18     	; 0x5b2 <__mulsf3+0x72>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a4:	8a 89       	ldd	r24, Y+18	; 0x12
     5a6:	98 13       	cpse	r25, r24
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	2a 87       	std	Y+10, r18	; 0x0a
     5ac:	ce 01       	movw	r24, r28
     5ae:	09 96       	adiw	r24, 0x09	; 9
     5b0:	bb c0       	rjmp	.+374    	; 0x728 <__mulsf3+0x1e8>
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	49 f4       	brne	.+18     	; 0x5c8 <__mulsf3+0x88>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ba:	8a 89       	ldd	r24, Y+18	; 0x12
     5bc:	98 13       	cpse	r25, r24
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	2a 8b       	std	Y+18, r18	; 0x12
     5c2:	ce 01       	movw	r24, r28
     5c4:	41 96       	adiw	r24, 0x11	; 17
     5c6:	b0 c0       	rjmp	.+352    	; 0x728 <__mulsf3+0x1e8>
     5c8:	2d 84       	ldd	r2, Y+13	; 0x0d
     5ca:	3e 84       	ldd	r3, Y+14	; 0x0e
     5cc:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ce:	58 88       	ldd	r5, Y+16	; 0x10
     5d0:	6d 88       	ldd	r6, Y+21	; 0x15
     5d2:	7e 88       	ldd	r7, Y+22	; 0x16
     5d4:	8f 88       	ldd	r8, Y+23	; 0x17
     5d6:	98 8c       	ldd	r9, Y+24	; 0x18
     5d8:	ee 24       	eor	r14, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	87 01       	movw	r16, r14
     5de:	aa 24       	eor	r10, r10
     5e0:	bb 24       	eor	r11, r11
     5e2:	65 01       	movw	r12, r10
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	e0 e0       	ldi	r30, 0x00	; 0
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	c1 01       	movw	r24, r2
     5f2:	81 70       	andi	r24, 0x01	; 1
     5f4:	90 70       	andi	r25, 0x00	; 0
     5f6:	89 2b       	or	r24, r25
     5f8:	e9 f0       	breq	.+58     	; 0x634 <__mulsf3+0xf4>
     5fa:	e6 0c       	add	r14, r6
     5fc:	f7 1c       	adc	r15, r7
     5fe:	08 1d       	adc	r16, r8
     600:	19 1d       	adc	r17, r9
     602:	9a 01       	movw	r18, r20
     604:	ab 01       	movw	r20, r22
     606:	2a 0d       	add	r18, r10
     608:	3b 1d       	adc	r19, r11
     60a:	4c 1d       	adc	r20, r12
     60c:	5d 1d       	adc	r21, r13
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	a0 e0       	ldi	r26, 0x00	; 0
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e6 14       	cp	r14, r6
     618:	f7 04       	cpc	r15, r7
     61a:	08 05       	cpc	r16, r8
     61c:	19 05       	cpc	r17, r9
     61e:	20 f4       	brcc	.+8      	; 0x628 <__mulsf3+0xe8>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	a0 e0       	ldi	r26, 0x00	; 0
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	ba 01       	movw	r22, r20
     62a:	a9 01       	movw	r20, r18
     62c:	48 0f       	add	r20, r24
     62e:	59 1f       	adc	r21, r25
     630:	6a 1f       	adc	r22, r26
     632:	7b 1f       	adc	r23, r27
     634:	aa 0c       	add	r10, r10
     636:	bb 1c       	adc	r11, r11
     638:	cc 1c       	adc	r12, r12
     63a:	dd 1c       	adc	r13, r13
     63c:	97 fe       	sbrs	r9, 7
     63e:	08 c0       	rjmp	.+16     	; 0x650 <__mulsf3+0x110>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	a0 e0       	ldi	r26, 0x00	; 0
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	a8 2a       	or	r10, r24
     64a:	b9 2a       	or	r11, r25
     64c:	ca 2a       	or	r12, r26
     64e:	db 2a       	or	r13, r27
     650:	31 96       	adiw	r30, 0x01	; 1
     652:	e0 32       	cpi	r30, 0x20	; 32
     654:	f1 05       	cpc	r31, r1
     656:	49 f0       	breq	.+18     	; 0x66a <__mulsf3+0x12a>
     658:	66 0c       	add	r6, r6
     65a:	77 1c       	adc	r7, r7
     65c:	88 1c       	adc	r8, r8
     65e:	99 1c       	adc	r9, r9
     660:	56 94       	lsr	r5
     662:	47 94       	ror	r4
     664:	37 94       	ror	r3
     666:	27 94       	ror	r2
     668:	c3 cf       	rjmp	.-122    	; 0x5f0 <__mulsf3+0xb0>
     66a:	fa 85       	ldd	r31, Y+10	; 0x0a
     66c:	ea 89       	ldd	r30, Y+18	; 0x12
     66e:	2b 89       	ldd	r18, Y+19	; 0x13
     670:	3c 89       	ldd	r19, Y+20	; 0x14
     672:	8b 85       	ldd	r24, Y+11	; 0x0b
     674:	9c 85       	ldd	r25, Y+12	; 0x0c
     676:	28 0f       	add	r18, r24
     678:	39 1f       	adc	r19, r25
     67a:	2e 5f       	subi	r18, 0xFE	; 254
     67c:	3f 4f       	sbci	r19, 0xFF	; 255
     67e:	17 c0       	rjmp	.+46     	; 0x6ae <__mulsf3+0x16e>
     680:	ca 01       	movw	r24, r20
     682:	81 70       	andi	r24, 0x01	; 1
     684:	90 70       	andi	r25, 0x00	; 0
     686:	89 2b       	or	r24, r25
     688:	61 f0       	breq	.+24     	; 0x6a2 <__mulsf3+0x162>
     68a:	16 95       	lsr	r17
     68c:	07 95       	ror	r16
     68e:	f7 94       	ror	r15
     690:	e7 94       	ror	r14
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e8       	ldi	r27, 0x80	; 128
     69a:	e8 2a       	or	r14, r24
     69c:	f9 2a       	or	r15, r25
     69e:	0a 2b       	or	r16, r26
     6a0:	1b 2b       	or	r17, r27
     6a2:	76 95       	lsr	r23
     6a4:	67 95       	ror	r22
     6a6:	57 95       	ror	r21
     6a8:	47 95       	ror	r20
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	77 fd       	sbrc	r23, 7
     6b0:	e7 cf       	rjmp	.-50     	; 0x680 <__mulsf3+0x140>
     6b2:	0c c0       	rjmp	.+24     	; 0x6cc <__mulsf3+0x18c>
     6b4:	44 0f       	add	r20, r20
     6b6:	55 1f       	adc	r21, r21
     6b8:	66 1f       	adc	r22, r22
     6ba:	77 1f       	adc	r23, r23
     6bc:	17 fd       	sbrc	r17, 7
     6be:	41 60       	ori	r20, 0x01	; 1
     6c0:	ee 0c       	add	r14, r14
     6c2:	ff 1c       	adc	r15, r15
     6c4:	00 1f       	adc	r16, r16
     6c6:	11 1f       	adc	r17, r17
     6c8:	21 50       	subi	r18, 0x01	; 1
     6ca:	30 40       	sbci	r19, 0x00	; 0
     6cc:	40 30       	cpi	r20, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	59 07       	cpc	r21, r25
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	69 07       	cpc	r22, r25
     6d6:	90 e4       	ldi	r25, 0x40	; 64
     6d8:	79 07       	cpc	r23, r25
     6da:	60 f3       	brcs	.-40     	; 0x6b4 <__mulsf3+0x174>
     6dc:	2b 8f       	std	Y+27, r18	; 0x1b
     6de:	3c 8f       	std	Y+28, r19	; 0x1c
     6e0:	db 01       	movw	r26, r22
     6e2:	ca 01       	movw	r24, r20
     6e4:	8f 77       	andi	r24, 0x7F	; 127
     6e6:	90 70       	andi	r25, 0x00	; 0
     6e8:	a0 70       	andi	r26, 0x00	; 0
     6ea:	b0 70       	andi	r27, 0x00	; 0
     6ec:	80 34       	cpi	r24, 0x40	; 64
     6ee:	91 05       	cpc	r25, r1
     6f0:	a1 05       	cpc	r26, r1
     6f2:	b1 05       	cpc	r27, r1
     6f4:	61 f4       	brne	.+24     	; 0x70e <__mulsf3+0x1ce>
     6f6:	47 fd       	sbrc	r20, 7
     6f8:	0a c0       	rjmp	.+20     	; 0x70e <__mulsf3+0x1ce>
     6fa:	e1 14       	cp	r14, r1
     6fc:	f1 04       	cpc	r15, r1
     6fe:	01 05       	cpc	r16, r1
     700:	11 05       	cpc	r17, r1
     702:	29 f0       	breq	.+10     	; 0x70e <__mulsf3+0x1ce>
     704:	40 5c       	subi	r20, 0xC0	; 192
     706:	5f 4f       	sbci	r21, 0xFF	; 255
     708:	6f 4f       	sbci	r22, 0xFF	; 255
     70a:	7f 4f       	sbci	r23, 0xFF	; 255
     70c:	40 78       	andi	r20, 0x80	; 128
     70e:	1a 8e       	std	Y+26, r1	; 0x1a
     710:	fe 17       	cp	r31, r30
     712:	11 f0       	breq	.+4      	; 0x718 <__mulsf3+0x1d8>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	8a 8f       	std	Y+26, r24	; 0x1a
     718:	4d 8f       	std	Y+29, r20	; 0x1d
     71a:	5e 8f       	std	Y+30, r21	; 0x1e
     71c:	6f 8f       	std	Y+31, r22	; 0x1f
     71e:	78 a3       	std	Y+32, r23	; 0x20
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	89 8f       	std	Y+25, r24	; 0x19
     724:	ce 01       	movw	r24, r28
     726:	49 96       	adiw	r24, 0x19	; 25
     728:	0e 94 b0 06 	call	0xd60	; 0xd60 <__pack_f>
     72c:	a0 96       	adiw	r28, 0x20	; 32
     72e:	e2 e1       	ldi	r30, 0x12	; 18
     730:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__>

00000734 <__divsf3>:
     734:	a8 e1       	ldi	r26, 0x18	; 24
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e0 ea       	ldi	r30, 0xA0	; 160
     73a:	f3 e0       	ldi	r31, 0x03	; 3
     73c:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x10>
     740:	69 83       	std	Y+1, r22	; 0x01
     742:	7a 83       	std	Y+2, r23	; 0x02
     744:	8b 83       	std	Y+3, r24	; 0x03
     746:	9c 83       	std	Y+4, r25	; 0x04
     748:	2d 83       	std	Y+5, r18	; 0x05
     74a:	3e 83       	std	Y+6, r19	; 0x06
     74c:	4f 83       	std	Y+7, r20	; 0x07
     74e:	58 87       	std	Y+8, r21	; 0x08
     750:	b9 e0       	ldi	r27, 0x09	; 9
     752:	eb 2e       	mov	r14, r27
     754:	f1 2c       	mov	r15, r1
     756:	ec 0e       	add	r14, r28
     758:	fd 1e       	adc	r15, r29
     75a:	ce 01       	movw	r24, r28
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	b7 01       	movw	r22, r14
     760:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     764:	8e 01       	movw	r16, r28
     766:	0f 5e       	subi	r16, 0xEF	; 239
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	ce 01       	movw	r24, r28
     76c:	05 96       	adiw	r24, 0x05	; 5
     76e:	b8 01       	movw	r22, r16
     770:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     774:	29 85       	ldd	r18, Y+9	; 0x09
     776:	22 30       	cpi	r18, 0x02	; 2
     778:	08 f4       	brcc	.+2      	; 0x77c <__divsf3+0x48>
     77a:	7e c0       	rjmp	.+252    	; 0x878 <__stack+0x19>
     77c:	39 89       	ldd	r19, Y+17	; 0x11
     77e:	32 30       	cpi	r19, 0x02	; 2
     780:	10 f4       	brcc	.+4      	; 0x786 <__divsf3+0x52>
     782:	b8 01       	movw	r22, r16
     784:	7c c0       	rjmp	.+248    	; 0x87e <__stack+0x1f>
     786:	8a 85       	ldd	r24, Y+10	; 0x0a
     788:	9a 89       	ldd	r25, Y+18	; 0x12
     78a:	89 27       	eor	r24, r25
     78c:	8a 87       	std	Y+10, r24	; 0x0a
     78e:	24 30       	cpi	r18, 0x04	; 4
     790:	11 f0       	breq	.+4      	; 0x796 <__divsf3+0x62>
     792:	22 30       	cpi	r18, 0x02	; 2
     794:	31 f4       	brne	.+12     	; 0x7a2 <__divsf3+0x6e>
     796:	23 17       	cp	r18, r19
     798:	09 f0       	breq	.+2      	; 0x79c <__divsf3+0x68>
     79a:	6e c0       	rjmp	.+220    	; 0x878 <__stack+0x19>
     79c:	6f e8       	ldi	r22, 0x8F	; 143
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	6e c0       	rjmp	.+220    	; 0x87e <__stack+0x1f>
     7a2:	34 30       	cpi	r19, 0x04	; 4
     7a4:	39 f4       	brne	.+14     	; 0x7b4 <__divsf3+0x80>
     7a6:	1d 86       	std	Y+13, r1	; 0x0d
     7a8:	1e 86       	std	Y+14, r1	; 0x0e
     7aa:	1f 86       	std	Y+15, r1	; 0x0f
     7ac:	18 8a       	std	Y+16, r1	; 0x10
     7ae:	1c 86       	std	Y+12, r1	; 0x0c
     7b0:	1b 86       	std	Y+11, r1	; 0x0b
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__divsf3+0x88>
     7b4:	32 30       	cpi	r19, 0x02	; 2
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <__divsf3+0x8c>
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	89 87       	std	Y+9, r24	; 0x09
     7bc:	b7 01       	movw	r22, r14
     7be:	5f c0       	rjmp	.+190    	; 0x87e <__stack+0x1f>
     7c0:	2b 85       	ldd	r18, Y+11	; 0x0b
     7c2:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c4:	8b 89       	ldd	r24, Y+19	; 0x13
     7c6:	9c 89       	ldd	r25, Y+20	; 0x14
     7c8:	28 1b       	sub	r18, r24
     7ca:	39 0b       	sbc	r19, r25
     7cc:	3c 87       	std	Y+12, r19	; 0x0c
     7ce:	2b 87       	std	Y+11, r18	; 0x0b
     7d0:	ed 84       	ldd	r14, Y+13	; 0x0d
     7d2:	fe 84       	ldd	r15, Y+14	; 0x0e
     7d4:	0f 85       	ldd	r16, Y+15	; 0x0f
     7d6:	18 89       	ldd	r17, Y+16	; 0x10
     7d8:	ad 88       	ldd	r10, Y+21	; 0x15
     7da:	be 88       	ldd	r11, Y+22	; 0x16
     7dc:	cf 88       	ldd	r12, Y+23	; 0x17
     7de:	d8 8c       	ldd	r13, Y+24	; 0x18
     7e0:	ea 14       	cp	r14, r10
     7e2:	fb 04       	cpc	r15, r11
     7e4:	0c 05       	cpc	r16, r12
     7e6:	1d 05       	cpc	r17, r13
     7e8:	40 f4       	brcc	.+16     	; 0x7fa <__divsf3+0xc6>
     7ea:	ee 0c       	add	r14, r14
     7ec:	ff 1c       	adc	r15, r15
     7ee:	00 1f       	adc	r16, r16
     7f0:	11 1f       	adc	r17, r17
     7f2:	21 50       	subi	r18, 0x01	; 1
     7f4:	30 40       	sbci	r19, 0x00	; 0
     7f6:	3c 87       	std	Y+12, r19	; 0x0c
     7f8:	2b 87       	std	Y+11, r18	; 0x0b
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e0       	ldi	r26, 0x00	; 0
     808:	b0 e4       	ldi	r27, 0x40	; 64
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	ea 14       	cp	r14, r10
     810:	fb 04       	cpc	r15, r11
     812:	0c 05       	cpc	r16, r12
     814:	1d 05       	cpc	r17, r13
     816:	40 f0       	brcs	.+16     	; 0x828 <__divsf3+0xf4>
     818:	28 2b       	or	r18, r24
     81a:	39 2b       	or	r19, r25
     81c:	4a 2b       	or	r20, r26
     81e:	5b 2b       	or	r21, r27
     820:	ea 18       	sub	r14, r10
     822:	fb 08       	sbc	r15, r11
     824:	0c 09       	sbc	r16, r12
     826:	1d 09       	sbc	r17, r13
     828:	b6 95       	lsr	r27
     82a:	a7 95       	ror	r26
     82c:	97 95       	ror	r25
     82e:	87 95       	ror	r24
     830:	ee 0c       	add	r14, r14
     832:	ff 1c       	adc	r15, r15
     834:	00 1f       	adc	r16, r16
     836:	11 1f       	adc	r17, r17
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	6f 31       	cpi	r22, 0x1F	; 31
     83e:	71 05       	cpc	r23, r1
     840:	31 f7       	brne	.-52     	; 0x80e <__divsf3+0xda>
     842:	da 01       	movw	r26, r20
     844:	c9 01       	movw	r24, r18
     846:	8f 77       	andi	r24, 0x7F	; 127
     848:	90 70       	andi	r25, 0x00	; 0
     84a:	a0 70       	andi	r26, 0x00	; 0
     84c:	b0 70       	andi	r27, 0x00	; 0
     84e:	80 34       	cpi	r24, 0x40	; 64
     850:	91 05       	cpc	r25, r1
     852:	a1 05       	cpc	r26, r1
     854:	b1 05       	cpc	r27, r1
     856:	61 f4       	brne	.+24     	; 0x870 <__stack+0x11>
     858:	27 fd       	sbrc	r18, 7
     85a:	0a c0       	rjmp	.+20     	; 0x870 <__stack+0x11>
     85c:	e1 14       	cp	r14, r1
     85e:	f1 04       	cpc	r15, r1
     860:	01 05       	cpc	r16, r1
     862:	11 05       	cpc	r17, r1
     864:	29 f0       	breq	.+10     	; 0x870 <__stack+0x11>
     866:	20 5c       	subi	r18, 0xC0	; 192
     868:	3f 4f       	sbci	r19, 0xFF	; 255
     86a:	4f 4f       	sbci	r20, 0xFF	; 255
     86c:	5f 4f       	sbci	r21, 0xFF	; 255
     86e:	20 78       	andi	r18, 0x80	; 128
     870:	2d 87       	std	Y+13, r18	; 0x0d
     872:	3e 87       	std	Y+14, r19	; 0x0e
     874:	4f 87       	std	Y+15, r20	; 0x0f
     876:	58 8b       	std	Y+16, r21	; 0x10
     878:	be 01       	movw	r22, r28
     87a:	67 5f       	subi	r22, 0xF7	; 247
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	cb 01       	movw	r24, r22
     880:	0e 94 b0 06 	call	0xd60	; 0xd60 <__pack_f>
     884:	68 96       	adiw	r28, 0x18	; 24
     886:	ea e0       	ldi	r30, 0x0A	; 10
     888:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x10>

0000088c <__eqsf2>:
     88c:	a8 e1       	ldi	r26, 0x18	; 24
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	ec e4       	ldi	r30, 0x4C	; 76
     892:	f4 e0       	ldi	r31, 0x04	; 4
     894:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     898:	69 83       	std	Y+1, r22	; 0x01
     89a:	7a 83       	std	Y+2, r23	; 0x02
     89c:	8b 83       	std	Y+3, r24	; 0x03
     89e:	9c 83       	std	Y+4, r25	; 0x04
     8a0:	2d 83       	std	Y+5, r18	; 0x05
     8a2:	3e 83       	std	Y+6, r19	; 0x06
     8a4:	4f 83       	std	Y+7, r20	; 0x07
     8a6:	58 87       	std	Y+8, r21	; 0x08
     8a8:	89 e0       	ldi	r24, 0x09	; 9
     8aa:	e8 2e       	mov	r14, r24
     8ac:	f1 2c       	mov	r15, r1
     8ae:	ec 0e       	add	r14, r28
     8b0:	fd 1e       	adc	r15, r29
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	b7 01       	movw	r22, r14
     8b8:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     8bc:	8e 01       	movw	r16, r28
     8be:	0f 5e       	subi	r16, 0xEF	; 239
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	ce 01       	movw	r24, r28
     8c4:	05 96       	adiw	r24, 0x05	; 5
     8c6:	b8 01       	movw	r22, r16
     8c8:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     8cc:	89 85       	ldd	r24, Y+9	; 0x09
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	40 f0       	brcs	.+16     	; 0x8e2 <__eqsf2+0x56>
     8d2:	89 89       	ldd	r24, Y+17	; 0x11
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	28 f0       	brcs	.+10     	; 0x8e2 <__eqsf2+0x56>
     8d8:	c7 01       	movw	r24, r14
     8da:	b8 01       	movw	r22, r16
     8dc:	0e 94 fd 07 	call	0xffa	; 0xffa <__fpcmp_parts_f>
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__eqsf2+0x58>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	68 96       	adiw	r28, 0x18	; 24
     8e6:	e6 e0       	ldi	r30, 0x06	; 6
     8e8:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

000008ec <__nesf2>:
     8ec:	a8 e1       	ldi	r26, 0x18	; 24
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	ec e7       	ldi	r30, 0x7C	; 124
     8f2:	f4 e0       	ldi	r31, 0x04	; 4
     8f4:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     8f8:	69 83       	std	Y+1, r22	; 0x01
     8fa:	7a 83       	std	Y+2, r23	; 0x02
     8fc:	8b 83       	std	Y+3, r24	; 0x03
     8fe:	9c 83       	std	Y+4, r25	; 0x04
     900:	2d 83       	std	Y+5, r18	; 0x05
     902:	3e 83       	std	Y+6, r19	; 0x06
     904:	4f 83       	std	Y+7, r20	; 0x07
     906:	58 87       	std	Y+8, r21	; 0x08
     908:	89 e0       	ldi	r24, 0x09	; 9
     90a:	e8 2e       	mov	r14, r24
     90c:	f1 2c       	mov	r15, r1
     90e:	ec 0e       	add	r14, r28
     910:	fd 1e       	adc	r15, r29
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	b7 01       	movw	r22, r14
     918:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     91c:	8e 01       	movw	r16, r28
     91e:	0f 5e       	subi	r16, 0xEF	; 239
     920:	1f 4f       	sbci	r17, 0xFF	; 255
     922:	ce 01       	movw	r24, r28
     924:	05 96       	adiw	r24, 0x05	; 5
     926:	b8 01       	movw	r22, r16
     928:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     92c:	89 85       	ldd	r24, Y+9	; 0x09
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	40 f0       	brcs	.+16     	; 0x942 <__nesf2+0x56>
     932:	89 89       	ldd	r24, Y+17	; 0x11
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	28 f0       	brcs	.+10     	; 0x942 <__nesf2+0x56>
     938:	c7 01       	movw	r24, r14
     93a:	b8 01       	movw	r22, r16
     93c:	0e 94 fd 07 	call	0xffa	; 0xffa <__fpcmp_parts_f>
     940:	01 c0       	rjmp	.+2      	; 0x944 <__nesf2+0x58>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	68 96       	adiw	r28, 0x18	; 24
     946:	e6 e0       	ldi	r30, 0x06	; 6
     948:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

0000094c <__gtsf2>:
     94c:	a8 e1       	ldi	r26, 0x18	; 24
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	ec ea       	ldi	r30, 0xAC	; 172
     952:	f4 e0       	ldi	r31, 0x04	; 4
     954:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     958:	69 83       	std	Y+1, r22	; 0x01
     95a:	7a 83       	std	Y+2, r23	; 0x02
     95c:	8b 83       	std	Y+3, r24	; 0x03
     95e:	9c 83       	std	Y+4, r25	; 0x04
     960:	2d 83       	std	Y+5, r18	; 0x05
     962:	3e 83       	std	Y+6, r19	; 0x06
     964:	4f 83       	std	Y+7, r20	; 0x07
     966:	58 87       	std	Y+8, r21	; 0x08
     968:	89 e0       	ldi	r24, 0x09	; 9
     96a:	e8 2e       	mov	r14, r24
     96c:	f1 2c       	mov	r15, r1
     96e:	ec 0e       	add	r14, r28
     970:	fd 1e       	adc	r15, r29
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	b7 01       	movw	r22, r14
     978:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     97c:	8e 01       	movw	r16, r28
     97e:	0f 5e       	subi	r16, 0xEF	; 239
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	05 96       	adiw	r24, 0x05	; 5
     986:	b8 01       	movw	r22, r16
     988:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     98c:	89 85       	ldd	r24, Y+9	; 0x09
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	40 f0       	brcs	.+16     	; 0x9a2 <__gtsf2+0x56>
     992:	89 89       	ldd	r24, Y+17	; 0x11
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	28 f0       	brcs	.+10     	; 0x9a2 <__gtsf2+0x56>
     998:	c7 01       	movw	r24, r14
     99a:	b8 01       	movw	r22, r16
     99c:	0e 94 fd 07 	call	0xffa	; 0xffa <__fpcmp_parts_f>
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <__gtsf2+0x58>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	68 96       	adiw	r28, 0x18	; 24
     9a6:	e6 e0       	ldi	r30, 0x06	; 6
     9a8:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

000009ac <__gesf2>:
     9ac:	a8 e1       	ldi	r26, 0x18	; 24
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	ec ed       	ldi	r30, 0xDC	; 220
     9b2:	f4 e0       	ldi	r31, 0x04	; 4
     9b4:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     9b8:	69 83       	std	Y+1, r22	; 0x01
     9ba:	7a 83       	std	Y+2, r23	; 0x02
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	9c 83       	std	Y+4, r25	; 0x04
     9c0:	2d 83       	std	Y+5, r18	; 0x05
     9c2:	3e 83       	std	Y+6, r19	; 0x06
     9c4:	4f 83       	std	Y+7, r20	; 0x07
     9c6:	58 87       	std	Y+8, r21	; 0x08
     9c8:	89 e0       	ldi	r24, 0x09	; 9
     9ca:	e8 2e       	mov	r14, r24
     9cc:	f1 2c       	mov	r15, r1
     9ce:	ec 0e       	add	r14, r28
     9d0:	fd 1e       	adc	r15, r29
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     9dc:	8e 01       	movw	r16, r28
     9de:	0f 5e       	subi	r16, 0xEF	; 239
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	ce 01       	movw	r24, r28
     9e4:	05 96       	adiw	r24, 0x05	; 5
     9e6:	b8 01       	movw	r22, r16
     9e8:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     9ec:	89 85       	ldd	r24, Y+9	; 0x09
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	40 f0       	brcs	.+16     	; 0xa02 <__gesf2+0x56>
     9f2:	89 89       	ldd	r24, Y+17	; 0x11
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	28 f0       	brcs	.+10     	; 0xa02 <__gesf2+0x56>
     9f8:	c7 01       	movw	r24, r14
     9fa:	b8 01       	movw	r22, r16
     9fc:	0e 94 fd 07 	call	0xffa	; 0xffa <__fpcmp_parts_f>
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <__gesf2+0x58>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	68 96       	adiw	r28, 0x18	; 24
     a06:	e6 e0       	ldi	r30, 0x06	; 6
     a08:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

00000a0c <__ltsf2>:
     a0c:	a8 e1       	ldi	r26, 0x18	; 24
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	ec e0       	ldi	r30, 0x0C	; 12
     a12:	f5 e0       	ldi	r31, 0x05	; 5
     a14:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__prologue_saves__+0x18>
     a18:	69 83       	std	Y+1, r22	; 0x01
     a1a:	7a 83       	std	Y+2, r23	; 0x02
     a1c:	8b 83       	std	Y+3, r24	; 0x03
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	2d 83       	std	Y+5, r18	; 0x05
     a22:	3e 83       	std	Y+6, r19	; 0x06
     a24:	4f 83       	std	Y+7, r20	; 0x07
     a26:	58 87       	std	Y+8, r21	; 0x08
     a28:	89 e0       	ldi	r24, 0x09	; 9
     a2a:	e8 2e       	mov	r14, r24
     a2c:	f1 2c       	mov	r15, r1
     a2e:	ec 0e       	add	r14, r28
     a30:	fd 1e       	adc	r15, r29
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     a3c:	8e 01       	movw	r16, r28
     a3e:	0f 5e       	subi	r16, 0xEF	; 239
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	ce 01       	movw	r24, r28
     a44:	05 96       	adiw	r24, 0x05	; 5
     a46:	b8 01       	movw	r22, r16
     a48:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     a4c:	89 85       	ldd	r24, Y+9	; 0x09
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	40 f0       	brcs	.+16     	; 0xa62 <__ltsf2+0x56>
     a52:	89 89       	ldd	r24, Y+17	; 0x11
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	28 f0       	brcs	.+10     	; 0xa62 <__ltsf2+0x56>
     a58:	c7 01       	movw	r24, r14
     a5a:	b8 01       	movw	r22, r16
     a5c:	0e 94 fd 07 	call	0xffa	; 0xffa <__fpcmp_parts_f>
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <__ltsf2+0x58>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	68 96       	adiw	r28, 0x18	; 24
     a66:	e6 e0       	ldi	r30, 0x06	; 6
     a68:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__epilogue_restores__+0x18>

00000a6c <__floatsisf>:
     a6c:	a8 e0       	ldi	r26, 0x08	; 8
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	ec e3       	ldi	r30, 0x3C	; 60
     a72:	f5 e0       	ldi	r31, 0x05	; 5
     a74:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x12>
     a78:	9b 01       	movw	r18, r22
     a7a:	ac 01       	movw	r20, r24
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	89 83       	std	Y+1, r24	; 0x01
     a80:	da 01       	movw	r26, r20
     a82:	c9 01       	movw	r24, r18
     a84:	88 27       	eor	r24, r24
     a86:	b7 fd       	sbrc	r27, 7
     a88:	83 95       	inc	r24
     a8a:	99 27       	eor	r25, r25
     a8c:	aa 27       	eor	r26, r26
     a8e:	bb 27       	eor	r27, r27
     a90:	b8 2e       	mov	r11, r24
     a92:	21 15       	cp	r18, r1
     a94:	31 05       	cpc	r19, r1
     a96:	41 05       	cpc	r20, r1
     a98:	51 05       	cpc	r21, r1
     a9a:	19 f4       	brne	.+6      	; 0xaa2 <__floatsisf+0x36>
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	89 83       	std	Y+1, r24	; 0x01
     aa0:	3a c0       	rjmp	.+116    	; 0xb16 <__floatsisf+0xaa>
     aa2:	88 23       	and	r24, r24
     aa4:	a9 f0       	breq	.+42     	; 0xad0 <__floatsisf+0x64>
     aa6:	20 30       	cpi	r18, 0x00	; 0
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	38 07       	cpc	r19, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	48 07       	cpc	r20, r24
     ab0:	80 e8       	ldi	r24, 0x80	; 128
     ab2:	58 07       	cpc	r21, r24
     ab4:	29 f4       	brne	.+10     	; 0xac0 <__floatsisf+0x54>
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	9f ec       	ldi	r25, 0xCF	; 207
     abe:	30 c0       	rjmp	.+96     	; 0xb20 <__floatsisf+0xb4>
     ac0:	ee 24       	eor	r14, r14
     ac2:	ff 24       	eor	r15, r15
     ac4:	87 01       	movw	r16, r14
     ac6:	e2 1a       	sub	r14, r18
     ac8:	f3 0a       	sbc	r15, r19
     aca:	04 0b       	sbc	r16, r20
     acc:	15 0b       	sbc	r17, r21
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <__floatsisf+0x68>
     ad0:	79 01       	movw	r14, r18
     ad2:	8a 01       	movw	r16, r20
     ad4:	8e e1       	ldi	r24, 0x1E	; 30
     ad6:	c8 2e       	mov	r12, r24
     ad8:	d1 2c       	mov	r13, r1
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	c8 01       	movw	r24, r16
     ae8:	b7 01       	movw	r22, r14
     aea:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__clzsi2>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	18 16       	cp	r1, r24
     af2:	19 06       	cpc	r1, r25
     af4:	84 f4       	brge	.+32     	; 0xb16 <__floatsisf+0xaa>
     af6:	08 2e       	mov	r0, r24
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <__floatsisf+0x96>
     afa:	ee 0c       	add	r14, r14
     afc:	ff 1c       	adc	r15, r15
     afe:	00 1f       	adc	r16, r16
     b00:	11 1f       	adc	r17, r17
     b02:	0a 94       	dec	r0
     b04:	d2 f7       	brpl	.-12     	; 0xafa <__floatsisf+0x8e>
     b06:	ed 82       	std	Y+5, r14	; 0x05
     b08:	fe 82       	std	Y+6, r15	; 0x06
     b0a:	0f 83       	std	Y+7, r16	; 0x07
     b0c:	18 87       	std	Y+8, r17	; 0x08
     b0e:	c8 1a       	sub	r12, r24
     b10:	d9 0a       	sbc	r13, r25
     b12:	dc 82       	std	Y+4, r13	; 0x04
     b14:	cb 82       	std	Y+3, r12	; 0x03
     b16:	ba 82       	std	Y+2, r11	; 0x02
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	0e 94 b0 06 	call	0xd60	; 0xd60 <__pack_f>
     b20:	28 96       	adiw	r28, 0x08	; 8
     b22:	e9 e0       	ldi	r30, 0x09	; 9
     b24:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x12>

00000b28 <__fixsfsi>:
     b28:	ac e0       	ldi	r26, 0x0C	; 12
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	ea e9       	ldi	r30, 0x9A	; 154
     b2e:	f5 e0       	ldi	r31, 0x05	; 5
     b30:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__prologue_saves__+0x20>
     b34:	69 83       	std	Y+1, r22	; 0x01
     b36:	7a 83       	std	Y+2, r23	; 0x02
     b38:	8b 83       	std	Y+3, r24	; 0x03
     b3a:	9c 83       	std	Y+4, r25	; 0x04
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	be 01       	movw	r22, r28
     b42:	6b 5f       	subi	r22, 0xFB	; 251
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
     b46:	0e 94 85 07 	call	0xf0a	; 0xf0a <__unpack_f>
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	61 f1       	breq	.+88     	; 0xba8 <__fixsfsi+0x80>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	50 f1       	brcs	.+84     	; 0xba8 <__fixsfsi+0x80>
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	21 f4       	brne	.+8      	; 0xb60 <__fixsfsi+0x38>
     b58:	8e 81       	ldd	r24, Y+6	; 0x06
     b5a:	88 23       	and	r24, r24
     b5c:	51 f1       	breq	.+84     	; 0xbb2 <__fixsfsi+0x8a>
     b5e:	2e c0       	rjmp	.+92     	; 0xbbc <__fixsfsi+0x94>
     b60:	2f 81       	ldd	r18, Y+7	; 0x07
     b62:	38 85       	ldd	r19, Y+8	; 0x08
     b64:	37 fd       	sbrc	r19, 7
     b66:	20 c0       	rjmp	.+64     	; 0xba8 <__fixsfsi+0x80>
     b68:	6e 81       	ldd	r22, Y+6	; 0x06
     b6a:	2f 31       	cpi	r18, 0x1F	; 31
     b6c:	31 05       	cpc	r19, r1
     b6e:	1c f0       	brlt	.+6      	; 0xb76 <__fixsfsi+0x4e>
     b70:	66 23       	and	r22, r22
     b72:	f9 f0       	breq	.+62     	; 0xbb2 <__fixsfsi+0x8a>
     b74:	23 c0       	rjmp	.+70     	; 0xbbc <__fixsfsi+0x94>
     b76:	8e e1       	ldi	r24, 0x1E	; 30
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	82 1b       	sub	r24, r18
     b7c:	93 0b       	sbc	r25, r19
     b7e:	29 85       	ldd	r18, Y+9	; 0x09
     b80:	3a 85       	ldd	r19, Y+10	; 0x0a
     b82:	4b 85       	ldd	r20, Y+11	; 0x0b
     b84:	5c 85       	ldd	r21, Y+12	; 0x0c
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <__fixsfsi+0x68>
     b88:	56 95       	lsr	r21
     b8a:	47 95       	ror	r20
     b8c:	37 95       	ror	r19
     b8e:	27 95       	ror	r18
     b90:	8a 95       	dec	r24
     b92:	d2 f7       	brpl	.-12     	; 0xb88 <__fixsfsi+0x60>
     b94:	66 23       	and	r22, r22
     b96:	b1 f0       	breq	.+44     	; 0xbc4 <__fixsfsi+0x9c>
     b98:	50 95       	com	r21
     b9a:	40 95       	com	r20
     b9c:	30 95       	com	r19
     b9e:	21 95       	neg	r18
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	4f 4f       	sbci	r20, 0xFF	; 255
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <__fixsfsi+0x9c>
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <__fixsfsi+0x9c>
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	3f ef       	ldi	r19, 0xFF	; 255
     bb6:	4f ef       	ldi	r20, 0xFF	; 255
     bb8:	5f e7       	ldi	r21, 0x7F	; 127
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__fixsfsi+0x9c>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e8       	ldi	r21, 0x80	; 128
     bc4:	b9 01       	movw	r22, r18
     bc6:	ca 01       	movw	r24, r20
     bc8:	2c 96       	adiw	r28, 0x0c	; 12
     bca:	e2 e0       	ldi	r30, 0x02	; 2
     bcc:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__epilogue_restores__+0x20>

00000bd0 <__floatunsisf>:
     bd0:	a8 e0       	ldi	r26, 0x08	; 8
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ee ee       	ldi	r30, 0xEE	; 238
     bd6:	f5 e0       	ldi	r31, 0x05	; 5
     bd8:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x10>
     bdc:	7b 01       	movw	r14, r22
     bde:	8c 01       	movw	r16, r24
     be0:	61 15       	cp	r22, r1
     be2:	71 05       	cpc	r23, r1
     be4:	81 05       	cpc	r24, r1
     be6:	91 05       	cpc	r25, r1
     be8:	19 f4       	brne	.+6      	; 0xbf0 <__floatunsisf+0x20>
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	60 c0       	rjmp	.+192    	; 0xcb0 <__floatunsisf+0xe0>
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	8e e1       	ldi	r24, 0x1E	; 30
     bf6:	c8 2e       	mov	r12, r24
     bf8:	d1 2c       	mov	r13, r1
     bfa:	dc 82       	std	Y+4, r13	; 0x04
     bfc:	cb 82       	std	Y+3, r12	; 0x03
     bfe:	ed 82       	std	Y+5, r14	; 0x05
     c00:	fe 82       	std	Y+6, r15	; 0x06
     c02:	0f 83       	std	Y+7, r16	; 0x07
     c04:	18 87       	std	Y+8, r17	; 0x08
     c06:	c8 01       	movw	r24, r16
     c08:	b7 01       	movw	r22, r14
     c0a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__clzsi2>
     c0e:	fc 01       	movw	r30, r24
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	f7 ff       	sbrs	r31, 7
     c14:	3b c0       	rjmp	.+118    	; 0xc8c <__floatunsisf+0xbc>
     c16:	22 27       	eor	r18, r18
     c18:	33 27       	eor	r19, r19
     c1a:	2e 1b       	sub	r18, r30
     c1c:	3f 0b       	sbc	r19, r31
     c1e:	57 01       	movw	r10, r14
     c20:	68 01       	movw	r12, r16
     c22:	02 2e       	mov	r0, r18
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__floatunsisf+0x5e>
     c26:	d6 94       	lsr	r13
     c28:	c7 94       	ror	r12
     c2a:	b7 94       	ror	r11
     c2c:	a7 94       	ror	r10
     c2e:	0a 94       	dec	r0
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__floatunsisf+0x56>
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	04 c0       	rjmp	.+8      	; 0xc4c <__floatunsisf+0x7c>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	aa 1f       	adc	r26, r26
     c4a:	bb 1f       	adc	r27, r27
     c4c:	2a 95       	dec	r18
     c4e:	d2 f7       	brpl	.-12     	; 0xc44 <__floatunsisf+0x74>
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	a1 09       	sbc	r26, r1
     c54:	b1 09       	sbc	r27, r1
     c56:	8e 21       	and	r24, r14
     c58:	9f 21       	and	r25, r15
     c5a:	a0 23       	and	r26, r16
     c5c:	b1 23       	and	r27, r17
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	a1 05       	cpc	r26, r1
     c62:	b1 05       	cpc	r27, r1
     c64:	21 f0       	breq	.+8      	; 0xc6e <__floatunsisf+0x9e>
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	4a 29       	or	r20, r10
     c70:	5b 29       	or	r21, r11
     c72:	6c 29       	or	r22, r12
     c74:	7d 29       	or	r23, r13
     c76:	4d 83       	std	Y+5, r20	; 0x05
     c78:	5e 83       	std	Y+6, r21	; 0x06
     c7a:	6f 83       	std	Y+7, r22	; 0x07
     c7c:	78 87       	std	Y+8, r23	; 0x08
     c7e:	8e e1       	ldi	r24, 0x1E	; 30
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	8e 1b       	sub	r24, r30
     c84:	9f 0b       	sbc	r25, r31
     c86:	9c 83       	std	Y+4, r25	; 0x04
     c88:	8b 83       	std	Y+3, r24	; 0x03
     c8a:	12 c0       	rjmp	.+36     	; 0xcb0 <__floatunsisf+0xe0>
     c8c:	30 97       	sbiw	r30, 0x00	; 0
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <__floatunsisf+0xe0>
     c90:	0e 2e       	mov	r0, r30
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__floatunsisf+0xcc>
     c94:	ee 0c       	add	r14, r14
     c96:	ff 1c       	adc	r15, r15
     c98:	00 1f       	adc	r16, r16
     c9a:	11 1f       	adc	r17, r17
     c9c:	0a 94       	dec	r0
     c9e:	d2 f7       	brpl	.-12     	; 0xc94 <__floatunsisf+0xc4>
     ca0:	ed 82       	std	Y+5, r14	; 0x05
     ca2:	fe 82       	std	Y+6, r15	; 0x06
     ca4:	0f 83       	std	Y+7, r16	; 0x07
     ca6:	18 87       	std	Y+8, r17	; 0x08
     ca8:	ce 1a       	sub	r12, r30
     caa:	df 0a       	sbc	r13, r31
     cac:	dc 82       	std	Y+4, r13	; 0x04
     cae:	cb 82       	std	Y+3, r12	; 0x03
     cb0:	1a 82       	std	Y+2, r1	; 0x02
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	0e 94 b0 06 	call	0xd60	; 0xd60 <__pack_f>
     cba:	28 96       	adiw	r28, 0x08	; 8
     cbc:	ea e0       	ldi	r30, 0x0A	; 10
     cbe:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x10>

00000cc2 <__clzsi2>:
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	7b 01       	movw	r14, r22
     ccc:	8c 01       	movw	r16, r24
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	e8 16       	cp	r14, r24
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	f8 06       	cpc	r15, r24
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	08 07       	cpc	r16, r24
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	18 07       	cpc	r17, r24
     cde:	88 f4       	brcc	.+34     	; 0xd02 <__clzsi2+0x40>
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	e8 16       	cp	r14, r24
     ce4:	f1 04       	cpc	r15, r1
     ce6:	01 05       	cpc	r16, r1
     ce8:	11 05       	cpc	r17, r1
     cea:	31 f0       	breq	.+12     	; 0xcf8 <__clzsi2+0x36>
     cec:	28 f0       	brcs	.+10     	; 0xcf8 <__clzsi2+0x36>
     cee:	88 e0       	ldi	r24, 0x08	; 8
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <__clzsi2+0x64>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__clzsi2+0x64>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	e8 16       	cp	r14, r24
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	f8 06       	cpc	r15, r24
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	08 07       	cpc	r16, r24
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	18 07       	cpc	r17, r24
     d12:	28 f0       	brcs	.+10     	; 0xd1e <__clzsi2+0x5c>
     d14:	88 e1       	ldi	r24, 0x18	; 24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__clzsi2+0x64>
     d1e:	80 e1       	ldi	r24, 0x10	; 16
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	20 e2       	ldi	r18, 0x20	; 32
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	28 1b       	sub	r18, r24
     d30:	39 0b       	sbc	r19, r25
     d32:	4a 0b       	sbc	r20, r26
     d34:	5b 0b       	sbc	r21, r27
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <__clzsi2+0x7e>
     d38:	16 95       	lsr	r17
     d3a:	07 95       	ror	r16
     d3c:	f7 94       	ror	r15
     d3e:	e7 94       	ror	r14
     d40:	8a 95       	dec	r24
     d42:	d2 f7       	brpl	.-12     	; 0xd38 <__clzsi2+0x76>
     d44:	f7 01       	movw	r30, r14
     d46:	e9 56       	subi	r30, 0x69	; 105
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	28 1b       	sub	r18, r24
     d4e:	31 09       	sbc	r19, r1
     d50:	41 09       	sbc	r20, r1
     d52:	51 09       	sbc	r21, r1
     d54:	c9 01       	movw	r24, r18
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	08 95       	ret

00000d60 <__pack_f>:
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	fc 01       	movw	r30, r24
     d6c:	e4 80       	ldd	r14, Z+4	; 0x04
     d6e:	f5 80       	ldd	r15, Z+5	; 0x05
     d70:	06 81       	ldd	r16, Z+6	; 0x06
     d72:	17 81       	ldd	r17, Z+7	; 0x07
     d74:	d1 80       	ldd	r13, Z+1	; 0x01
     d76:	80 81       	ld	r24, Z
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	48 f4       	brcc	.+18     	; 0xd8e <__pack_f+0x2e>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a0 e1       	ldi	r26, 0x10	; 16
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e8 2a       	or	r14, r24
     d86:	f9 2a       	or	r15, r25
     d88:	0a 2b       	or	r16, r26
     d8a:	1b 2b       	or	r17, r27
     d8c:	a5 c0       	rjmp	.+330    	; 0xed8 <__pack_f+0x178>
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	09 f4       	brne	.+2      	; 0xd94 <__pack_f+0x34>
     d92:	9f c0       	rjmp	.+318    	; 0xed2 <__pack_f+0x172>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	21 f4       	brne	.+8      	; 0xda0 <__pack_f+0x40>
     d98:	ee 24       	eor	r14, r14
     d9a:	ff 24       	eor	r15, r15
     d9c:	87 01       	movw	r16, r14
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <__pack_f+0x4a>
     da0:	e1 14       	cp	r14, r1
     da2:	f1 04       	cpc	r15, r1
     da4:	01 05       	cpc	r16, r1
     da6:	11 05       	cpc	r17, r1
     da8:	19 f4       	brne	.+6      	; 0xdb0 <__pack_f+0x50>
     daa:	e0 e0       	ldi	r30, 0x00	; 0
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	96 c0       	rjmp	.+300    	; 0xedc <__pack_f+0x17c>
     db0:	62 81       	ldd	r22, Z+2	; 0x02
     db2:	73 81       	ldd	r23, Z+3	; 0x03
     db4:	9f ef       	ldi	r25, 0xFF	; 255
     db6:	62 38       	cpi	r22, 0x82	; 130
     db8:	79 07       	cpc	r23, r25
     dba:	0c f0       	brlt	.+2      	; 0xdbe <__pack_f+0x5e>
     dbc:	5b c0       	rjmp	.+182    	; 0xe74 <__pack_f+0x114>
     dbe:	22 e8       	ldi	r18, 0x82	; 130
     dc0:	3f ef       	ldi	r19, 0xFF	; 255
     dc2:	26 1b       	sub	r18, r22
     dc4:	37 0b       	sbc	r19, r23
     dc6:	2a 31       	cpi	r18, 0x1A	; 26
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f0       	brlt	.+10     	; 0xdd6 <__pack_f+0x76>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	2a c0       	rjmp	.+84     	; 0xe2a <__pack_f+0xca>
     dd6:	b8 01       	movw	r22, r16
     dd8:	a7 01       	movw	r20, r14
     dda:	02 2e       	mov	r0, r18
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <__pack_f+0x86>
     dde:	76 95       	lsr	r23
     de0:	67 95       	ror	r22
     de2:	57 95       	ror	r21
     de4:	47 95       	ror	r20
     de6:	0a 94       	dec	r0
     de8:	d2 f7       	brpl	.-12     	; 0xdde <__pack_f+0x7e>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <__pack_f+0x9c>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	aa 1f       	adc	r26, r26
     dfa:	bb 1f       	adc	r27, r27
     dfc:	2a 95       	dec	r18
     dfe:	d2 f7       	brpl	.-12     	; 0xdf4 <__pack_f+0x94>
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	a1 09       	sbc	r26, r1
     e04:	b1 09       	sbc	r27, r1
     e06:	8e 21       	and	r24, r14
     e08:	9f 21       	and	r25, r15
     e0a:	a0 23       	and	r26, r16
     e0c:	b1 23       	and	r27, r17
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	a1 05       	cpc	r26, r1
     e12:	b1 05       	cpc	r27, r1
     e14:	21 f0       	breq	.+8      	; 0xe1e <__pack_f+0xbe>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	9a 01       	movw	r18, r20
     e20:	ab 01       	movw	r20, r22
     e22:	28 2b       	or	r18, r24
     e24:	39 2b       	or	r19, r25
     e26:	4a 2b       	or	r20, r26
     e28:	5b 2b       	or	r21, r27
     e2a:	da 01       	movw	r26, r20
     e2c:	c9 01       	movw	r24, r18
     e2e:	8f 77       	andi	r24, 0x7F	; 127
     e30:	90 70       	andi	r25, 0x00	; 0
     e32:	a0 70       	andi	r26, 0x00	; 0
     e34:	b0 70       	andi	r27, 0x00	; 0
     e36:	80 34       	cpi	r24, 0x40	; 64
     e38:	91 05       	cpc	r25, r1
     e3a:	a1 05       	cpc	r26, r1
     e3c:	b1 05       	cpc	r27, r1
     e3e:	39 f4       	brne	.+14     	; 0xe4e <__pack_f+0xee>
     e40:	27 ff       	sbrs	r18, 7
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <__pack_f+0xf6>
     e44:	20 5c       	subi	r18, 0xC0	; 192
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	4f 4f       	sbci	r20, 0xFF	; 255
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__pack_f+0xf6>
     e4e:	21 5c       	subi	r18, 0xC1	; 193
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	4f 4f       	sbci	r20, 0xFF	; 255
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	e0 e0       	ldi	r30, 0x00	; 0
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	20 30       	cpi	r18, 0x00	; 0
     e5c:	a0 e0       	ldi	r26, 0x00	; 0
     e5e:	3a 07       	cpc	r19, r26
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	4a 07       	cpc	r20, r26
     e64:	a0 e4       	ldi	r26, 0x40	; 64
     e66:	5a 07       	cpc	r21, r26
     e68:	10 f0       	brcs	.+4      	; 0xe6e <__pack_f+0x10e>
     e6a:	e1 e0       	ldi	r30, 0x01	; 1
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	79 01       	movw	r14, r18
     e70:	8a 01       	movw	r16, r20
     e72:	27 c0       	rjmp	.+78     	; 0xec2 <__pack_f+0x162>
     e74:	60 38       	cpi	r22, 0x80	; 128
     e76:	71 05       	cpc	r23, r1
     e78:	64 f5       	brge	.+88     	; 0xed2 <__pack_f+0x172>
     e7a:	fb 01       	movw	r30, r22
     e7c:	e1 58       	subi	r30, 0x81	; 129
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	d8 01       	movw	r26, r16
     e82:	c7 01       	movw	r24, r14
     e84:	8f 77       	andi	r24, 0x7F	; 127
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	a0 70       	andi	r26, 0x00	; 0
     e8a:	b0 70       	andi	r27, 0x00	; 0
     e8c:	80 34       	cpi	r24, 0x40	; 64
     e8e:	91 05       	cpc	r25, r1
     e90:	a1 05       	cpc	r26, r1
     e92:	b1 05       	cpc	r27, r1
     e94:	39 f4       	brne	.+14     	; 0xea4 <__pack_f+0x144>
     e96:	e7 fe       	sbrs	r14, 7
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <__pack_f+0x154>
     e9a:	80 e4       	ldi	r24, 0x40	; 64
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <__pack_f+0x14c>
     ea4:	8f e3       	ldi	r24, 0x3F	; 63
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e8 0e       	add	r14, r24
     eae:	f9 1e       	adc	r15, r25
     eb0:	0a 1f       	adc	r16, r26
     eb2:	1b 1f       	adc	r17, r27
     eb4:	17 ff       	sbrs	r17, 7
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <__pack_f+0x162>
     eb8:	16 95       	lsr	r17
     eba:	07 95       	ror	r16
     ebc:	f7 94       	ror	r15
     ebe:	e7 94       	ror	r14
     ec0:	31 96       	adiw	r30, 0x01	; 1
     ec2:	87 e0       	ldi	r24, 0x07	; 7
     ec4:	16 95       	lsr	r17
     ec6:	07 95       	ror	r16
     ec8:	f7 94       	ror	r15
     eca:	e7 94       	ror	r14
     ecc:	8a 95       	dec	r24
     ece:	d1 f7       	brne	.-12     	; 0xec4 <__pack_f+0x164>
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <__pack_f+0x17c>
     ed2:	ee 24       	eor	r14, r14
     ed4:	ff 24       	eor	r15, r15
     ed6:	87 01       	movw	r16, r14
     ed8:	ef ef       	ldi	r30, 0xFF	; 255
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	6e 2f       	mov	r22, r30
     ede:	67 95       	ror	r22
     ee0:	66 27       	eor	r22, r22
     ee2:	67 95       	ror	r22
     ee4:	90 2f       	mov	r25, r16
     ee6:	9f 77       	andi	r25, 0x7F	; 127
     ee8:	d7 94       	ror	r13
     eea:	dd 24       	eor	r13, r13
     eec:	d7 94       	ror	r13
     eee:	8e 2f       	mov	r24, r30
     ef0:	86 95       	lsr	r24
     ef2:	49 2f       	mov	r20, r25
     ef4:	46 2b       	or	r20, r22
     ef6:	58 2f       	mov	r21, r24
     ef8:	5d 29       	or	r21, r13
     efa:	b7 01       	movw	r22, r14
     efc:	ca 01       	movw	r24, r20
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	08 95       	ret

00000f0a <__unpack_f>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	db 01       	movw	r26, r22
     f0e:	40 81       	ld	r20, Z
     f10:	51 81       	ldd	r21, Z+1	; 0x01
     f12:	22 81       	ldd	r18, Z+2	; 0x02
     f14:	62 2f       	mov	r22, r18
     f16:	6f 77       	andi	r22, 0x7F	; 127
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	22 1f       	adc	r18, r18
     f1c:	22 27       	eor	r18, r18
     f1e:	22 1f       	adc	r18, r18
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	89 2f       	mov	r24, r25
     f24:	88 0f       	add	r24, r24
     f26:	82 2b       	or	r24, r18
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	99 1f       	adc	r25, r25
     f2e:	99 27       	eor	r25, r25
     f30:	99 1f       	adc	r25, r25
     f32:	11 96       	adiw	r26, 0x01	; 1
     f34:	9c 93       	st	X, r25
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	a9 f5       	brne	.+106    	; 0xfa8 <__unpack_f+0x9e>
     f3e:	41 15       	cp	r20, r1
     f40:	51 05       	cpc	r21, r1
     f42:	61 05       	cpc	r22, r1
     f44:	71 05       	cpc	r23, r1
     f46:	11 f4       	brne	.+4      	; 0xf4c <__unpack_f+0x42>
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	37 c0       	rjmp	.+110    	; 0xfba <__unpack_f+0xb0>
     f4c:	82 e8       	ldi	r24, 0x82	; 130
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	13 96       	adiw	r26, 0x03	; 3
     f52:	9c 93       	st	X, r25
     f54:	8e 93       	st	-X, r24
     f56:	12 97       	sbiw	r26, 0x02	; 2
     f58:	9a 01       	movw	r18, r20
     f5a:	ab 01       	movw	r20, r22
     f5c:	67 e0       	ldi	r22, 0x07	; 7
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	44 1f       	adc	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	6a 95       	dec	r22
     f68:	d1 f7       	brne	.-12     	; 0xf5e <__unpack_f+0x54>
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	8c 93       	st	X, r24
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <__unpack_f+0x80>
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	44 1f       	adc	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	8d 91       	ld	r24, X+
     f7c:	9c 91       	ld	r25, X
     f7e:	13 97       	sbiw	r26, 0x03	; 3
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	13 96       	adiw	r26, 0x03	; 3
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	12 97       	sbiw	r26, 0x02	; 2
     f8a:	20 30       	cpi	r18, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	38 07       	cpc	r19, r24
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	48 07       	cpc	r20, r24
     f94:	80 e4       	ldi	r24, 0x40	; 64
     f96:	58 07       	cpc	r21, r24
     f98:	58 f3       	brcs	.-42     	; 0xf70 <__unpack_f+0x66>
     f9a:	14 96       	adiw	r26, 0x04	; 4
     f9c:	2d 93       	st	X+, r18
     f9e:	3d 93       	st	X+, r19
     fa0:	4d 93       	st	X+, r20
     fa2:	5c 93       	st	X, r21
     fa4:	17 97       	sbiw	r26, 0x07	; 7
     fa6:	08 95       	ret
     fa8:	2f 3f       	cpi	r18, 0xFF	; 255
     faa:	31 05       	cpc	r19, r1
     fac:	79 f4       	brne	.+30     	; 0xfcc <__unpack_f+0xc2>
     fae:	41 15       	cp	r20, r1
     fb0:	51 05       	cpc	r21, r1
     fb2:	61 05       	cpc	r22, r1
     fb4:	71 05       	cpc	r23, r1
     fb6:	19 f4       	brne	.+6      	; 0xfbe <__unpack_f+0xb4>
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	8c 93       	st	X, r24
     fbc:	08 95       	ret
     fbe:	64 ff       	sbrs	r22, 4
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <__unpack_f+0xbe>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8c 93       	st	X, r24
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__unpack_f+0xe2>
     fc8:	1c 92       	st	X, r1
     fca:	10 c0       	rjmp	.+32     	; 0xfec <__unpack_f+0xe2>
     fcc:	2f 57       	subi	r18, 0x7F	; 127
     fce:	30 40       	sbci	r19, 0x00	; 0
     fd0:	13 96       	adiw	r26, 0x03	; 3
     fd2:	3c 93       	st	X, r19
     fd4:	2e 93       	st	-X, r18
     fd6:	12 97       	sbiw	r26, 0x02	; 2
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	8c 93       	st	X, r24
     fdc:	87 e0       	ldi	r24, 0x07	; 7
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	66 1f       	adc	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	8a 95       	dec	r24
     fe8:	d1 f7       	brne	.-12     	; 0xfde <__unpack_f+0xd4>
     fea:	70 64       	ori	r23, 0x40	; 64
     fec:	14 96       	adiw	r26, 0x04	; 4
     fee:	4d 93       	st	X+, r20
     ff0:	5d 93       	st	X+, r21
     ff2:	6d 93       	st	X+, r22
     ff4:	7c 93       	st	X, r23
     ff6:	17 97       	sbiw	r26, 0x07	; 7
     ff8:	08 95       	ret

00000ffa <__fpcmp_parts_f>:
     ffa:	1f 93       	push	r17
     ffc:	dc 01       	movw	r26, r24
     ffe:	fb 01       	movw	r30, r22
    1000:	9c 91       	ld	r25, X
    1002:	92 30       	cpi	r25, 0x02	; 2
    1004:	08 f4       	brcc	.+2      	; 0x1008 <__fpcmp_parts_f+0xe>
    1006:	47 c0       	rjmp	.+142    	; 0x1096 <__fpcmp_parts_f+0x9c>
    1008:	80 81       	ld	r24, Z
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	08 f4       	brcc	.+2      	; 0x1010 <__fpcmp_parts_f+0x16>
    100e:	43 c0       	rjmp	.+134    	; 0x1096 <__fpcmp_parts_f+0x9c>
    1010:	94 30       	cpi	r25, 0x04	; 4
    1012:	51 f4       	brne	.+20     	; 0x1028 <__fpcmp_parts_f+0x2e>
    1014:	11 96       	adiw	r26, 0x01	; 1
    1016:	1c 91       	ld	r17, X
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	99 f5       	brne	.+102    	; 0x1082 <__fpcmp_parts_f+0x88>
    101c:	81 81       	ldd	r24, Z+1	; 0x01
    101e:	68 2f       	mov	r22, r24
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	61 1b       	sub	r22, r17
    1024:	71 09       	sbc	r23, r1
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <__fpcmp_parts_f+0xac>
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	21 f0       	breq	.+8      	; 0x1034 <__fpcmp_parts_f+0x3a>
    102c:	92 30       	cpi	r25, 0x02	; 2
    102e:	31 f4       	brne	.+12     	; 0x103c <__fpcmp_parts_f+0x42>
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	b9 f1       	breq	.+110    	; 0x10a2 <__fpcmp_parts_f+0xa8>
    1034:	81 81       	ldd	r24, Z+1	; 0x01
    1036:	88 23       	and	r24, r24
    1038:	89 f1       	breq	.+98     	; 0x109c <__fpcmp_parts_f+0xa2>
    103a:	2d c0       	rjmp	.+90     	; 0x1096 <__fpcmp_parts_f+0x9c>
    103c:	11 96       	adiw	r26, 0x01	; 1
    103e:	1c 91       	ld	r17, X
    1040:	11 97       	sbiw	r26, 0x01	; 1
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	f1 f0       	breq	.+60     	; 0x1082 <__fpcmp_parts_f+0x88>
    1046:	81 81       	ldd	r24, Z+1	; 0x01
    1048:	18 17       	cp	r17, r24
    104a:	d9 f4       	brne	.+54     	; 0x1082 <__fpcmp_parts_f+0x88>
    104c:	12 96       	adiw	r26, 0x02	; 2
    104e:	2d 91       	ld	r18, X+
    1050:	3c 91       	ld	r19, X
    1052:	13 97       	sbiw	r26, 0x03	; 3
    1054:	82 81       	ldd	r24, Z+2	; 0x02
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	94 f0       	brlt	.+36     	; 0x1082 <__fpcmp_parts_f+0x88>
    105e:	28 17       	cp	r18, r24
    1060:	39 07       	cpc	r19, r25
    1062:	bc f0       	brlt	.+46     	; 0x1092 <__fpcmp_parts_f+0x98>
    1064:	14 96       	adiw	r26, 0x04	; 4
    1066:	8d 91       	ld	r24, X+
    1068:	9d 91       	ld	r25, X+
    106a:	0d 90       	ld	r0, X+
    106c:	bc 91       	ld	r27, X
    106e:	a0 2d       	mov	r26, r0
    1070:	24 81       	ldd	r18, Z+4	; 0x04
    1072:	35 81       	ldd	r19, Z+5	; 0x05
    1074:	46 81       	ldd	r20, Z+6	; 0x06
    1076:	57 81       	ldd	r21, Z+7	; 0x07
    1078:	28 17       	cp	r18, r24
    107a:	39 07       	cpc	r19, r25
    107c:	4a 07       	cpc	r20, r26
    107e:	5b 07       	cpc	r21, r27
    1080:	18 f4       	brcc	.+6      	; 0x1088 <__fpcmp_parts_f+0x8e>
    1082:	11 23       	and	r17, r17
    1084:	41 f0       	breq	.+16     	; 0x1096 <__fpcmp_parts_f+0x9c>
    1086:	0a c0       	rjmp	.+20     	; 0x109c <__fpcmp_parts_f+0xa2>
    1088:	82 17       	cp	r24, r18
    108a:	93 07       	cpc	r25, r19
    108c:	a4 07       	cpc	r26, r20
    108e:	b5 07       	cpc	r27, r21
    1090:	40 f4       	brcc	.+16     	; 0x10a2 <__fpcmp_parts_f+0xa8>
    1092:	11 23       	and	r17, r17
    1094:	19 f0       	breq	.+6      	; 0x109c <__fpcmp_parts_f+0xa2>
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <__fpcmp_parts_f+0xac>
    109c:	6f ef       	ldi	r22, 0xFF	; 255
    109e:	7f ef       	ldi	r23, 0xFF	; 255
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <__fpcmp_parts_f+0xac>
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	cb 01       	movw	r24, r22
    10a8:	1f 91       	pop	r17
    10aa:	08 95       	ret

000010ac <UART_Init>:
#include "UART_interface.h"
#include "UART_register.h"
#include "../TMR1/TMR1_interface.h"

void UART_Init(void){
	UDR = 0;
    10ac:	1c b8       	out	0x0c, r1	; 12
	UCSRA = 0;
    10ae:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0;
    10b0:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0;
    10b2:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0;
    10b4:	19 b8       	out	0x09, r1	; 9
	UBRRH = 0;
    10b6:	10 bc       	out	0x20, r1	; 32

	//UCSRA |= (1<<U2X);
	UCSRB |= (1<<RXEN)|(1<<TXEN);
    10b8:	8a b1       	in	r24, 0x0a	; 10
    10ba:	88 61       	ori	r24, 0x18	; 24
    10bc:	8a b9       	out	0x0a, r24	; 10
	UBRRL = 207;
    10be:	8f ec       	ldi	r24, 0xCF	; 207
    10c0:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1<<URSEl)|(1<<UCSZ1)|(1<<UCSZ0);
    10c2:	80 b5       	in	r24, 0x20	; 32
    10c4:	86 68       	ori	r24, 0x86	; 134
    10c6:	80 bd       	out	0x20, r24	; 32
}
    10c8:	08 95       	ret

000010ca <UART_DeInit>:

void UART_DeInit(void){
	UDR = 0;
    10ca:	1c b8       	out	0x0c, r1	; 12
	UCSRA = 0;
    10cc:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0;
    10ce:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0;
    10d0:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0;
    10d2:	19 b8       	out	0x09, r1	; 9
	UBRRH = 0;
    10d4:	10 bc       	out	0x20, r1	; 32
}
    10d6:	08 95       	ret

000010d8 <UART_SendChar_Polling>:

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    10d8:	5d 9b       	sbis	0x0b, 5	; 11
    10da:	fe cf       	rjmp	.-4      	; 0x10d8 <UART_SendChar_Polling>
	UDR = UART_Send_Char;
    10dc:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    10de:	5d 9a       	sbi	0x0b, 5	; 11
}
    10e0:	08 95       	ret

000010e2 <UART_RecieveChar_Polling>:

u8 UART_RecieveChar_Polling(void){
	while(!(UCSRA & (1<<RXC)));
    10e2:	5f 9b       	sbis	0x0b, 7	; 11
    10e4:	fe cf       	rjmp	.-4      	; 0x10e2 <UART_RecieveChar_Polling>
	UCSRA |= (1<<RXC);
    10e6:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR;
    10e8:	8c b1       	in	r24, 0x0c	; 12
}
    10ea:	08 95       	ret

000010ec <UART_SendNumber_Polling>:

void UART_SendNumber_Polling(s32 UART_Send_Number){
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	5b 01       	movw	r10, r22
    1108:	6c 01       	movw	r12, r24
	s32 numberHolder=0;
	u8 digitsCounter=0;
	if(UART_Send_Number==0){
    110a:	61 15       	cp	r22, r1
    110c:	71 05       	cpc	r23, r1
    110e:	81 05       	cpc	r24, r1
    1110:	91 05       	cpc	r25, r1
    1112:	31 f4       	brne	.+12     	; 0x1120 <UART_SendNumber_Polling+0x34>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    1114:	5d 9b       	sbis	0x0b, 5	; 11
    1116:	fe cf       	rjmp	.-4      	; 0x1114 <UART_SendNumber_Polling+0x28>
	UDR = UART_Send_Char;
    1118:	80 e3       	ldi	r24, 0x30	; 48
    111a:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    111c:	5d 9a       	sbi	0x0b, 5	; 11
    111e:	56 c0       	rjmp	.+172    	; 0x11cc <UART_SendNumber_Polling+0xe0>
	u8 digitsCounter=0;
	if(UART_Send_Number==0){
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
    1120:	97 ff       	sbrs	r25, 7
    1122:	0d c0       	rjmp	.+26     	; 0x113e <UART_SendNumber_Polling+0x52>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    1124:	5d 9b       	sbis	0x0b, 5	; 11
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <UART_SendNumber_Polling+0x38>
	if(UART_Send_Number==0){
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
    1128:	d0 94       	com	r13
    112a:	c0 94       	com	r12
    112c:	b0 94       	com	r11
    112e:	a0 94       	com	r10
    1130:	a1 1c       	adc	r10, r1
    1132:	b1 1c       	adc	r11, r1
    1134:	c1 1c       	adc	r12, r1
    1136:	d1 1c       	adc	r13, r1
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
    1138:	8d e2       	ldi	r24, 0x2D	; 45
    113a:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    113c:	5d 9a       	sbi	0x0b, 5	; 11
    113e:	66 24       	eor	r6, r6
    1140:	77 24       	eor	r7, r7
    1142:	43 01       	movw	r8, r6
    1144:	55 24       	eor	r5, r5
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
			numberHolder*=10;
    1146:	c4 01       	movw	r24, r8
    1148:	b3 01       	movw	r22, r6
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    1156:	7b 01       	movw	r14, r22
    1158:	8c 01       	movw	r16, r24
			numberHolder+=UART_Send_Number%10;
    115a:	c6 01       	movw	r24, r12
    115c:	b5 01       	movw	r22, r10
    115e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__divmodsi4>
    1162:	3b 01       	movw	r6, r22
    1164:	4c 01       	movw	r8, r24
    1166:	6e 0c       	add	r6, r14
    1168:	7f 1c       	adc	r7, r15
    116a:	80 1e       	adc	r8, r16
    116c:	91 1e       	adc	r9, r17
			UART_Send_Number/=10;
    116e:	c6 01       	movw	r24, r12
    1170:	b5 01       	movw	r22, r10
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__divmodsi4>
    117e:	c9 01       	movw	r24, r18
    1180:	da 01       	movw	r26, r20
    1182:	5c 01       	movw	r10, r24
    1184:	6d 01       	movw	r12, r26
			digitsCounter++;
    1186:	53 94       	inc	r5
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
    1188:	a1 14       	cp	r10, r1
    118a:	b1 04       	cpc	r11, r1
    118c:	c1 04       	cpc	r12, r1
    118e:	d1 04       	cpc	r13, r1
    1190:	d1 f6       	brne	.-76     	; 0x1146 <UART_SendNumber_Polling+0x5a>
    1192:	1a c0       	rjmp	.+52     	; 0x11c8 <UART_SendNumber_Polling+0xdc>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    1194:	5d 9b       	sbis	0x0b, 5	; 11
    1196:	fe cf       	rjmp	.-4      	; 0x1194 <UART_SendNumber_Polling+0xa8>
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
    1198:	c4 01       	movw	r24, r8
    119a:	b3 01       	movw	r22, r6
    119c:	2a e0       	ldi	r18, 0x0A	; 10
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__divmodsi4>
    11a8:	60 5d       	subi	r22, 0xD0	; 208
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
    11aa:	6c b9       	out	0x0c, r22	; 12
	UCSRA |= (1<<UDRE);
    11ac:	5d 9a       	sbi	0x0b, 5	; 11
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
    11ae:	c4 01       	movw	r24, r8
    11b0:	b3 01       	movw	r22, r6
    11b2:	2a e0       	ldi	r18, 0x0A	; 10
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__divmodsi4>
    11be:	c9 01       	movw	r24, r18
    11c0:	da 01       	movw	r26, r20
    11c2:	3c 01       	movw	r6, r24
    11c4:	4d 01       	movw	r8, r26
			digitsCounter--;
    11c6:	5a 94       	dec	r5
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
    11c8:	55 20       	and	r5, r5
    11ca:	21 f7       	brne	.-56     	; 0x1194 <UART_SendNumber_Polling+0xa8>
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
			digitsCounter--;
		}
	}
}
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	bf 90       	pop	r11
    11da:	af 90       	pop	r10
    11dc:	9f 90       	pop	r9
    11de:	8f 90       	pop	r8
    11e0:	7f 90       	pop	r7
    11e2:	6f 90       	pop	r6
    11e4:	5f 90       	pop	r5
    11e6:	08 95       	ret

000011e8 <UART_SendNumber_floatingPoint_Polling>:

void UART_SendNumber_floatingPoint_Polling(f32 UART_Send_Number){
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	7b 01       	movw	r14, r22
    11fa:	8c 01       	movw	r16, r24
	s32 tmp_UART_Send_Number=(s32)UART_Send_Number;
    11fc:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    1200:	5b 01       	movw	r10, r22
    1202:	6c 01       	movw	r12, r24

	UART_SendNumber_Polling(tmp_UART_Send_Number);
    1204:	0e 94 76 08 	call	0x10ec	; 0x10ec <UART_SendNumber_Polling>
	UART_Send_Number=(f32)(UART_Send_Number-tmp_UART_Send_Number);
    1208:	c6 01       	movw	r24, r12
    120a:	b5 01       	movw	r22, r10
    120c:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	c8 01       	movw	r24, r16
    1216:	b7 01       	movw	r22, r14
    1218:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    121c:	7b 01       	movw	r14, r22
    121e:	8c 01       	movw	r16, r24
	if(UART_Send_Number<0){
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	0e 94 06 05 	call	0xa0c	; 0xa0c <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	54 f4       	brge	.+20     	; 0x1244 <UART_SendNumber_floatingPoint_Polling+0x5c>
		UART_Send_Number=0-UART_Send_Number;
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a8 01       	movw	r20, r16
    123a:	97 01       	movw	r18, r14
    123c:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    1240:	7b 01       	movw	r14, r22
    1242:	8c 01       	movw	r16, r24
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    1244:	5d 9b       	sbis	0x0b, 5	; 11
    1246:	fe cf       	rjmp	.-4      	; 0x1244 <UART_SendNumber_floatingPoint_Polling+0x5c>
	UDR = UART_Send_Char;
    1248:	8e e2       	ldi	r24, 0x2E	; 46
    124a:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    124c:	5d 9a       	sbi	0x0b, 5	; 11
	UART_Send_Number=(f32)(UART_Send_Number-tmp_UART_Send_Number);
	if(UART_Send_Number<0){
		UART_Send_Number=0-UART_Send_Number;
	}
	UART_SendChar_Polling('.');
	UART_SendNumber_Polling(UART_Send_Number*100);
    124e:	c8 01       	movw	r24, r16
    1250:	b7 01       	movw	r22, r14
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	48 ec       	ldi	r20, 0xC8	; 200
    1258:	52 e4       	ldi	r21, 0x42	; 66
    125a:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
    125e:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    1262:	0e 94 76 08 	call	0x10ec	; 0x10ec <UART_SendNumber_Polling>
}
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	08 95       	ret

00001278 <UART_SendChar_Interrupt>:

u8 TX_Char;
u8 RX_Char;

void UART_SendChar_Interrupt(u8 UART_Send_Char){
	UCSRB |= (1<<TXCIE);
    1278:	56 9a       	sbi	0x0a, 6	; 10
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);
    127a:	9f b7       	in	r25, 0x3f	; 63
    127c:	90 68       	ori	r25, 0x80	; 128
    127e:	9f bf       	out	0x3f, r25	; 63
	TX_Char = UART_Send_Char;
    1280:	80 93 ca 02 	sts	0x02CA, r24
}
    1284:	08 95       	ret

00001286 <UART_RecieveChar_Interrupt>:

void UART_RecieveChar_Interrupt(void){
	UCSRB |= (1<<RXCIE);
    1286:	57 9a       	sbi	0x0a, 7	; 10
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);
    1288:	8f b7       	in	r24, 0x3f	; 63
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	8f bf       	out	0x3f, r24	; 63
}
    128e:	08 95       	ret

00001290 <UART_CallBackTx>:

ptr_2func UART_CallBackedTx = NULL;
ptr_2func UART_CallBackedRx = NULL;

void UART_CallBackTx(ptr_2func ISR_Func){
	UART_CallBackedTx = ISR_Func;
    1290:	90 93 ad 01 	sts	0x01AD, r25
    1294:	80 93 ac 01 	sts	0x01AC, r24
}
    1298:	08 95       	ret

0000129a <UART_CallBackRx>:

void UART_CallBackRx(ptr_2func ISR_Func){
	UART_CallBackedRx = ISR_Func;
    129a:	90 93 af 01 	sts	0x01AF, r25
    129e:	80 93 ae 01 	sts	0x01AE, r24
}
    12a2:	08 95       	ret

000012a4 <__vector_14>:

void __vector_14 (void) {
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
	if (UART_CallBackedTx != NULL){
    12c6:	e0 91 ac 01 	lds	r30, 0x01AC
    12ca:	f0 91 ad 01 	lds	r31, 0x01AD
    12ce:	30 97       	sbiw	r30, 0x00	; 0
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__vector_14+0x30>
		UART_CallBackedTx();
    12d2:	09 95       	icall
	}
	UDR = TX_Char;
    12d4:	80 91 ca 02 	lds	r24, 0x02CA
    12d8:	8c b9       	out	0x0c, r24	; 12
}
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_13>:

void __vector_13 (void) {
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
	RX_Char = UDR;
    131e:	8c b1       	in	r24, 0x0c	; 12
    1320:	80 93 bd 02 	sts	0x02BD, r24
	if (UART_CallBackedRx != NULL){
    1324:	e0 91 ae 01 	lds	r30, 0x01AE
    1328:	f0 91 af 01 	lds	r31, 0x01AF
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	09 f0       	breq	.+2      	; 0x1332 <__vector_13+0x36>
		UART_CallBackedRx();
    1330:	09 95       	icall
	}
}
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <TMR1_Init_CTC>:
#include "TMR1_register.h"
#include "TMR1_config.h"

void TMR1_Init_CTC(void){

	TCCR1A = ZERO;
    1354:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    1356:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    1358:	1d bc       	out	0x2d, r1	; 45
    135a:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    135c:	1b bc       	out	0x2b, r1	; 43
    135e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    1360:	19 bc       	out	0x29, r1	; 41
    1362:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    1364:	17 bc       	out	0x27, r1	; 39
    1366:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<TICIE1)|(1<<OCIE1A)|(1<<OCIE1B)|(1<<TOIE1));
    1368:	89 b7       	in	r24, 0x39	; 57
    136a:	83 7c       	andi	r24, 0xC3	; 195
    136c:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<ICF1)|(1<<OCF1A)|(1<<OCF1B)|(1<<TOV1));
    136e:	88 b7       	in	r24, 0x38	; 56
    1370:	83 7c       	andi	r24, 0xC3	; 195
    1372:	88 bf       	out	0x38, r24	; 56

	//DDRD |= (1<<5);
	TCCR1B |= TMR1_WGM_CTC_TCCR1B;												//Setting the timer to CTC mode.
    1374:	8e b5       	in	r24, 0x2e	; 46
    1376:	88 60       	ori	r24, 0x08	; 8
    1378:	8e bd       	out	0x2e, r24	; 46
																				//The options are set in TMR1_config.h file.
	TIMSK |= TMR1_INTERRUPT_CTC;												//Interrupt on compare A match to operate on CTC mode.
    137a:	89 b7       	in	r24, 0x39	; 57
    137c:	80 61       	ori	r24, 0x10	; 16
    137e:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
    1380:	8f b7       	in	r24, 0x3f	; 63
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	8f bf       	out	0x3f, r24	; 63
}
    1386:	08 95       	ret

00001388 <TMR1_Start_CTC>:

void TMR1_Start_CTC(u16 Time_ms){
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
	TCNT1 = ZERO;
    138c:	1d bc       	out	0x2d, r1	; 45
    138e:	1c bc       	out	0x2c, r1	; 44
	OCR1A |= (((u32)(Time_ms*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_CTC));		//This equation change the required time in ms to the required OCR register counts.
    1390:	0a b5       	in	r16, 0x2a	; 42
    1392:	1b b5       	in	r17, 0x2b	; 43
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	20 e4       	ldi	r18, 0x40	; 64
    139e:	3f e1       	ldi	r19, 0x1F	; 31
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    13a8:	2a e0       	ldi	r18, 0x0A	; 10
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	2a 95       	dec	r18
    13b4:	d1 f7       	brne	.-12     	; 0x13aa <TMR1_Start_CTC+0x22>
    13b6:	06 2b       	or	r16, r22
    13b8:	17 2b       	or	r17, r23
    13ba:	1b bd       	out	0x2b, r17	; 43
    13bc:	0a bd       	out	0x2a, r16	; 42
																				//Prescaler is set to X .. So Tick Time is: X/8MHz (uc frequency).
																				//Tick time is now 1024/8M = 128us.
																				//So number of counts needed is: Required Time(in seconds)/Tick time.
																				//Maximum number of OCR counts is 65535 which corresponds to maximum of 8.38 sec.
	TCCR1B |= TMR1_CLOCK_SELECT_CTC;
    13be:	8e b5       	in	r24, 0x2e	; 46
    13c0:	85 60       	ori	r24, 0x05	; 5
    13c2:	8e bd       	out	0x2e, r24	; 46
}
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <TMR1_Delay_ms>:

void TMR1_Delay_ms(u16 time_ms){
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	8c 01       	movw	r16, r24
	TMR1_Start_CTC(time_ms+5);
    13d4:	05 96       	adiw	r24, 0x05	; 5
    13d6:	0e 94 c4 09 	call	0x1388	; 0x1388 <TMR1_Start_CTC>
	while(time_ms>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000)));		//The condition checks if the required time is equal the current time, the equation gives the current time from the TCNT1.
    13da:	78 01       	movw	r14, r16
    13dc:	00 e0       	ldi	r16, 0x00	; 0
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	6c b5       	in	r22, 0x2c	; 44
    13e2:	7d b5       	in	r23, 0x2d	; 45
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	3a e0       	ldi	r19, 0x0A	; 10
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	88 1f       	adc	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	3a 95       	dec	r19
    13f4:	d1 f7       	brne	.-12     	; 0x13ea <TMR1_Delay_ms+0x20>
    13f6:	20 e4       	ldi	r18, 0x40	; 64
    13f8:	3f e1       	ldi	r19, 0x1F	; 31
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    1402:	2e 15       	cp	r18, r14
    1404:	3f 05       	cpc	r19, r15
    1406:	40 07       	cpc	r20, r16
    1408:	51 07       	cpc	r21, r17
    140a:	50 f3       	brcs	.-44     	; 0x13e0 <TMR1_Delay_ms+0x16>
	u16 timeMs = ((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000);
	return timeMs;
}

void TMR1_Stop(void){															//Works for all timer modes.
	TCCR1B &= ~(0x07);															//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    140c:	8e b5       	in	r24, 0x2e	; 46
    140e:	88 7f       	andi	r24, 0xF8	; 248
    1410:	8e bd       	out	0x2e, r24	; 46

void TMR1_Delay_ms(u16 time_ms){
	TMR1_Start_CTC(time_ms+5);
	while(time_ms>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000)));		//The condition checks if the required time is equal the current time, the equation gives the current time from the TCNT1.
	TMR1_Stop();
}
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	08 95       	ret

0000141c <TMR1_Delay_us>:

void TMR1_Delay_us(u16 time_us){
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	8c 01       	movw	r16, r24
	TMR1_Start_CTC(8200);
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	90 e2       	ldi	r25, 0x20	; 32
    1426:	0e 94 c4 09 	call	0x1388	; 0x1388 <TMR1_Start_CTC>
	while(time_us>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000000)));	//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
    142a:	98 01       	movw	r18, r16
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	8c b5       	in	r24, 0x2c	; 44
    1432:	9d b5       	in	r25, 0x2d	; 45
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	67 e0       	ldi	r22, 0x07	; 7
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	aa 1f       	adc	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	6a 95       	dec	r22
    1444:	d1 f7       	brne	.-12     	; 0x143a <TMR1_Delay_us+0x1e>
    1446:	82 17       	cp	r24, r18
    1448:	93 07       	cpc	r25, r19
    144a:	a4 07       	cpc	r26, r20
    144c:	b5 07       	cpc	r27, r21
    144e:	80 f3       	brcs	.-32     	; 0x1430 <TMR1_Delay_us+0x14>
	u16 timeMs = ((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000);
	return timeMs;
}

void TMR1_Stop(void){															//Works for all timer modes.
	TCCR1B &= ~(0x07);															//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    1450:	8e b5       	in	r24, 0x2e	; 46
    1452:	88 7f       	andi	r24, 0xF8	; 248
    1454:	8e bd       	out	0x2e, r24	; 46

void TMR1_Delay_us(u16 time_us){
	TMR1_Start_CTC(8200);
	while(time_us>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000000)));	//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
	TMR1_Stop();
}
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <TMR1_Read_Current_Count_Value_CTC>:

u16 TMR1_Read_Current_Count_Value_CTC(void){
	return TCNT1;
    145c:	2c b5       	in	r18, 0x2c	; 44
    145e:	3d b5       	in	r19, 0x2d	; 45
}
    1460:	c9 01       	movw	r24, r18
    1462:	08 95       	ret

00001464 <TMR1_Read_Current_Time_MS_CTC>:

u16 TMR1_Read_Current_Time_MS_CTC(void){
	u16 timeMs = ((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000);
    1464:	6c b5       	in	r22, 0x2c	; 44
    1466:	7d b5       	in	r23, 0x2d	; 45
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	ea e0       	ldi	r30, 0x0A	; 10
    146e:	66 0f       	add	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	88 1f       	adc	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	ea 95       	dec	r30
    1478:	d1 f7       	brne	.-12     	; 0x146e <TMR1_Read_Current_Time_MS_CTC+0xa>
    147a:	20 e4       	ldi	r18, 0x40	; 64
    147c:	3f e1       	ldi	r19, 0x1F	; 31
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    1486:	c9 01       	movw	r24, r18
	return timeMs;
}
    1488:	08 95       	ret

0000148a <TMR1_Stop>:

void TMR1_Stop(void){															//Works for all timer modes.
	TCCR1B &= ~(0x07);															//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    148a:	8e b5       	in	r24, 0x2e	; 46
    148c:	88 7f       	andi	r24, 0xF8	; 248
    148e:	8e bd       	out	0x2e, r24	; 46
}
    1490:	08 95       	ret

00001492 <TMR1_Init_PhaseCorrect_PWM>:

void TMR1_Init_PhaseCorrect_PWM(void){

	TCCR1A = ZERO;
    1492:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    1494:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    1496:	1d bc       	out	0x2d, r1	; 45
    1498:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    149a:	1b bc       	out	0x2b, r1	; 43
    149c:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    149e:	19 bc       	out	0x29, r1	; 41
    14a0:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    14a2:	17 bc       	out	0x27, r1	; 39
    14a4:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    14a6:	89 b7       	in	r24, 0x39	; 57
    14a8:	83 7c       	andi	r24, 0xC3	; 195
    14aa:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    14ac:	88 b7       	in	r24, 0x38	; 56
    14ae:	83 7c       	andi	r24, 0xC3	; 195
    14b0:	88 bf       	out	0x38, r24	; 56

	DDRD |= (1<<5);
    14b2:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A |= (TMR1_WGM_PHASECORRECT_PWM_ICR1_TCCR1A | TMR1_COM_CLEAR_OC1A); 	//Setting the WGM to Phase Correct mode, and the COM to non-inverting mode.
    14b4:	8f b5       	in	r24, 0x2f	; 47
    14b6:	82 68       	ori	r24, 0x82	; 130
    14b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= TMR1_WGM_PHASECORRECT_PWM_ICR1_TCCR1B;							//The options are set in TMR1_config.h file.
    14ba:	8e b5       	in	r24, 0x2e	; 46
    14bc:	80 61       	ori	r24, 0x10	; 16
    14be:	8e bd       	out	0x2e, r24	; 46
	ICR1 |= 0xFFFF;
    14c0:	86 b5       	in	r24, 0x26	; 38
    14c2:	97 b5       	in	r25, 0x27	; 39
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	97 bd       	out	0x27, r25	; 39
    14ca:	86 bd       	out	0x26, r24	; 38
	//TIMSK |= TMR1_INTERRUPT_CONFIG_PWM;										//Interrupt on compare A match.
	//SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
}
    14cc:	08 95       	ret

000014ce <TMR1_Start_PhaseCorrect_PWM>:

void TMR1_Start_PhaseCorrect_PWM(u16 Period_ms, u16 dutyCyclePercentage){
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms/2)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	20 e4       	ldi	r18, 0x40	; 64
    14e2:	3f e1       	ldi	r19, 0x1F	; 31
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    14ec:	77 bd       	out	0x27, r23	; 39
    14ee:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 										//Set the OCR1A register value to be compared with TCNT.
    14f0:	86 b5       	in	r24, 0x26	; 38
    14f2:	97 b5       	in	r25, 0x27	; 39
    14f4:	9c 01       	movw	r18, r24
    14f6:	02 9f       	mul	r16, r18
    14f8:	c0 01       	movw	r24, r0
    14fa:	03 9f       	mul	r16, r19
    14fc:	90 0d       	add	r25, r0
    14fe:	12 9f       	mul	r17, r18
    1500:	90 0d       	add	r25, r0
    1502:	11 24       	eor	r1, r1
    1504:	64 e6       	ldi	r22, 0x64	; 100
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    150c:	7b bd       	out	0x2b, r23	; 43
    150e:	6a bd       	out	0x2a, r22	; 42

	TCCR1B |= TMR1_CLOCK_SELECT_PWM;
    1510:	8e b5       	in	r24, 0x2e	; 46
    1512:	81 60       	ori	r24, 0x01	; 1
    1514:	8e bd       	out	0x2e, r24	; 46
}
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <TMR1_Change_PhaseCorrect_PWM_DutyCycle_Period>:

void TMR1_Change_PhaseCorrect_PWM_DutyCycle_Period(u16 Period_ms, u16 dutyCyclePercentage){
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms/2)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	20 e4       	ldi	r18, 0x40	; 64
    1530:	3f e1       	ldi	r19, 0x1F	; 31
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    153a:	77 bd       	out	0x27, r23	; 39
    153c:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 										//Set the OCR1A register value to be compared with TCNT.
    153e:	86 b5       	in	r24, 0x26	; 38
    1540:	97 b5       	in	r25, 0x27	; 39
    1542:	9c 01       	movw	r18, r24
    1544:	02 9f       	mul	r16, r18
    1546:	c0 01       	movw	r24, r0
    1548:	03 9f       	mul	r16, r19
    154a:	90 0d       	add	r25, r0
    154c:	12 9f       	mul	r17, r18
    154e:	90 0d       	add	r25, r0
    1550:	11 24       	eor	r1, r1
    1552:	64 e6       	ldi	r22, 0x64	; 100
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    155a:	7b bd       	out	0x2b, r23	; 43
    155c:	6a bd       	out	0x2a, r22	; 42
	TCNT1 = 0;
    155e:	1d bc       	out	0x2d, r1	; 45
    1560:	1c bc       	out	0x2c, r1	; 44
}
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <TMR1_Change_PhaseCorrect_PWM_DutyCycle>:

void TMR1_Change_PhaseCorrect_PWM_DutyCycle(u16 dutyCyclePercentage){
	OCR1A = (dutyCyclePercentage*ICR1)/100;
    1568:	26 b5       	in	r18, 0x26	; 38
    156a:	37 b5       	in	r19, 0x27	; 39
    156c:	ac 01       	movw	r20, r24
    156e:	42 9f       	mul	r20, r18
    1570:	c0 01       	movw	r24, r0
    1572:	43 9f       	mul	r20, r19
    1574:	90 0d       	add	r25, r0
    1576:	52 9f       	mul	r21, r18
    1578:	90 0d       	add	r25, r0
    157a:	11 24       	eor	r1, r1
    157c:	64 e6       	ldi	r22, 0x64	; 100
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    1584:	7b bd       	out	0x2b, r23	; 43
    1586:	6a bd       	out	0x2a, r22	; 42
}
    1588:	08 95       	ret

0000158a <TMR1_Change_PhaseCorrect_PWM_Period>:

void TMR1_Change_PhaseCorrect_PWM_Period(u16 Period_ms){
	ICR1 = (((u32)((Period_ms/2)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the new TOP value (period) of the timer.
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	20 e4       	ldi	r18, 0x40	; 64
    1598:	3f e1       	ldi	r19, 0x1F	; 31
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    15a2:	77 bd       	out	0x27, r23	; 39
    15a4:	66 bd       	out	0x26, r22	; 38
	TCNT1 = ZERO;
    15a6:	1d bc       	out	0x2d, r1	; 45
    15a8:	1c bc       	out	0x2c, r1	; 44
}
    15aa:	08 95       	ret

000015ac <TMR1_Init_Fast_PWM>:

void TMR1_Init_Fast_PWM(void){
	TCCR1A = ZERO;
    15ac:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    15ae:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    15b0:	1d bc       	out	0x2d, r1	; 45
    15b2:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    15b4:	1b bc       	out	0x2b, r1	; 43
    15b6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    15b8:	19 bc       	out	0x29, r1	; 41
    15ba:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    15bc:	17 bc       	out	0x27, r1	; 39
    15be:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    15c0:	89 b7       	in	r24, 0x39	; 57
    15c2:	83 7c       	andi	r24, 0xC3	; 195
    15c4:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    15c6:	88 b7       	in	r24, 0x38	; 56
    15c8:	83 7c       	andi	r24, 0xC3	; 195
    15ca:	88 bf       	out	0x38, r24	; 56

	DDRD |= (1<<5);
    15cc:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A |= (TMR1_WGM_FAST_PWM_ICR1_TCCR1A | TMR1_COM_CLEAR_OC1A); 			//Setting the WGM to Phase Correct mode, and the COM to non-inverting mode.
    15ce:	8f b5       	in	r24, 0x2f	; 47
    15d0:	82 68       	ori	r24, 0x82	; 130
    15d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= TMR1_WGM_FAST_PWM_ICR1_TCCR1B;									//The options are set in TMR1_config.h file.
    15d4:	8e b5       	in	r24, 0x2e	; 46
    15d6:	88 61       	ori	r24, 0x18	; 24
    15d8:	8e bd       	out	0x2e, r24	; 46
	ICR1 |= 0xFFFF;
    15da:	86 b5       	in	r24, 0x26	; 38
    15dc:	97 b5       	in	r25, 0x27	; 39
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	97 bd       	out	0x27, r25	; 39
    15e4:	86 bd       	out	0x26, r24	; 38
}
    15e6:	08 95       	ret

000015e8 <TMR1_Start_Fast_PWM>:

void TMR1_Start_Fast_PWM(u16 Period_ms, u16 dutyCyclePercentage){
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	20 e4       	ldi	r18, 0x40	; 64
    15f8:	3f e1       	ldi	r19, 0x1F	; 31
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    1602:	77 bd       	out	0x27, r23	; 39
    1604:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 									//Set the OCR1A register value to be compared with TCNT.
    1606:	86 b5       	in	r24, 0x26	; 38
    1608:	97 b5       	in	r25, 0x27	; 39
    160a:	9c 01       	movw	r18, r24
    160c:	02 9f       	mul	r16, r18
    160e:	c0 01       	movw	r24, r0
    1610:	03 9f       	mul	r16, r19
    1612:	90 0d       	add	r25, r0
    1614:	12 9f       	mul	r17, r18
    1616:	90 0d       	add	r25, r0
    1618:	11 24       	eor	r1, r1
    161a:	64 e6       	ldi	r22, 0x64	; 100
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    1622:	7b bd       	out	0x2b, r23	; 43
    1624:	6a bd       	out	0x2a, r22	; 42

	TCCR1B |= TMR1_CLOCK_SELECT_PWM;
    1626:	8e b5       	in	r24, 0x2e	; 46
    1628:	81 60       	ori	r24, 0x01	; 1
    162a:	8e bd       	out	0x2e, r24	; 46
}
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <TMR1_Change_Fast_PWM_DutyCycle_Period>:

void TMR1_Change_Fast_PWM_DutyCycle_Period(u16 Period_ms, u16 dutyCyclePercentage){
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	20 e4       	ldi	r18, 0x40	; 64
    1642:	3f e1       	ldi	r19, 0x1F	; 31
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    164c:	77 bd       	out	0x27, r23	; 39
    164e:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 									//Set the OCR1A register value to be compared with TCNT.
    1650:	86 b5       	in	r24, 0x26	; 38
    1652:	97 b5       	in	r25, 0x27	; 39
    1654:	9c 01       	movw	r18, r24
    1656:	02 9f       	mul	r16, r18
    1658:	c0 01       	movw	r24, r0
    165a:	03 9f       	mul	r16, r19
    165c:	90 0d       	add	r25, r0
    165e:	12 9f       	mul	r17, r18
    1660:	90 0d       	add	r25, r0
    1662:	11 24       	eor	r1, r1
    1664:	64 e6       	ldi	r22, 0x64	; 100
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    166c:	7b bd       	out	0x2b, r23	; 43
    166e:	6a bd       	out	0x2a, r22	; 42
	TCNT1 = 0;
    1670:	1d bc       	out	0x2d, r1	; 45
    1672:	1c bc       	out	0x2c, r1	; 44
}
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	08 95       	ret

0000167a <TMR1_Change_Fast_PWM_DutyCycle>:

void TMR1_Change_Fast_PWM_DutyCycle(u16 dutyCyclePercentage){
	OCR1A = (dutyCyclePercentage*ICR1)/100;
    167a:	26 b5       	in	r18, 0x26	; 38
    167c:	37 b5       	in	r19, 0x27	; 39
    167e:	ac 01       	movw	r20, r24
    1680:	42 9f       	mul	r20, r18
    1682:	c0 01       	movw	r24, r0
    1684:	43 9f       	mul	r20, r19
    1686:	90 0d       	add	r25, r0
    1688:	52 9f       	mul	r21, r18
    168a:	90 0d       	add	r25, r0
    168c:	11 24       	eor	r1, r1
    168e:	64 e6       	ldi	r22, 0x64	; 100
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodhi4>
    1696:	7b bd       	out	0x2b, r23	; 43
    1698:	6a bd       	out	0x2a, r22	; 42
}
    169a:	08 95       	ret

0000169c <TMR1_Change_Fast_PWM_Period>:

void TMR1_Change_Fast_PWM_Period(u16 Period_ms){
	ICR1 = (((u32)((Period_ms)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the new TOP value (period) of the timer.
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	20 e4       	ldi	r18, 0x40	; 64
    16a6:	3f e1       	ldi	r19, 0x1F	; 31
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    16b0:	77 bd       	out	0x27, r23	; 39
    16b2:	66 bd       	out	0x26, r22	; 38
	TCNT1 = ZERO;
    16b4:	1d bc       	out	0x2d, r1	; 45
    16b6:	1c bc       	out	0x2c, r1	; 44
}
    16b8:	08 95       	ret

000016ba <TMR1_Init_ICU>:

volatile u8 ICUFlag;

void TMR1_Init_ICU(void){
	TCCR1A = ZERO;
    16ba:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    16bc:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    16be:	1d bc       	out	0x2d, r1	; 45
    16c0:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    16c2:	1b bc       	out	0x2b, r1	; 43
    16c4:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    16c6:	19 bc       	out	0x29, r1	; 41
    16c8:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    16ca:	17 bc       	out	0x27, r1	; 39
    16cc:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    16ce:	89 b7       	in	r24, 0x39	; 57
    16d0:	83 7c       	andi	r24, 0xC3	; 195
    16d2:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    16d4:	88 b7       	in	r24, 0x38	; 56
    16d6:	83 7c       	andi	r24, 0xC3	; 195
    16d8:	88 bf       	out	0x38, r24	; 56

	DDRD &= ~(1<<6);
    16da:	8e 98       	cbi	0x11, 6	; 17
	TCCR1B |= TMR1_WGM_CTC_TCCR1B | (1<<ICES1);									//Setting the timer to CTC mode (any dummy mode other than WGM = 8/10/12/14).
    16dc:	8e b5       	in	r24, 0x2e	; 46
    16de:	88 64       	ori	r24, 0x48	; 72
    16e0:	8e bd       	out	0x2e, r24	; 46
																				//The options are set in TMR1_config.h file.
	TIMSK |= TMR1_INTERRUPT_ICU;												//Interrupt on Input capture register (ICR) when an event is captured on Input capture pin (ICP1).
    16e2:	89 b7       	in	r24, 0x39	; 57
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
    16e8:	8f b7       	in	r24, 0x3f	; 63
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	8f bf       	out	0x3f, r24	; 63
	ICUFlag=0;
    16ee:	10 92 cf 02 	sts	0x02CF, r1
}
    16f2:	08 95       	ret

000016f4 <TMR1_Start_ICU>:

void TMR1_Start_ICU(void){
	OCR1A |= 0xFFFF;															//CTC mode with maximum value for OCR1A.
    16f4:	8a b5       	in	r24, 0x2a	; 42
    16f6:	9b b5       	in	r25, 0x2b	; 43
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	9f ef       	ldi	r25, 0xFF	; 255
    16fc:	9b bd       	out	0x2b, r25	; 43
    16fe:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= TMR1_CLOCK_SELECT_ICU;											//Setting clock to start timer counting.
    1700:	8e b5       	in	r24, 0x2e	; 46
    1702:	85 60       	ori	r24, 0x05	; 5
    1704:	8e bd       	out	0x2e, r24	; 46
}
    1706:	08 95       	ret

00001708 <TMR1_Callback_CTC>:

ptr_2func TMR1_CallBacked_CTC = NULL;
ptr_2func TMR1_CallBacked_ICU = NULL;

void TMR1_Callback_CTC(ptr_2func ISR_Func){										//Callback function to be done when the counter reaches the required time (Time_ms).
	TMR1_CallBacked_CTC = ISR_Func;
    1708:	90 93 b1 01 	sts	0x01B1, r25
    170c:	80 93 b0 01 	sts	0x01B0, r24
}
    1710:	08 95       	ret

00001712 <TMR1_Callback_ICU>:

void TMR1_Callback_ICU(ptr_2func ISR_Func){										//Callback function to be done when the counter reaches the required time (Time_ms).
	TMR1_CallBacked_ICU = ISR_Func;
    1712:	90 93 b3 01 	sts	0x01B3, r25
    1716:	80 93 b2 01 	sts	0x01B2, r24
}
    171a:	08 95       	ret

0000171c <__vector_7>:

void __vector_7 (void){
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
	if(TMR1_CallBacked_CTC != NULL){
    173e:	e0 91 b0 01 	lds	r30, 0x01B0
    1742:	f0 91 b1 01 	lds	r31, 0x01B1
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <__vector_7+0x30>
		TMR1_CallBacked_CTC();													//Do the callback function when the required time is reached.
    174a:	09 95       	icall
	}
}
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_6>:

void __vector_6 (void){
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
	if(ICUFlag==0){
    1798:	80 91 cf 02 	lds	r24, 0x02CF
    179c:	88 23       	and	r24, r24
    179e:	11 f4       	brne	.+4      	; 0x17a4 <__vector_6+0x36>
		ICUFlag=1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	0b c0       	rjmp	.+22     	; 0x17ba <__vector_6+0x4c>
		TCCR1B ^= (1<<ICES1);
		TCNT1=0;
	}
	else if(ICUFlag==1){
    17a4:	80 91 cf 02 	lds	r24, 0x02CF
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	81 f4       	brne	.+32     	; 0x17cc <__vector_6+0x5e>
		tOn=ICR1;
    17ac:	86 b5       	in	r24, 0x26	; 38
    17ae:	97 b5       	in	r25, 0x27	; 39
    17b0:	90 93 c7 02 	sts	0x02C7, r25
    17b4:	80 93 c6 02 	sts	0x02C6, r24
		ICUFlag=2;
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	80 93 cf 02 	sts	0x02CF, r24
		TCCR1B ^= (1<<ICES1);
    17be:	8e b5       	in	r24, 0x2e	; 46
    17c0:	90 e4       	ldi	r25, 0x40	; 64
    17c2:	89 27       	eor	r24, r25
    17c4:	8e bd       	out	0x2e, r24	; 46
		TCNT1=0;
    17c6:	1d bc       	out	0x2d, r1	; 45
    17c8:	1c bc       	out	0x2c, r1	; 44
    17ca:	63 c0       	rjmp	.+198    	; 0x1892 <__vector_6+0x124>
	}
	else if(ICUFlag==2){
    17cc:	80 91 cf 02 	lds	r24, 0x02CF
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <__vector_6+0x68>
    17d4:	5e c0       	rjmp	.+188    	; 0x1892 <__vector_6+0x124>
		tOff=ICR1;
    17d6:	86 b5       	in	r24, 0x26	; 38
    17d8:	97 b5       	in	r25, 0x27	; 39
    17da:	90 93 c9 02 	sts	0x02C9, r25
    17de:	80 93 c8 02 	sts	0x02C8, r24
		TCNT1=0;
    17e2:	1d bc       	out	0x2d, r1	; 45
    17e4:	1c bc       	out	0x2c, r1	; 44
		SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);									//Global interrupt flag enabled.
    17e6:	8f b7       	in	r24, 0x3f	; 63
    17e8:	80 68       	ori	r24, 0x80	; 128
    17ea:	8f bf       	out	0x3f, r24	; 63
		ICUFlag=0;
    17ec:	10 92 cf 02 	sts	0x02CF, r1
		TCCR1B |= (1<<ICES1);
    17f0:	8e b5       	in	r24, 0x2e	; 46
    17f2:	80 64       	ori	r24, 0x40	; 64
    17f4:	8e bd       	out	0x2e, r24	; 46
																				//tOn and tOff are the number of counts of TCNT1 register when when an event occurs on the icp1 pin.
		period = (u32)tOn+(u32)tOff;											//The period is the summation of number of counts, if we want to get the real period time, we multiply the summation of number of counts by tick time.
    17f6:	80 91 c6 02 	lds	r24, 0x02C6
    17fa:	90 91 c7 02 	lds	r25, 0x02C7
    17fe:	e0 90 c8 02 	lds	r14, 0x02C8
    1802:	f0 90 c9 02 	lds	r15, 0x02C9
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e8 0e       	add	r14, r24
    1810:	f9 1e       	adc	r15, r25
    1812:	0a 1f       	adc	r16, r26
    1814:	1b 1f       	adc	r17, r27
    1816:	e0 92 cb 02 	sts	0x02CB, r14
    181a:	f0 92 cc 02 	sts	0x02CC, r15
    181e:	00 93 cd 02 	sts	0x02CD, r16
    1822:	10 93 ce 02 	sts	0x02CE, r17
		freq = F_CPU/((u32)((period)*TMR1_PRESCALER_ICU));								//The most minimum prescaler this mode can have is 8.
    1826:	a8 01       	movw	r20, r16
    1828:	97 01       	movw	r18, r14
    182a:	8a e0       	ldi	r24, 0x0A	; 10
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	44 1f       	adc	r20, r20
    1832:	55 1f       	adc	r21, r21
    1834:	8a 95       	dec	r24
    1836:	d1 f7       	brne	.-12     	; 0x182c <__vector_6+0xbe>
    1838:	60 e4       	ldi	r22, 0x40	; 64
    183a:	72 e4       	ldi	r23, 0x42	; 66
    183c:	8f e0       	ldi	r24, 0x0F	; 15
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    1844:	20 93 c2 02 	sts	0x02C2, r18
    1848:	30 93 c3 02 	sts	0x02C3, r19
    184c:	40 93 c4 02 	sts	0x02C4, r20
    1850:	50 93 c5 02 	sts	0x02C5, r21
		dutyCycle = (u32)tOn*100/period;
    1854:	60 91 c6 02 	lds	r22, 0x02C6
    1858:	70 91 c7 02 	lds	r23, 0x02C7
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	24 e6       	ldi	r18, 0x64	; 100
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    186c:	a8 01       	movw	r20, r16
    186e:	97 01       	movw	r18, r14
    1870:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    1874:	20 93 be 02 	sts	0x02BE, r18
    1878:	30 93 bf 02 	sts	0x02BF, r19
    187c:	40 93 c0 02 	sts	0x02C0, r20
    1880:	50 93 c1 02 	sts	0x02C1, r21

		if(TMR1_CallBacked_ICU != NULL){
    1884:	e0 91 b2 01 	lds	r30, 0x01B2
    1888:	f0 91 b3 01 	lds	r31, 0x01B3
    188c:	30 97       	sbiw	r30, 0x00	; 0
    188e:	09 f0       	breq	.+2      	; 0x1892 <__vector_6+0x124>
			TMR1_CallBacked_ICU();												//Do the callback function when the tOn then the tOff are both calculated.
    1890:	09 95       	icall
		}
	}
}
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	7f 91       	pop	r23
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti

000018bc <TMR0_Init_Normal>:
#include "TMR0_register.h"
#include "TMR0_config.h"

void TMR0_Init_Normal(void){

	TCCR0=ZERO;
    18bc:	13 be       	out	0x33, r1	; 51
	TCNT0=ZERO;
    18be:	12 be       	out	0x32, r1	; 50
	OCR0=ZERO;
    18c0:	1c be       	out	0x3c, r1	; 60
	TIMSK&=~((1<<0)|(1<<1));
    18c2:	89 b7       	in	r24, 0x39	; 57
    18c4:	8c 7f       	andi	r24, 0xFC	; 252
    18c6:	89 bf       	out	0x39, r24	; 57
	TIFR&=~((1<<0)|(1<<1));
    18c8:	88 b7       	in	r24, 0x38	; 56
    18ca:	8c 7f       	andi	r24, 0xFC	; 252
    18cc:	88 bf       	out	0x38, r24	; 56

	DDRB |= (1<<3);
    18ce:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0 |= TMR0_WGM_NORMAL | TMR0_COM_NORMALMODE;									//The options are set in TMR0_config.h file.
    18d0:	83 b7       	in	r24, 0x33	; 51
    18d2:	80 61       	ori	r24, 0x10	; 16
    18d4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= TMR0_INTERRUPT_NORMALMODE;												//Interrupt on overflow to operate on normal mode.
    18d6:	89 b7       	in	r24, 0x39	; 57
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	89 bf       	out	0x39, r24	; 57
	OCR0 |= 0xFF;																	//Setting the OCR to 255 to have a compare match at overflow.
    18dc:	8c b7       	in	r24, 0x3c	; 60
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	8c bf       	out	0x3c, r24	; 60
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);								  			//Global interrupt flag enabled.
    18e2:	8f b7       	in	r24, 0x3f	; 63
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	8f bf       	out	0x3f, r24	; 63
}
    18e8:	08 95       	ret

000018ea <TMR0_Start_NormalMode>:
u8 Timer_Flag = ZERO;
u16 Time_ms_Clone;
u8 Overflow_Counts_Required = ZERO;
u8 Overflow_Counts = ZERO;

void TMR0_Start_NormalMode(u16 Time_ms){
    18ea:	af 92       	push	r10
    18ec:	bf 92       	push	r11
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	7c 01       	movw	r14, r24

	Time_ms_Clone = Time_ms;														//The required user-defined time (Time_ms) is cloned using Time_ms_Clone to access it outside the function.
    18fc:	90 93 d1 02 	sts	0x02D1, r25
    1900:	80 93 d0 02 	sts	0x02D0, r24

	TCNT0=(u8)((u16)256-(((u32)(Time_ms-((u32)(32768*((u32)Time_ms*1000/32768)))/1000)*256*1000)/32768));			//This equation gives the appropriate starting number for the TCNT0 register for all cases (time is less or more to the overflow time (or zero if the required time is equal to the overflow time or one of its multiples).
    1904:	00 e0       	ldi	r16, 0x00	; 0
    1906:	10 e0       	ldi	r17, 0x00	; 0
    1908:	c8 01       	movw	r24, r16
    190a:	b7 01       	movw	r22, r14
    190c:	28 ee       	ldi	r18, 0xE8	; 232
    190e:	33 e0       	ldi	r19, 0x03	; 3
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    1918:	5b 01       	movw	r10, r22
    191a:	6c 01       	movw	r12, r24
    191c:	ff e0       	ldi	r31, 0x0F	; 15
    191e:	d6 94       	lsr	r13
    1920:	c7 94       	ror	r12
    1922:	b7 94       	ror	r11
    1924:	a7 94       	ror	r10
    1926:	fa 95       	dec	r31
    1928:	d1 f7       	brne	.-12     	; 0x191e <TMR0_Start_NormalMode+0x34>
    192a:	c6 01       	movw	r24, r12
    192c:	b5 01       	movw	r22, r10
    192e:	ef e0       	ldi	r30, 0x0F	; 15
    1930:	66 0f       	add	r22, r22
    1932:	77 1f       	adc	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	ea 95       	dec	r30
    193a:	d1 f7       	brne	.-12     	; 0x1930 <TMR0_Start_NormalMode+0x46>
    193c:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    1940:	e2 1a       	sub	r14, r18
    1942:	f3 0a       	sbc	r15, r19
    1944:	04 0b       	sbc	r16, r20
    1946:	15 0b       	sbc	r17, r21
    1948:	c8 01       	movw	r24, r16
    194a:	b7 01       	movw	r22, r14
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	38 ee       	ldi	r19, 0xE8	; 232
    1950:	43 e0       	ldi	r20, 0x03	; 3
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    1958:	2f e0       	ldi	r18, 0x0F	; 15
    195a:	96 95       	lsr	r25
    195c:	87 95       	ror	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	2a 95       	dec	r18
    1964:	d1 f7       	brne	.-12     	; 0x195a <TMR0_Start_NormalMode+0x70>
    1966:	61 95       	neg	r22
    1968:	62 bf       	out	0x32, r22	; 50
	Overflow_Counts_Required = (u8)(((u32)Time_ms*1000)/32768);						//33 is the overflow time, calculated in the comments below.
    196a:	a0 92 b5 01 	sts	0x01B5, r10

	TCCR0 |= TMR0_CLOCK_SELECT_NORMALMODE;												//Prescaler is set to X .. So Tick Time is: X/8MHz (uc frequency).
    196e:	83 b7       	in	r24, 0x33	; 51
    1970:	85 60       	ori	r24, 0x05	; 5
    1972:	83 bf       	out	0x33, r24	; 51
																					//Tick time is now 1024/8M = 128us.
																					//Overflow time is now 128u x 256 (resolution of timer) = 32.76840ms.
}
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	08 95       	ret

00001986 <TMR0_Stop>:

void TMR0_Stop(void){
	TCCR0 &= ~ TMR0_CLOCK_SELECT_NORMALMODE;											//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    1986:	83 b7       	in	r24, 0x33	; 51
    1988:	8a 7f       	andi	r24, 0xFA	; 250
    198a:	83 bf       	out	0x33, r24	; 51
}
    198c:	08 95       	ret

0000198e <TMR0_Init_Fast_PWM>:

void TMR0_Init_Fast_PWM(void){
	TCCR0=ZERO;
    198e:	13 be       	out	0x33, r1	; 51
	TCNT0=ZERO;
    1990:	12 be       	out	0x32, r1	; 50
	OCR0=ZERO;
    1992:	1c be       	out	0x3c, r1	; 60
	TIMSK&=~((1<<0)|(1<<1));
    1994:	89 b7       	in	r24, 0x39	; 57
    1996:	8c 7f       	andi	r24, 0xFC	; 252
    1998:	89 bf       	out	0x39, r24	; 57
	TIFR&=~((1<<0)|(1<<1));
    199a:	88 b7       	in	r24, 0x38	; 56
    199c:	8c 7f       	andi	r24, 0xFC	; 252
    199e:	88 bf       	out	0x38, r24	; 56

	DDRB |= (1<<3);
    19a0:	bb 9a       	sbi	0x17, 3	; 23
	TCCR0 |= TMR0_WGM_FAST_PWM | TMR0_COM_PWM;										//The options are set in TMR0_config.h file.
    19a2:	83 b7       	in	r24, 0x33	; 51
    19a4:	88 66       	ori	r24, 0x68	; 104
    19a6:	83 bf       	out	0x33, r24	; 51
}
    19a8:	08 95       	ret

000019aa <TMR0_Start_Fast_PWM>:

void TMR0_Start_Fast_PWM(u8 dutyCyclePercentage){
    19aa:	98 2f       	mov	r25, r24
	OCR0 = (dutyCyclePercentage*256)/100; 											//Set the OCR0 register value to be compared with TCNT.
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	64 e6       	ldi	r22, 0x64	; 100
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodhi4>
    19b6:	6c bf       	out	0x3c, r22	; 60

	TCCR0 |= TMR0_CLOCK_SELECT_PWM;
    19b8:	83 b7       	in	r24, 0x33	; 51
    19ba:	83 60       	ori	r24, 0x03	; 3
    19bc:	83 bf       	out	0x33, r24	; 51
}
    19be:	08 95       	ret

000019c0 <TMR0_CallBack>:

ptr_2func TMR0_CallBacked = NULL;

void TMR0_CallBack(ptr_2func ISR_Func){												//Callback function to be done when the counter reaches the required time (Time_ms).
	TMR0_CallBacked = ISR_Func;
    19c0:	90 93 b8 01 	sts	0x01B8, r25
    19c4:	80 93 b7 01 	sts	0x01B7, r24
}
    19c8:	08 95       	ret

000019ca <__vector_11>:

void __vector_11(void){
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31

	Overflow_Counts++;																//This counter counts each overflow.
    19f4:	20 91 b6 01 	lds	r18, 0x01B6
    19f8:	2f 5f       	subi	r18, 0xFF	; 255
    19fa:	20 93 b6 01 	sts	0x01B6, r18
	if (Overflow_Counts == (Overflow_Counts_Required+1)){								//This condition is checking if the overflow counts reached the overflow counts required for the desired time (Time_ms) to be achieved.
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	80 91 b5 01 	lds	r24, 0x01B5
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	81 f5       	brne	.+96     	; 0x1a6e <__vector_11+0xa4>
		TCNT0=(u8)((u16)256-(((u32)(Time_ms_Clone-((u32)(32768*((u32)Time_ms_Clone*1000/32768)))/1000)*256*1000)/32768));			//The equation is called again so that if the required time is reached the timer resets and starts counting the same ammount of time again.
    1a0e:	e0 90 d0 02 	lds	r14, 0x02D0
    1a12:	f0 90 d1 02 	lds	r15, 0x02D1
    1a16:	00 e0       	ldi	r16, 0x00	; 0
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	28 ee       	ldi	r18, 0xE8	; 232
    1a20:	33 e0       	ldi	r19, 0x03	; 3
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    1a2a:	60 70       	andi	r22, 0x00	; 0
    1a2c:	70 78       	andi	r23, 0x80	; 128
    1a2e:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    1a32:	e2 1a       	sub	r14, r18
    1a34:	f3 0a       	sbc	r15, r19
    1a36:	04 0b       	sbc	r16, r20
    1a38:	15 0b       	sbc	r17, r21
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	38 ee       	ldi	r19, 0xE8	; 232
    1a42:	43 e0       	ldi	r20, 0x03	; 3
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    1a4a:	af e0       	ldi	r26, 0x0F	; 15
    1a4c:	96 95       	lsr	r25
    1a4e:	87 95       	ror	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	aa 95       	dec	r26
    1a56:	d1 f7       	brne	.-12     	; 0x1a4c <__vector_11+0x82>
    1a58:	61 95       	neg	r22
    1a5a:	62 bf       	out	0x32, r22	; 50
		Overflow_Counts = 0;														//The target time is reached, so the timer has to restart.
    1a5c:	10 92 b6 01 	sts	0x01B6, r1
		if(TMR0_CallBacked != NULL){
    1a60:	e0 91 b7 01 	lds	r30, 0x01B7
    1a64:	f0 91 b8 01 	lds	r31, 0x01B8
    1a68:	30 97       	sbiw	r30, 0x00	; 0
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <__vector_11+0xa4>
			TMR0_CallBacked();														//Do the callback function when the required time is reached.
    1a6c:	09 95       	icall
		}
	}
}
    1a6e:	ff 91       	pop	r31
    1a70:	ef 91       	pop	r30
    1a72:	bf 91       	pop	r27
    1a74:	af 91       	pop	r26
    1a76:	9f 91       	pop	r25
    1a78:	8f 91       	pop	r24
    1a7a:	7f 91       	pop	r23
    1a7c:	6f 91       	pop	r22
    1a7e:	5f 91       	pop	r21
    1a80:	4f 91       	pop	r20
    1a82:	3f 91       	pop	r19
    1a84:	2f 91       	pop	r18
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <DIO_INIT>:
#include "DIO_register.h"

STD_ERROR DIO_INIT (void) {
	STD_ERROR LOC_ERRORSTATE = OK;

	DDRA = ZERO;
    1a98:	1a ba       	out	0x1a, r1	; 26
	DDRB = ZERO;
    1a9a:	17 ba       	out	0x17, r1	; 23
	DDRC = ZERO;
    1a9c:	14 ba       	out	0x14, r1	; 20
	DDRD = ZERO;
    1a9e:	11 ba       	out	0x11, r1	; 17
	PORTA = ZERO;
    1aa0:	1b ba       	out	0x1b, r1	; 27
	PORTB = ZERO;
    1aa2:	18 ba       	out	0x18, r1	; 24
	PORTC = ZERO;
    1aa4:	15 ba       	out	0x15, r1	; 21
	PORTD = ZERO;
    1aa6:	12 ba       	out	0x12, r1	; 18
	PINA = ZERO;
    1aa8:	19 ba       	out	0x19, r1	; 25
	PINB = ZERO;
    1aaa:	16 ba       	out	0x16, r1	; 22
	PINC = ZERO;
    1aac:	13 ba       	out	0x13, r1	; 19
	PIND = ZERO;
    1aae:	10 ba       	out	0x10, r1	; 16

	return (LOC_ERRORSTATE);
}
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret

00001ab4 <DIO_SetPinDir>:

STD_ERROR DIO_SetPinDir (u8 PORT_, u8 P_, u8 DIO_PIN_DIR_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1ab4:	82 30       	cpi	r24, 0x02	; 2
    1ab6:	61 f1       	breq	.+88     	; 0x1b10 <DIO_SetPinDir+0x5c>
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	20 f4       	brcc	.+8      	; 0x1ac4 <DIO_SetPinDir+0x10>
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <DIO_SetPinDir+0xe>
    1ac0:	81 c0       	rjmp	.+258    	; 0x1bc4 <DIO_SetPinDir+0x110>
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <DIO_SetPinDir+0x1e>
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <DIO_SetPinDir+0x16>
    1ac8:	42 c0       	rjmp	.+132    	; 0x1b4e <DIO_SetPinDir+0x9a>
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <DIO_SetPinDir+0x1c>
    1ace:	7a c0       	rjmp	.+244    	; 0x1bc4 <DIO_SetPinDir+0x110>
    1ad0:	5b c0       	rjmp	.+182    	; 0x1b88 <DIO_SetPinDir+0xd4>
	case PORT_A:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1ad2:	68 30       	cpi	r22, 0x08	; 8
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <DIO_SetPinDir+0x24>
    1ad6:	76 c0       	rjmp	.+236    	; 0x1bc4 <DIO_SetPinDir+0x110>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    1ad8:	41 30       	cpi	r20, 0x01	; 1
    1ada:	59 f4       	brne	.+22     	; 0x1af2 <DIO_SetPinDir+0x3e>
				DDRA |= (1<<P_);
    1adc:	2a b3       	in	r18, 0x1a	; 26
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_SetPinDir+0x34>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	6a 95       	dec	r22
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_SetPinDir+0x30>
    1aec:	28 2b       	or	r18, r24
    1aee:	2a bb       	out	0x1a, r18	; 26
    1af0:	67 c0       	rjmp	.+206    	; 0x1bc0 <DIO_SetPinDir+0x10c>
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    1af2:	44 23       	and	r20, r20
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <DIO_SetPinDir+0x44>
    1af6:	66 c0       	rjmp	.+204    	; 0x1bc4 <DIO_SetPinDir+0x110>
				DDRA &= ~(1<<P_);
    1af8:	2a b3       	in	r18, 0x1a	; 26
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_SetPinDir+0x50>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	6a 95       	dec	r22
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_SetPinDir+0x4c>
    1b08:	80 95       	com	r24
    1b0a:	82 23       	and	r24, r18
    1b0c:	8a bb       	out	0x1a, r24	; 26
    1b0e:	58 c0       	rjmp	.+176    	; 0x1bc0 <DIO_SetPinDir+0x10c>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;

	case PORT_B:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b10:	68 30       	cpi	r22, 0x08	; 8
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <DIO_SetPinDir+0x62>
    1b14:	57 c0       	rjmp	.+174    	; 0x1bc4 <DIO_SetPinDir+0x110>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    1b16:	41 30       	cpi	r20, 0x01	; 1
    1b18:	59 f4       	brne	.+22     	; 0x1b30 <DIO_SetPinDir+0x7c>
				DDRB |= (1<<P_);
    1b1a:	27 b3       	in	r18, 0x17	; 23
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_SetPinDir+0x72>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	6a 95       	dec	r22
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_SetPinDir+0x6e>
    1b2a:	28 2b       	or	r18, r24
    1b2c:	27 bb       	out	0x17, r18	; 23
    1b2e:	48 c0       	rjmp	.+144    	; 0x1bc0 <DIO_SetPinDir+0x10c>
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    1b30:	44 23       	and	r20, r20
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <DIO_SetPinDir+0x82>
    1b34:	47 c0       	rjmp	.+142    	; 0x1bc4 <DIO_SetPinDir+0x110>
				DDRB &= ~(1<<P_);
    1b36:	27 b3       	in	r18, 0x17	; 23
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_SetPinDir+0x8e>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	6a 95       	dec	r22
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_SetPinDir+0x8a>
    1b46:	80 95       	com	r24
    1b48:	82 23       	and	r24, r18
    1b4a:	87 bb       	out	0x17, r24	; 23
    1b4c:	39 c0       	rjmp	.+114    	; 0x1bc0 <DIO_SetPinDir+0x10c>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;

	case PORT_C:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b4e:	68 30       	cpi	r22, 0x08	; 8
    1b50:	c8 f5       	brcc	.+114    	; 0x1bc4 <DIO_SetPinDir+0x110>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    1b52:	41 30       	cpi	r20, 0x01	; 1
    1b54:	59 f4       	brne	.+22     	; 0x1b6c <DIO_SetPinDir+0xb8>
				DDRC |= (1<<P_);
    1b56:	24 b3       	in	r18, 0x14	; 20
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_SetPinDir+0xae>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	6a 95       	dec	r22
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_SetPinDir+0xaa>
    1b66:	28 2b       	or	r18, r24
    1b68:	24 bb       	out	0x14, r18	; 20
    1b6a:	2a c0       	rjmp	.+84     	; 0x1bc0 <DIO_SetPinDir+0x10c>
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    1b6c:	44 23       	and	r20, r20
    1b6e:	51 f5       	brne	.+84     	; 0x1bc4 <DIO_SetPinDir+0x110>
				DDRC &= ~(1<<P_);
    1b70:	24 b3       	in	r18, 0x14	; 20
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_SetPinDir+0xc8>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	6a 95       	dec	r22
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <DIO_SetPinDir+0xc4>
    1b80:	80 95       	com	r24
    1b82:	82 23       	and	r24, r18
    1b84:	84 bb       	out	0x14, r24	; 20
    1b86:	1c c0       	rjmp	.+56     	; 0x1bc0 <DIO_SetPinDir+0x10c>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;

	case PORT_D:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b88:	68 30       	cpi	r22, 0x08	; 8
    1b8a:	e0 f4       	brcc	.+56     	; 0x1bc4 <DIO_SetPinDir+0x110>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    1b8c:	41 30       	cpi	r20, 0x01	; 1
    1b8e:	59 f4       	brne	.+22     	; 0x1ba6 <DIO_SetPinDir+0xf2>
				DDRD |= (1<<P_);
    1b90:	21 b3       	in	r18, 0x11	; 17
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_SetPinDir+0xe8>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	6a 95       	dec	r22
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_SetPinDir+0xe4>
    1ba0:	28 2b       	or	r18, r24
    1ba2:	21 bb       	out	0x11, r18	; 17
    1ba4:	0d c0       	rjmp	.+26     	; 0x1bc0 <DIO_SetPinDir+0x10c>
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    1ba6:	44 23       	and	r20, r20
    1ba8:	69 f4       	brne	.+26     	; 0x1bc4 <DIO_SetPinDir+0x110>
				DDRD &= ~(1<<P_);
    1baa:	21 b3       	in	r18, 0x11	; 17
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_SetPinDir+0x102>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	6a 95       	dec	r22
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_SetPinDir+0xfe>
    1bba:	80 95       	com	r24
    1bbc:	82 23       	and	r24, r18
    1bbe:	81 bb       	out	0x11, r24	; 17
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	08 95       	ret
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
		LOC_ERRORSTATE = NOT_OK;
		break;
	}

	return (LOC_ERRORSTATE);
}
    1bc6:	08 95       	ret

00001bc8 <DIO_SetPortDir>:

STD_ERROR DIO_SetPortDir(u8 PORT_, u8 DIO_PORT_DIR_) {

	STD_ERROR LOC_ERROR = OK;

	switch (PORT_) {
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	21 f1       	breq	.+72     	; 0x1c14 <DIO_SetPortDir+0x4c>
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	20 f4       	brcc	.+8      	; 0x1bd8 <DIO_SetPortDir+0x10>
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <DIO_SetPortDir+0xe>
    1bd4:	65 c0       	rjmp	.+202    	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <DIO_SetPortDir+0x1c>
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	99 f1       	breq	.+102    	; 0x1c42 <DIO_SetPortDir+0x7a>
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <DIO_SetPortDir+0x1a>
    1be0:	5f c0       	rjmp	.+190    	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1be2:	46 c0       	rjmp	.+140    	; 0x1c70 <DIO_SetPortDir+0xa8>
	case PORT_A:

		switch (DIO_PORT_DIR_) {
    1be4:	6f 30       	cpi	r22, 0x0F	; 15
    1be6:	79 f0       	breq	.+30     	; 0x1c06 <DIO_SetPortDir+0x3e>
    1be8:	60 31       	cpi	r22, 0x10	; 16
    1bea:	18 f4       	brcc	.+6      	; 0x1bf2 <DIO_SetPortDir+0x2a>
    1bec:	66 23       	and	r22, r22
    1bee:	39 f0       	breq	.+14     	; 0x1bfe <DIO_SetPortDir+0x36>
    1bf0:	57 c0       	rjmp	.+174    	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1bf2:	60 3f       	cpi	r22, 0xF0	; 240
    1bf4:	59 f0       	breq	.+22     	; 0x1c0c <DIO_SetPortDir+0x44>
    1bf6:	6f 3f       	cpi	r22, 0xFF	; 255
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <DIO_SetPortDir+0x34>
    1bfa:	52 c0       	rjmp	.+164    	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <DIO_SetPortDir+0x3a>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRA = DIO_PORT_DIR_FULL_INPUT;
    1bfe:	1a ba       	out	0x1a, r1	; 26
    1c00:	4d c0       	rjmp	.+154    	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRA = DIO_PORT_DIR_FULL_OUTPUT;
    1c02:	6a bb       	out	0x1a, r22	; 26
    1c04:	4b c0       	rjmp	.+150    	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRA |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    1c06:	8a b3       	in	r24, 0x1a	; 26
    1c08:	8f 60       	ori	r24, 0x0F	; 15
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_SetPortDir+0x48>
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRA |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    1c0c:	8a b3       	in	r24, 0x1a	; 26
    1c0e:	80 6f       	ori	r24, 0xF0	; 240
    1c10:	8a bb       	out	0x1a, r24	; 26
    1c12:	44 c0       	rjmp	.+136    	; 0x1c9c <DIO_SetPortDir+0xd4>
		}
			break;

	case PORT_B:

		switch (DIO_PORT_DIR_) {
    1c14:	6f 30       	cpi	r22, 0x0F	; 15
    1c16:	71 f0       	breq	.+28     	; 0x1c34 <DIO_SetPortDir+0x6c>
    1c18:	60 31       	cpi	r22, 0x10	; 16
    1c1a:	18 f4       	brcc	.+6      	; 0x1c22 <DIO_SetPortDir+0x5a>
    1c1c:	66 23       	and	r22, r22
    1c1e:	31 f0       	breq	.+12     	; 0x1c2c <DIO_SetPortDir+0x64>
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1c22:	60 3f       	cpi	r22, 0xF0	; 240
    1c24:	51 f0       	breq	.+20     	; 0x1c3a <DIO_SetPortDir+0x72>
    1c26:	6f 3f       	cpi	r22, 0xFF	; 255
    1c28:	d9 f5       	brne	.+118    	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_SetPortDir+0x68>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRB = DIO_PORT_DIR_FULL_INPUT;
    1c2c:	17 ba       	out	0x17, r1	; 23
    1c2e:	36 c0       	rjmp	.+108    	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRB = DIO_PORT_DIR_FULL_OUTPUT;
    1c30:	67 bb       	out	0x17, r22	; 23
    1c32:	34 c0       	rjmp	.+104    	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRB |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    1c34:	87 b3       	in	r24, 0x17	; 23
    1c36:	8f 60       	ori	r24, 0x0F	; 15
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_SetPortDir+0x76>
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRB |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    1c3a:	87 b3       	in	r24, 0x17	; 23
    1c3c:	80 6f       	ori	r24, 0xF0	; 240
    1c3e:	87 bb       	out	0x17, r24	; 23
    1c40:	2d c0       	rjmp	.+90     	; 0x1c9c <DIO_SetPortDir+0xd4>
		}
			break;

	case PORT_C:

		switch (DIO_PORT_DIR_) {
    1c42:	6f 30       	cpi	r22, 0x0F	; 15
    1c44:	71 f0       	breq	.+28     	; 0x1c62 <DIO_SetPortDir+0x9a>
    1c46:	60 31       	cpi	r22, 0x10	; 16
    1c48:	18 f4       	brcc	.+6      	; 0x1c50 <DIO_SetPortDir+0x88>
    1c4a:	66 23       	and	r22, r22
    1c4c:	31 f0       	breq	.+12     	; 0x1c5a <DIO_SetPortDir+0x92>
    1c4e:	28 c0       	rjmp	.+80     	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1c50:	60 3f       	cpi	r22, 0xF0	; 240
    1c52:	51 f0       	breq	.+20     	; 0x1c68 <DIO_SetPortDir+0xa0>
    1c54:	6f 3f       	cpi	r22, 0xFF	; 255
    1c56:	21 f5       	brne	.+72     	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_SetPortDir+0x96>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRC = DIO_PORT_DIR_FULL_INPUT;
    1c5a:	14 ba       	out	0x14, r1	; 20
    1c5c:	1f c0       	rjmp	.+62     	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRC = DIO_PORT_DIR_FULL_OUTPUT;
    1c5e:	64 bb       	out	0x14, r22	; 20
    1c60:	1d c0       	rjmp	.+58     	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRC |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    1c62:	84 b3       	in	r24, 0x14	; 20
    1c64:	8f 60       	ori	r24, 0x0F	; 15
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_SetPortDir+0xa4>
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRC |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    1c68:	84 b3       	in	r24, 0x14	; 20
    1c6a:	80 6f       	ori	r24, 0xF0	; 240
    1c6c:	84 bb       	out	0x14, r24	; 20
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <DIO_SetPortDir+0xd4>
		}
			break;

	case PORT_D:

		switch (DIO_PORT_DIR_) {
    1c70:	6f 30       	cpi	r22, 0x0F	; 15
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <DIO_SetPortDir+0xc8>
    1c74:	60 31       	cpi	r22, 0x10	; 16
    1c76:	18 f4       	brcc	.+6      	; 0x1c7e <DIO_SetPortDir+0xb6>
    1c78:	66 23       	and	r22, r22
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <DIO_SetPortDir+0xc0>
    1c7c:	11 c0       	rjmp	.+34     	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1c7e:	60 3f       	cpi	r22, 0xF0	; 240
    1c80:	51 f0       	breq	.+20     	; 0x1c96 <DIO_SetPortDir+0xce>
    1c82:	6f 3f       	cpi	r22, 0xFF	; 255
    1c84:	69 f4       	brne	.+26     	; 0x1ca0 <DIO_SetPortDir+0xd8>
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_SetPortDir+0xc4>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRD = DIO_PORT_DIR_FULL_INPUT;
    1c88:	11 ba       	out	0x11, r1	; 17
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRD = DIO_PORT_DIR_FULL_OUTPUT;
    1c8c:	61 bb       	out	0x11, r22	; 17
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <DIO_SetPortDir+0xd4>
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    1c90:	81 b3       	in	r24, 0x11	; 17
    1c92:	8f 60       	ori	r24, 0x0F	; 15
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_SetPortDir+0xd2>
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    1c96:	81 b3       	in	r24, 0x11	; 17
    1c98:	80 6f       	ori	r24, 0xF0	; 240
    1c9a:	81 bb       	out	0x11, r24	; 17
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	08 95       	ret
			break;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
		default:
			LOC_ERROR = NOT_OK;
			break;
	}
	return (LOC_ERROR);
}
    1ca2:	08 95       	ret

00001ca4 <DIO_SetPinValue>:

STD_ERROR DIO_SetPinValue(u8 PORT_, u8 P_, u8 DIO_PIN_VALUE_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	61 f1       	breq	.+88     	; 0x1d00 <DIO_SetPinValue+0x5c>
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	20 f4       	brcc	.+8      	; 0x1cb4 <DIO_SetPinValue+0x10>
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <DIO_SetPinValue+0xe>
    1cb0:	81 c0       	rjmp	.+258    	; 0x1db4 <DIO_SetPinValue+0x110>
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <DIO_SetPinValue+0x1e>
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <DIO_SetPinValue+0x16>
    1cb8:	42 c0       	rjmp	.+132    	; 0x1d3e <DIO_SetPinValue+0x9a>
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <DIO_SetPinValue+0x1c>
    1cbe:	7a c0       	rjmp	.+244    	; 0x1db4 <DIO_SetPinValue+0x110>
    1cc0:	5b c0       	rjmp	.+182    	; 0x1d78 <DIO_SetPinValue+0xd4>
		case PORT_A:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1cc2:	68 30       	cpi	r22, 0x08	; 8
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <DIO_SetPinValue+0x24>
    1cc6:	76 c0       	rjmp	.+236    	; 0x1db4 <DIO_SetPinValue+0x110>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    1cc8:	41 30       	cpi	r20, 0x01	; 1
    1cca:	59 f4       	brne	.+22     	; 0x1ce2 <DIO_SetPinValue+0x3e>
					PORTA |= (1<<P_);
    1ccc:	2b b3       	in	r18, 0x1b	; 27
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_SetPinValue+0x34>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	6a 95       	dec	r22
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_SetPinValue+0x30>
    1cdc:	28 2b       	or	r18, r24
    1cde:	2b bb       	out	0x1b, r18	; 27
    1ce0:	67 c0       	rjmp	.+206    	; 0x1db0 <DIO_SetPinValue+0x10c>
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    1ce2:	44 23       	and	r20, r20
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <DIO_SetPinValue+0x44>
    1ce6:	66 c0       	rjmp	.+204    	; 0x1db4 <DIO_SetPinValue+0x110>
					PORTA &= ~(1<<P_);
    1ce8:	2b b3       	in	r18, 0x1b	; 27
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_SetPinValue+0x50>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	6a 95       	dec	r22
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <DIO_SetPinValue+0x4c>
    1cf8:	80 95       	com	r24
    1cfa:	82 23       	and	r24, r18
    1cfc:	8b bb       	out	0x1b, r24	; 27
    1cfe:	58 c0       	rjmp	.+176    	; 0x1db0 <DIO_SetPinValue+0x10c>
				LOC_ERRORSTATE = NOT_OK;
			}
			break;

		case PORT_B:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1d00:	68 30       	cpi	r22, 0x08	; 8
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <DIO_SetPinValue+0x62>
    1d04:	57 c0       	rjmp	.+174    	; 0x1db4 <DIO_SetPinValue+0x110>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    1d06:	41 30       	cpi	r20, 0x01	; 1
    1d08:	59 f4       	brne	.+22     	; 0x1d20 <DIO_SetPinValue+0x7c>
					PORTB |= (1<<P_);
    1d0a:	28 b3       	in	r18, 0x18	; 24
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <DIO_SetPinValue+0x72>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	6a 95       	dec	r22
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <DIO_SetPinValue+0x6e>
    1d1a:	28 2b       	or	r18, r24
    1d1c:	28 bb       	out	0x18, r18	; 24
    1d1e:	48 c0       	rjmp	.+144    	; 0x1db0 <DIO_SetPinValue+0x10c>
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    1d20:	44 23       	and	r20, r20
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <DIO_SetPinValue+0x82>
    1d24:	47 c0       	rjmp	.+142    	; 0x1db4 <DIO_SetPinValue+0x110>
					PORTB &= ~(1<<P_);
    1d26:	28 b3       	in	r18, 0x18	; 24
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <DIO_SetPinValue+0x8e>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	6a 95       	dec	r22
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <DIO_SetPinValue+0x8a>
    1d36:	80 95       	com	r24
    1d38:	82 23       	and	r24, r18
    1d3a:	88 bb       	out	0x18, r24	; 24
    1d3c:	39 c0       	rjmp	.+114    	; 0x1db0 <DIO_SetPinValue+0x10c>
				LOC_ERRORSTATE = NOT_OK;
			}
			break;

		case PORT_C:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1d3e:	68 30       	cpi	r22, 0x08	; 8
    1d40:	c8 f5       	brcc	.+114    	; 0x1db4 <DIO_SetPinValue+0x110>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    1d42:	41 30       	cpi	r20, 0x01	; 1
    1d44:	59 f4       	brne	.+22     	; 0x1d5c <DIO_SetPinValue+0xb8>
					PORTC |= (1<<P_);
    1d46:	25 b3       	in	r18, 0x15	; 21
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <DIO_SetPinValue+0xae>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	6a 95       	dec	r22
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <DIO_SetPinValue+0xaa>
    1d56:	28 2b       	or	r18, r24
    1d58:	25 bb       	out	0x15, r18	; 21
    1d5a:	2a c0       	rjmp	.+84     	; 0x1db0 <DIO_SetPinValue+0x10c>
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    1d5c:	44 23       	and	r20, r20
    1d5e:	51 f5       	brne	.+84     	; 0x1db4 <DIO_SetPinValue+0x110>
					PORTC &= ~(1<<P_);
    1d60:	25 b3       	in	r18, 0x15	; 21
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_SetPinValue+0xc8>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	6a 95       	dec	r22
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_SetPinValue+0xc4>
    1d70:	80 95       	com	r24
    1d72:	82 23       	and	r24, r18
    1d74:	85 bb       	out	0x15, r24	; 21
    1d76:	1c c0       	rjmp	.+56     	; 0x1db0 <DIO_SetPinValue+0x10c>
				LOC_ERRORSTATE = NOT_OK;
			}
			break;

		case PORT_D:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1d78:	68 30       	cpi	r22, 0x08	; 8
    1d7a:	e0 f4       	brcc	.+56     	; 0x1db4 <DIO_SetPinValue+0x110>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    1d7c:	41 30       	cpi	r20, 0x01	; 1
    1d7e:	59 f4       	brne	.+22     	; 0x1d96 <DIO_SetPinValue+0xf2>
					PORTD |= (1<<P_);
    1d80:	22 b3       	in	r18, 0x12	; 18
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_SetPinValue+0xe8>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	6a 95       	dec	r22
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_SetPinValue+0xe4>
    1d90:	28 2b       	or	r18, r24
    1d92:	22 bb       	out	0x12, r18	; 18
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <DIO_SetPinValue+0x10c>
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    1d96:	44 23       	and	r20, r20
    1d98:	69 f4       	brne	.+26     	; 0x1db4 <DIO_SetPinValue+0x110>
					PORTD &= ~(1<<P_);
    1d9a:	22 b3       	in	r18, 0x12	; 18
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <DIO_SetPinValue+0x102>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	6a 95       	dec	r22
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <DIO_SetPinValue+0xfe>
    1daa:	80 95       	com	r24
    1dac:	82 23       	and	r24, r18
    1dae:	82 bb       	out	0x12, r24	; 18
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	08 95       	ret
    1db4:	81 e0       	ldi	r24, 0x01	; 1
			LOC_ERRORSTATE = NOT_OK;
			break;
		}

		return (LOC_ERRORSTATE);
}
    1db6:	08 95       	ret

00001db8 <DIO_SetPortValue>:

STD_ERROR DIO_SetPortValue(u8 PORT_, u8 DIO_PORT_VALUE_, u8 FLAG_DefaultOrSetFromUser) {
	STD_ERROR LOC_ERRORSTATE = OK;

	if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_LOW){
    1db8:	44 23       	and	r20, r20
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <DIO_SetPortValue+0x6>
    1dbc:	64 c0       	rjmp	.+200    	; 0x1e86 <DIO_SetPortValue+0xce>
		switch(PORT_) {
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	11 f1       	breq	.+68     	; 0x1e06 <DIO_SetPortValue+0x4e>
    1dc2:	83 30       	cpi	r24, 0x03	; 3
    1dc4:	20 f4       	brcc	.+8      	; 0x1dce <DIO_SetPortValue+0x16>
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <DIO_SetPortValue+0x14>
    1dca:	74 c0       	rjmp	.+232    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <DIO_SetPortValue+0x22>
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	81 f1       	breq	.+96     	; 0x1e32 <DIO_SetPortValue+0x7a>
    1dd2:	84 30       	cpi	r24, 0x04	; 4
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <DIO_SetPortValue+0x20>
    1dd6:	6e c0       	rjmp	.+220    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1dd8:	41 c0       	rjmp	.+130    	; 0x1e5c <DIO_SetPortValue+0xa4>

		case PORT_A:
			switch (DIO_PORT_VALUE_) {
    1dda:	6f 30       	cpi	r22, 0x0F	; 15
    1ddc:	69 f0       	breq	.+26     	; 0x1df8 <DIO_SetPortValue+0x40>
    1dde:	60 31       	cpi	r22, 0x10	; 16
    1de0:	18 f4       	brcc	.+6      	; 0x1de8 <DIO_SetPortValue+0x30>
    1de2:	66 23       	and	r22, r22
    1de4:	39 f0       	breq	.+14     	; 0x1df4 <DIO_SetPortValue+0x3c>
    1de6:	66 c0       	rjmp	.+204    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1de8:	60 3f       	cpi	r22, 0xF0	; 240
    1dea:	49 f0       	breq	.+18     	; 0x1dfe <DIO_SetPortValue+0x46>
    1dec:	6f 3f       	cpi	r22, 0xFF	; 255
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <DIO_SetPortValue+0x3a>
    1df0:	61 c0       	rjmp	.+194    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1df2:	57 c0       	rjmp	.+174    	; 0x1ea2 <DIO_SetPortValue+0xea>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTA = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTA = DIO_PORT_VALUE_FULL_LOW;
    1df4:	1b ba       	out	0x1b, r1	; 27
    1df6:	5c c0       	rjmp	.+184    	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTA |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1df8:	8b b3       	in	r24, 0x1b	; 27
    1dfa:	8f 60       	ori	r24, 0x0F	; 15
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_SetPortValue+0x4a>
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTA |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1dfe:	8b b3       	in	r24, 0x1b	; 27
    1e00:	80 6f       	ori	r24, 0xF0	; 240
    1e02:	8b bb       	out	0x1b, r24	; 27
    1e04:	55 c0       	rjmp	.+170    	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			}
				break;

		case PORT_B:
			switch (DIO_PORT_VALUE_) {
    1e06:	6f 30       	cpi	r22, 0x0F	; 15
    1e08:	69 f0       	breq	.+26     	; 0x1e24 <DIO_SetPortValue+0x6c>
    1e0a:	60 31       	cpi	r22, 0x10	; 16
    1e0c:	18 f4       	brcc	.+6      	; 0x1e14 <DIO_SetPortValue+0x5c>
    1e0e:	66 23       	and	r22, r22
    1e10:	39 f0       	breq	.+14     	; 0x1e20 <DIO_SetPortValue+0x68>
    1e12:	50 c0       	rjmp	.+160    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e14:	60 3f       	cpi	r22, 0xF0	; 240
    1e16:	49 f0       	breq	.+18     	; 0x1e2a <DIO_SetPortValue+0x72>
    1e18:	6f 3f       	cpi	r22, 0xFF	; 255
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <DIO_SetPortValue+0x66>
    1e1c:	4b c0       	rjmp	.+150    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e1e:	43 c0       	rjmp	.+134    	; 0x1ea6 <DIO_SetPortValue+0xee>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTB = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTB = DIO_PORT_VALUE_FULL_LOW;
    1e20:	18 ba       	out	0x18, r1	; 24
    1e22:	46 c0       	rjmp	.+140    	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTB |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1e24:	88 b3       	in	r24, 0x18	; 24
    1e26:	8f 60       	ori	r24, 0x0F	; 15
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_SetPortValue+0x76>
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTB |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1e2a:	88 b3       	in	r24, 0x18	; 24
    1e2c:	80 6f       	ori	r24, 0xF0	; 240
    1e2e:	88 bb       	out	0x18, r24	; 24
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			}
				break;

		case PORT_C:
			switch (DIO_PORT_VALUE_) {
    1e32:	6f 30       	cpi	r22, 0x0F	; 15
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <DIO_SetPortValue+0x96>
    1e36:	60 31       	cpi	r22, 0x10	; 16
    1e38:	18 f4       	brcc	.+6      	; 0x1e40 <DIO_SetPortValue+0x88>
    1e3a:	66 23       	and	r22, r22
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <DIO_SetPortValue+0x92>
    1e3e:	3a c0       	rjmp	.+116    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e40:	60 3f       	cpi	r22, 0xF0	; 240
    1e42:	41 f0       	breq	.+16     	; 0x1e54 <DIO_SetPortValue+0x9c>
    1e44:	6f 3f       	cpi	r22, 0xFF	; 255
    1e46:	b1 f5       	brne	.+108    	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e48:	30 c0       	rjmp	.+96     	; 0x1eaa <DIO_SetPortValue+0xf2>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTC = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTC = DIO_PORT_VALUE_FULL_LOW;
    1e4a:	15 ba       	out	0x15, r1	; 21
    1e4c:	31 c0       	rjmp	.+98     	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTC |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1e4e:	85 b3       	in	r24, 0x15	; 21
    1e50:	8f 60       	ori	r24, 0x0F	; 15
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_SetPortValue+0xa0>
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTC |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1e54:	85 b3       	in	r24, 0x15	; 21
    1e56:	80 6f       	ori	r24, 0xF0	; 240
    1e58:	85 bb       	out	0x15, r24	; 21
    1e5a:	2a c0       	rjmp	.+84     	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			}
				break;

		case PORT_D:
			switch (DIO_PORT_VALUE_) {
    1e5c:	6f 30       	cpi	r22, 0x0F	; 15
    1e5e:	61 f0       	breq	.+24     	; 0x1e78 <DIO_SetPortValue+0xc0>
    1e60:	60 31       	cpi	r22, 0x10	; 16
    1e62:	18 f4       	brcc	.+6      	; 0x1e6a <DIO_SetPortValue+0xb2>
    1e64:	66 23       	and	r22, r22
    1e66:	31 f0       	breq	.+12     	; 0x1e74 <DIO_SetPortValue+0xbc>
    1e68:	25 c0       	rjmp	.+74     	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e6a:	60 3f       	cpi	r22, 0xF0	; 240
    1e6c:	41 f0       	breq	.+16     	; 0x1e7e <DIO_SetPortValue+0xc6>
    1e6e:	6f 3f       	cpi	r22, 0xFF	; 255
    1e70:	09 f5       	brne	.+66     	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e72:	1d c0       	rjmp	.+58     	; 0x1eae <DIO_SetPortValue+0xf6>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTD = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTD = DIO_PORT_VALUE_FULL_LOW;
    1e74:	12 ba       	out	0x12, r1	; 18
    1e76:	1c c0       	rjmp	.+56     	; 0x1eb0 <DIO_SetPortValue+0xf8>
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTD |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1e78:	82 b3       	in	r24, 0x12	; 18
    1e7a:	8f 60       	ori	r24, 0x0F	; 15
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <DIO_SetPortValue+0xca>
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTD |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1e7e:	82 b3       	in	r24, 0x12	; 18
    1e80:	80 6f       	ori	r24, 0xF0	; 240
    1e82:	82 bb       	out	0x12, r24	; 18
    1e84:	15 c0       	rjmp	.+42     	; 0x1eb0 <DIO_SetPortValue+0xf8>
		default:
			LOC_ERRORSTATE = NOT_OK;
			break;
		}
	}
	else if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_HIGH){
    1e86:	41 30       	cpi	r20, 0x01	; 1
    1e88:	a9 f4       	brne	.+42     	; 0x1eb4 <DIO_SetPortValue+0xfc>
		if(DIO_PORT_VALUE_>= 0 && DIO_PORT_VALUE_ <=255) {
			switch(PORT_) {
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <DIO_SetPortValue+0xee>
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	18 f4       	brcc	.+6      	; 0x1e98 <DIO_SetPortValue+0xe0>
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	79 f4       	brne	.+30     	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1e96:	05 c0       	rjmp	.+10     	; 0x1ea2 <DIO_SetPortValue+0xea>
    1e98:	83 30       	cpi	r24, 0x03	; 3
    1e9a:	39 f0       	breq	.+14     	; 0x1eaa <DIO_SetPortValue+0xf2>
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	51 f4       	brne	.+20     	; 0x1eb4 <DIO_SetPortValue+0xfc>
    1ea0:	06 c0       	rjmp	.+12     	; 0x1eae <DIO_SetPortValue+0xf6>

			case PORT_A:
				PORTA = DIO_PORT_VALUE_;
    1ea2:	6b bb       	out	0x1b, r22	; 27
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <DIO_SetPortValue+0xf8>
					break;

			case PORT_B:
				PORTB = DIO_PORT_VALUE_;
    1ea6:	68 bb       	out	0x18, r22	; 24
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <DIO_SetPortValue+0xf8>
					break;

			case PORT_C:
				PORTC = DIO_PORT_VALUE_;
    1eaa:	65 bb       	out	0x15, r22	; 21
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <DIO_SetPortValue+0xf8>
					break;

			case PORT_D:
				PORTD = DIO_PORT_VALUE_;
    1eae:	62 bb       	out	0x12, r22	; 18
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	08 95       	ret
					break;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
	else {
		LOC_ERRORSTATE = NOT_OK;
	}

	return (LOC_ERRORSTATE);
}
    1eb6:	08 95       	ret

00001eb8 <DIO_GetPinValue>:


STD_ERROR DIO_GetPinValue(u8 PORT_, u8 P_, u8 *Pin_Value) {
    1eb8:	fa 01       	movw	r30, r20

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	71 f0       	breq	.+28     	; 0x1eda <DIO_GetPinValue+0x22>
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	18 f4       	brcc	.+6      	; 0x1ec8 <DIO_GetPinValue+0x10>
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	41 f5       	brne	.+80     	; 0x1f16 <DIO_GetPinValue+0x5e>
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <DIO_GetPinValue+0x1a>
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	59 f0       	breq	.+22     	; 0x1ee2 <DIO_GetPinValue+0x2a>
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	19 f5       	brne	.+70     	; 0x1f16 <DIO_GetPinValue+0x5e>
    1ed0:	0c c0       	rjmp	.+24     	; 0x1eea <DIO_GetPinValue+0x32>
	case PORT_A:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1ed2:	68 30       	cpi	r22, 0x08	; 8
    1ed4:	00 f5       	brcc	.+64     	; 0x1f16 <DIO_GetPinValue+0x5e>
			*Pin_Value = (((PINA)&(1<<P_)) >> (P_));
    1ed6:	29 b3       	in	r18, 0x19	; 25
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <DIO_GetPinValue+0x38>
		else {
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_B:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1eda:	68 30       	cpi	r22, 0x08	; 8
    1edc:	e0 f4       	brcc	.+56     	; 0x1f16 <DIO_GetPinValue+0x5e>
			*Pin_Value = (((PINB)&(1<<P_)) >> (P_));
    1ede:	26 b3       	in	r18, 0x16	; 22
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <DIO_GetPinValue+0x38>
		else {
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_C:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1ee2:	68 30       	cpi	r22, 0x08	; 8
    1ee4:	c0 f4       	brcc	.+48     	; 0x1f16 <DIO_GetPinValue+0x5e>
			*Pin_Value = (((PINC)&(1<<P_)) >> (P_));
    1ee6:	23 b3       	in	r18, 0x13	; 19
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <DIO_GetPinValue+0x38>
		else {
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1eea:	68 30       	cpi	r22, 0x08	; 8
    1eec:	a0 f4       	brcc	.+40     	; 0x1f16 <DIO_GetPinValue+0x5e>
			*Pin_Value = (((PIND)&(1<<P_)) >> (P_));
    1eee:	20 b3       	in	r18, 0x10	; 16
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	06 2e       	mov	r0, r22
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_GetPinValue+0x44>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	0a 94       	dec	r0
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_GetPinValue+0x40>
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	82 23       	and	r24, r18
    1f04:	93 23       	and	r25, r19
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_GetPinValue+0x54>
    1f08:	95 95       	asr	r25
    1f0a:	87 95       	ror	r24
    1f0c:	6a 95       	dec	r22
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <DIO_GetPinValue+0x50>
    1f10:	80 83       	st	Z, r24
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	08 95       	ret
    1f16:	81 e0       	ldi	r24, 0x01	; 1
	default:
		LOC_ERRORSTATE = NOT_OK;
		break;
	}
	return (LOC_ERRORSTATE);
}
    1f18:	08 95       	ret

00001f1a <DIO_GetPortValue>:

STD_ERROR DIO_GetPortValue(u8 PORT_, u8 *Pin_Value) {
    1f1a:	fb 01       	movw	r30, r22

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	69 f0       	breq	.+26     	; 0x1f3a <DIO_GetPortValue+0x20>
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	18 f4       	brcc	.+6      	; 0x1f2a <DIO_GetPortValue+0x10>
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	29 f4       	brne	.+10     	; 0x1f32 <DIO_GetPortValue+0x18>
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <DIO_GetPortValue+0x1c>
    1f2a:	83 30       	cpi	r24, 0x03	; 3
    1f2c:	41 f0       	breq	.+16     	; 0x1f3e <DIO_GetPortValue+0x24>
    1f2e:	84 30       	cpi	r24, 0x04	; 4
    1f30:	51 f0       	breq	.+20     	; 0x1f46 <DIO_GetPortValue+0x2c>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	08 95       	ret
	case PORT_A:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PINA;
    1f36:	89 b3       	in	r24, 0x19	; 25
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <DIO_GetPortValue+0x26>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_B:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PINB;
    1f3a:	86 b3       	in	r24, 0x16	; 22
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <DIO_GetPortValue+0x26>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_C:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PINC;
    1f3e:	83 b3       	in	r24, 0x13	; 19
    1f40:	80 83       	st	Z, r24
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PIND;
    1f46:	80 b3       	in	r24, 0x10	; 16
    1f48:	80 83       	st	Z, r24
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
	default:
		LOC_ERRORSTATE = NOT_OK;
		break;
	}
	return (LOC_ERRORSTATE);
}
    1f4c:	08 95       	ret

00001f4e <DIO_GetPortDir>:

STD_ERROR DIO_GetPortDir(u8 PORT_, u8 *Port_Dir){
    1f4e:	fb 01       	movw	r30, r22

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	69 f0       	breq	.+26     	; 0x1f6e <DIO_GetPortDir+0x20>
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	18 f4       	brcc	.+6      	; 0x1f5e <DIO_GetPortDir+0x10>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	29 f4       	brne	.+10     	; 0x1f66 <DIO_GetPortDir+0x18>
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <DIO_GetPortDir+0x1c>
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	41 f0       	breq	.+16     	; 0x1f72 <DIO_GetPortDir+0x24>
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	51 f0       	breq	.+20     	; 0x1f7a <DIO_GetPortDir+0x2c>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	08 95       	ret
	case PORT_A:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRA;
    1f6a:	8a b3       	in	r24, 0x1a	; 26
    1f6c:	03 c0       	rjmp	.+6      	; 0x1f74 <DIO_GetPortDir+0x26>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_B:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRB;
    1f6e:	87 b3       	in	r24, 0x17	; 23
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <DIO_GetPortDir+0x26>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_C:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRC;
    1f72:	84 b3       	in	r24, 0x14	; 20
    1f74:	80 83       	st	Z, r24
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRD;
    1f7a:	81 b3       	in	r24, 0x11	; 17
    1f7c:	80 83       	st	Z, r24
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
	default:
		LOC_ERRORSTATE = NOT_OK;
		break;
	}
	return (LOC_ERRORSTATE);
}
    1f80:	08 95       	ret

00001f82 <ADC_INIT>:
#include "ADC_register.h"
#include "ADC_config.h"

void ADC_INIT(void){

	ADMUX = ZERO;
    1f82:	17 b8       	out	0x07, r1	; 7
	ADCSRA = ZERO;
    1f84:	16 b8       	out	0x06, r1	; 6
	SFIOR = ZERO;
    1f86:	10 be       	out	0x30, r1	; 48

	ADMUX = ADC_Voltage_Reference;
    1f88:	80 e4       	ldi	r24, 0x40	; 64
    1f8a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= ADC_ADLAR;
    1f8c:	3d 9a       	sbi	0x07, 5	; 7

	ADCSRA |= (1<<ADEN);
    1f8e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= ADC_Prescaler;
    1f90:	86 b1       	in	r24, 0x06	; 6
    1f92:	86 60       	ori	r24, 0x06	; 6
    1f94:	86 b9       	out	0x06, r24	; 6
}
    1f96:	08 95       	ret

00001f98 <ADC_Read_Polling_SingleConversion>:

u16 ADC_Read_Polling_SingleConversion(u8 channel){
	ADMUX &= (0xE0);
    1f98:	97 b1       	in	r25, 0x07	; 7
    1f9a:	90 7e       	andi	r25, 0xE0	; 224
    1f9c:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (0x07 & channel);									// setting channel.
    1f9e:	97 b1       	in	r25, 0x07	; 7
    1fa0:	87 70       	andi	r24, 0x07	; 7
    1fa2:	89 2b       	or	r24, r25
    1fa4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);										// start conversion.
    1fa6:	36 9a       	sbi	0x06, 6	; 6

	while((ADCSRA & (1<<ADIF)) == ZERO);
    1fa8:	34 9b       	sbis	0x06, 4	; 6
    1faa:	fe cf       	rjmp	.-4      	; 0x1fa8 <ADC_Read_Polling_SingleConversion+0x10>
	ADCSRA |= (1<<ADIF);										// clear ADC interrupt flag by writing one to it.
    1fac:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
    1fae:	24 b1       	in	r18, 0x04	; 4
    1fb0:	35 b1       	in	r19, 0x05	; 5
}
    1fb2:	c9 01       	movw	r24, r18
    1fb4:	08 95       	ret

00001fb6 <ADC_SC_Polling_AutoTrigger>:

void ADC_SC_Polling_AutoTrigger(u8 channel){
	ADMUX &= (0xE0);
    1fb6:	97 b1       	in	r25, 0x07	; 7
    1fb8:	90 7e       	andi	r25, 0xE0	; 224
    1fba:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (0x07 & channel);									// setting channel.
    1fbc:	97 b1       	in	r25, 0x07	; 7
    1fbe:	87 70       	andi	r24, 0x07	; 7
    1fc0:	89 2b       	or	r24, r25
    1fc2:	87 b9       	out	0x07, r24	; 7
	SFIOR = AUTO_TRIGGER_MODE;									// set the auto trigger mode as ADATE is set to 1.
    1fc4:	10 be       	out	0x30, r1	; 48
	ADCSRA |= (1<<ADSC)|(1<<ADATE);								// start conversion and enable auto trigger.
    1fc6:	86 b1       	in	r24, 0x06	; 6
    1fc8:	80 66       	ori	r24, 0x60	; 96
    1fca:	86 b9       	out	0x06, r24	; 6
}
    1fcc:	08 95       	ret

00001fce <ADC_Read_Polling_AutoTrigger>:

u16 ADC_Read_Polling_AutoTrigger(void){

	while((ADCSRA & (1<<ADIF)) == ZERO);
    1fce:	34 9b       	sbis	0x06, 4	; 6
    1fd0:	fe cf       	rjmp	.-4      	; 0x1fce <ADC_Read_Polling_AutoTrigger>
	ADCSRA |= (1<<ADIF);										// clear ADC interrupt flag by writing one to it.
    1fd2:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
    1fd4:	24 b1       	in	r18, 0x04	; 4
    1fd6:	35 b1       	in	r19, 0x05	; 5
}
    1fd8:	c9 01       	movw	r24, r18
    1fda:	08 95       	ret

00001fdc <ADC_SC_Interrupt_SingleConversion>:

void ADC_SC_Interrupt_SingleConversion(u8 channel){			    // start conversion function.
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);			  			// Global interrupt flag enabled.
    1fdc:	9f b7       	in	r25, 0x3f	; 63
    1fde:	90 68       	ori	r25, 0x80	; 128
    1fe0:	9f bf       	out	0x3f, r25	; 63
	ADMUX &= (0xE0);
    1fe2:	97 b1       	in	r25, 0x07	; 7
    1fe4:	90 7e       	andi	r25, 0xE0	; 224
    1fe6:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (0x07 & channel);
    1fe8:	97 b1       	in	r25, 0x07	; 7
    1fea:	87 70       	andi	r24, 0x07	; 7
    1fec:	89 2b       	or	r24, r25
    1fee:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC)|(1<<ADIE);
    1ff0:	86 b1       	in	r24, 0x06	; 6
    1ff2:	88 64       	ori	r24, 0x48	; 72
    1ff4:	86 b9       	out	0x06, r24	; 6
}
    1ff6:	08 95       	ret

00001ff8 <ADC_Read_Interrupt>:

u16 ADC_Read_Interrupt(void){				 					// Do not call this function except in the attribute ptr2func of the callback function.
	return ADC;
    1ff8:	24 b1       	in	r18, 0x04	; 4
    1ffa:	35 b1       	in	r19, 0x05	; 5
}
    1ffc:	c9 01       	movw	r24, r18
    1ffe:	08 95       	ret

00002000 <ADC_SC_Interrupt_AutoTrigger>:

void ADC_SC_Interrupt_AutoTrigger(u8 channel){					// start converion function.
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);			   			// Global interrupt flag enabled.
    2000:	9f b7       	in	r25, 0x3f	; 63
    2002:	90 68       	ori	r25, 0x80	; 128
    2004:	9f bf       	out	0x3f, r25	; 63
	ADMUX &= (0xE0);
    2006:	97 b1       	in	r25, 0x07	; 7
    2008:	90 7e       	andi	r25, 0xE0	; 224
    200a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (0x07 & channel);
    200c:	97 b1       	in	r25, 0x07	; 7
    200e:	87 70       	andi	r24, 0x07	; 7
    2010:	89 2b       	or	r24, r25
    2012:	87 b9       	out	0x07, r24	; 7
	SFIOR = AUTO_TRIGGER_MODE;									// set the auto trigger mode as ADATE is set to 1.
    2014:	10 be       	out	0x30, r1	; 48
	ADCSRA |= (1<<ADSC)|(1<<ADIE)|(1<<ADATE);
    2016:	86 b1       	in	r24, 0x06	; 6
    2018:	88 66       	ori	r24, 0x68	; 104
    201a:	86 b9       	out	0x06, r24	; 6
}
    201c:	08 95       	ret

0000201e <ADC_CallBack>:


ptr_2func ADC_CallBacked = NULL;

void ADC_CallBack(ptr_2func ISR_Func){
	ADC_CallBacked = ISR_Func;
    201e:	90 93 ba 01 	sts	0x01BA, r25
    2022:	80 93 b9 01 	sts	0x01B9, r24
}
    2026:	08 95       	ret

00002028 <__vector_16>:

void __vector_16 (void) {
    2028:	1f 92       	push	r1
    202a:	0f 92       	push	r0
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	0f 92       	push	r0
    2030:	11 24       	eor	r1, r1
    2032:	2f 93       	push	r18
    2034:	3f 93       	push	r19
    2036:	4f 93       	push	r20
    2038:	5f 93       	push	r21
    203a:	6f 93       	push	r22
    203c:	7f 93       	push	r23
    203e:	8f 93       	push	r24
    2040:	9f 93       	push	r25
    2042:	af 93       	push	r26
    2044:	bf 93       	push	r27
    2046:	ef 93       	push	r30
    2048:	ff 93       	push	r31
	if (ADC_CallBacked != NULL){
    204a:	e0 91 b9 01 	lds	r30, 0x01B9
    204e:	f0 91 ba 01 	lds	r31, 0x01BA
    2052:	30 97       	sbiw	r30, 0x00	; 0
    2054:	09 f0       	breq	.+2      	; 0x2058 <__vector_16+0x30>
		ADC_CallBacked();
    2056:	09 95       	icall
	}
}
    2058:	ff 91       	pop	r31
    205a:	ef 91       	pop	r30
    205c:	bf 91       	pop	r27
    205e:	af 91       	pop	r26
    2060:	9f 91       	pop	r25
    2062:	8f 91       	pop	r24
    2064:	7f 91       	pop	r23
    2066:	6f 91       	pop	r22
    2068:	5f 91       	pop	r21
    206a:	4f 91       	pop	r20
    206c:	3f 91       	pop	r19
    206e:	2f 91       	pop	r18
    2070:	0f 90       	pop	r0
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	0f 90       	pop	r0
    2076:	1f 90       	pop	r1
    2078:	18 95       	reti

0000207a <LCD_WriteChar>:
	DIO_GetPortValue(LCD_DATA_CONNECTED_PORT, address);

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
}

STD_ERROR LCD_WriteChar (u8 const Copy_LCD_WR_CHAR) {
    207a:	1f 93       	push	r17
    207c:	18 2f       	mov	r17, r24

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){
    207e:	87 ff       	sbrs	r24, 7
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <LCD_WriteChar+0xc>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	1f c0       	rjmp	.+62     	; 0x20c4 <LCD_WriteChar+0x4a>

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    2086:	84 e0       	ldi	r24, 0x04	; 4
    2088:	64 e0       	ldi	r22, 0x04	; 4
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    2090:	84 e0       	ldi	r24, 0x04	; 4
    2092:	63 e0       	ldi	r22, 0x03	; 3
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    209a:	84 e0       	ldi	r24, 0x04	; 4
    209c:	62 e0       	ldi	r22, 0x02	; 2
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	61 2f       	mov	r22, r17
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    20ae:	84 e0       	ldi	r24, 0x04	; 4
    20b0:	62 e0       	ldi	r22, 0x02	; 2
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    20b8:	84 e0       	ldi	r24, 0x04	; 4
    20ba:	62 e0       	ldi	r22, 0x02	; 2
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		LOC_ERROR = NOT_OK;
	}
	return LOC_ERROR;
}
    20c4:	1f 91       	pop	r17
    20c6:	08 95       	ret

000020c8 <LCD_WriteNumber_unsigned>:
		LCD_WriteString("ERROR/RESTART");
	}
	return (LOC_ERROR);
}

STD_ERROR LCD_WriteNumber_unsigned(u32 LCD_NUMBER){
    20c8:	5f 92       	push	r5
    20ca:	6f 92       	push	r6
    20cc:	7f 92       	push	r7
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	cf 92       	push	r12
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	5b 01       	movw	r10, r22
    20e4:	6c 01       	movw	r12, r24
	STD_ERROR LOC_ERROR = OK;
	u32 numberHolder=0;
	u8 digitsCounter=0;
	if(LCD_NUMBER==0){
    20e6:	61 15       	cp	r22, r1
    20e8:	71 05       	cpc	r23, r1
    20ea:	81 05       	cpc	r24, r1
    20ec:	91 05       	cpc	r25, r1
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <LCD_WriteNumber_unsigned+0x30>
		LCD_WriteChar('0');
    20f0:	80 e3       	ldi	r24, 0x30	; 48
    20f2:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
    20f6:	46 c0       	rjmp	.+140    	; 0x2184 <LCD_WriteNumber_unsigned+0xbc>
    20f8:	66 24       	eor	r6, r6
    20fa:	77 24       	eor	r7, r7
    20fc:	43 01       	movw	r8, r6
    20fe:	55 24       	eor	r5, r5
	}
	else {
		while(LCD_NUMBER){
			numberHolder*=10;
    2100:	c4 01       	movw	r24, r8
    2102:	b3 01       	movw	r22, r6
    2104:	2a e0       	ldi	r18, 0x0A	; 10
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    2110:	7b 01       	movw	r14, r22
    2112:	8c 01       	movw	r16, r24
			numberHolder+=LCD_NUMBER%10;
    2114:	c6 01       	movw	r24, r12
    2116:	b5 01       	movw	r22, r10
    2118:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    211c:	3b 01       	movw	r6, r22
    211e:	4c 01       	movw	r8, r24
    2120:	6e 0c       	add	r6, r14
    2122:	7f 1c       	adc	r7, r15
    2124:	80 1e       	adc	r8, r16
    2126:	91 1e       	adc	r9, r17
			LCD_NUMBER/=10;
    2128:	c6 01       	movw	r24, r12
    212a:	b5 01       	movw	r22, r10
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    2138:	c9 01       	movw	r24, r18
    213a:	da 01       	movw	r26, r20
    213c:	5c 01       	movw	r10, r24
    213e:	6d 01       	movw	r12, r26
			digitsCounter++;
    2140:	53 94       	inc	r5
	u8 digitsCounter=0;
	if(LCD_NUMBER==0){
		LCD_WriteChar('0');
	}
	else {
		while(LCD_NUMBER){
    2142:	a1 14       	cp	r10, r1
    2144:	b1 04       	cpc	r11, r1
    2146:	c1 04       	cpc	r12, r1
    2148:	d1 04       	cpc	r13, r1
    214a:	d1 f6       	brne	.-76     	; 0x2100 <LCD_WriteNumber_unsigned+0x38>
    214c:	19 c0       	rjmp	.+50     	; 0x2180 <LCD_WriteNumber_unsigned+0xb8>
			numberHolder+=LCD_NUMBER%10;
			LCD_NUMBER/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			LCD_WriteChar((numberHolder%10)+48);
    214e:	c4 01       	movw	r24, r8
    2150:	b3 01       	movw	r22, r6
    2152:	2a e0       	ldi	r18, 0x0A	; 10
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    215e:	86 2f       	mov	r24, r22
    2160:	80 5d       	subi	r24, 0xD0	; 208
    2162:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
			numberHolder/=10;
    2166:	c4 01       	movw	r24, r8
    2168:	b3 01       	movw	r22, r6
    216a:	2a e0       	ldi	r18, 0x0A	; 10
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    2176:	c9 01       	movw	r24, r18
    2178:	da 01       	movw	r26, r20
    217a:	3c 01       	movw	r6, r24
    217c:	4d 01       	movw	r8, r26
			digitsCounter--;
    217e:	5a 94       	dec	r5
			numberHolder*=10;
			numberHolder+=LCD_NUMBER%10;
			LCD_NUMBER/=10;
			digitsCounter++;
		}
		while(digitsCounter){
    2180:	55 20       	and	r5, r5
    2182:	29 f7       	brne	.-54     	; 0x214e <LCD_WriteNumber_unsigned+0x86>
			numberHolder/=10;
			digitsCounter--;
		}
	}
	return (LOC_ERROR);
}
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	9f 90       	pop	r9
    2198:	8f 90       	pop	r8
    219a:	7f 90       	pop	r7
    219c:	6f 90       	pop	r6
    219e:	5f 90       	pop	r5
    21a0:	08 95       	ret

000021a2 <LCD_WriteNumber>:
		}
	}
	return (LOC_ERROR);
}*/

STD_ERROR LCD_WriteNumber(s32 LCD_NUMBER){
    21a2:	2f 92       	push	r2
    21a4:	3f 92       	push	r3
    21a6:	4f 92       	push	r4
    21a8:	5f 92       	push	r5
    21aa:	6f 92       	push	r6
    21ac:	7f 92       	push	r7
    21ae:	8f 92       	push	r8
    21b0:	9f 92       	push	r9
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	5b 01       	movw	r10, r22
    21c4:	6c 01       	movw	r12, r24
	STD_ERROR LOC_ERROR = OK;
	if(LCD_NUMBER<2147483648 && LCD_NUMBER>-2147483649){
		u32 numberHolder=(u32)LCD_NUMBER;
		u32 digitsCounter=0;
		if(LCD_NUMBER==0){
    21c6:	61 15       	cp	r22, r1
    21c8:	71 05       	cpc	r23, r1
    21ca:	81 05       	cpc	r24, r1
    21cc:	91 05       	cpc	r25, r1
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <LCD_WriteNumber+0x36>
			LCD_WriteChar('0');
    21d0:	80 e3       	ldi	r24, 0x30	; 48
    21d2:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
    21d6:	5f c0       	rjmp	.+190    	; 0x2296 <LCD_WriteNumber+0xf4>
		}
		else {
			if(LCD_NUMBER<0){
    21d8:	97 fd       	sbrc	r25, 7
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <LCD_WriteNumber+0x40>
}*/

STD_ERROR LCD_WriteNumber(s32 LCD_NUMBER){
	STD_ERROR LOC_ERROR = OK;
	if(LCD_NUMBER<2147483648 && LCD_NUMBER>-2147483649){
		u32 numberHolder=(u32)LCD_NUMBER;
    21dc:	1b 01       	movw	r2, r22
    21de:	26 01       	movw	r4, r12
    21e0:	0d c0       	rjmp	.+26     	; 0x21fc <LCD_WriteNumber+0x5a>
		if(LCD_NUMBER==0){
			LCD_WriteChar('0');
		}
		else {
			if(LCD_NUMBER<0){
				LCD_NUMBER=0-LCD_NUMBER;
    21e2:	d0 94       	com	r13
    21e4:	c0 94       	com	r12
    21e6:	b0 94       	com	r11
    21e8:	a0 94       	com	r10
    21ea:	a1 1c       	adc	r10, r1
    21ec:	b1 1c       	adc	r11, r1
    21ee:	c1 1c       	adc	r12, r1
    21f0:	d1 1c       	adc	r13, r1
				numberHolder=LCD_NUMBER;
    21f2:	15 01       	movw	r2, r10
    21f4:	26 01       	movw	r4, r12
				LCD_WriteChar('-');
    21f6:	8d e2       	ldi	r24, 0x2D	; 45
    21f8:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
    21fc:	66 24       	eor	r6, r6
    21fe:	77 24       	eor	r7, r7
    2200:	43 01       	movw	r8, r6
			}
			while(LCD_NUMBER){
				LCD_NUMBER/=10;
    2202:	c6 01       	movw	r24, r12
    2204:	b5 01       	movw	r22, r10
    2206:	2a e0       	ldi	r18, 0x0A	; 10
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__divmodsi4>
    2212:	79 01       	movw	r14, r18
    2214:	8a 01       	movw	r16, r20
    2216:	57 01       	movw	r10, r14
    2218:	68 01       	movw	r12, r16
				if(digitsCounter==0){
    221a:	61 14       	cp	r6, r1
    221c:	71 04       	cpc	r7, r1
    221e:	81 04       	cpc	r8, r1
    2220:	91 04       	cpc	r9, r1
    2222:	31 f4       	brne	.+12     	; 0x2230 <LCD_WriteNumber+0x8e>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	68 2e       	mov	r6, r24
    2228:	71 2c       	mov	r7, r1
    222a:	81 2c       	mov	r8, r1
    222c:	91 2c       	mov	r9, r1
    222e:	0a c0       	rjmp	.+20     	; 0x2244 <LCD_WriteNumber+0xa2>
					digitsCounter=1;
				}
				else {
					digitsCounter*=10;
    2230:	c4 01       	movw	r24, r8
    2232:	b3 01       	movw	r22, r6
    2234:	2a e0       	ldi	r18, 0x0A	; 10
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    2240:	3b 01       	movw	r6, r22
    2242:	4c 01       	movw	r8, r24
			if(LCD_NUMBER<0){
				LCD_NUMBER=0-LCD_NUMBER;
				numberHolder=LCD_NUMBER;
				LCD_WriteChar('-');
			}
			while(LCD_NUMBER){
    2244:	e1 14       	cp	r14, r1
    2246:	f1 04       	cpc	r15, r1
    2248:	01 05       	cpc	r16, r1
    224a:	11 05       	cpc	r17, r1
    224c:	d1 f6       	brne	.-76     	; 0x2202 <LCD_WriteNumber+0x60>
    224e:	1e c0       	rjmp	.+60     	; 0x228c <LCD_WriteNumber+0xea>
				else {
					digitsCounter*=10;
				}
			}
			while(digitsCounter!=0){
				LCD_WriteChar(((numberHolder/digitsCounter)%10)+48);
    2250:	b1 01       	movw	r22, r2
    2252:	c2 01       	movw	r24, r4
    2254:	a4 01       	movw	r20, r8
    2256:	93 01       	movw	r18, r6
    2258:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    225c:	ca 01       	movw	r24, r20
    225e:	b9 01       	movw	r22, r18
    2260:	2a e0       	ldi	r18, 0x0A	; 10
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    226c:	86 2f       	mov	r24, r22
    226e:	80 5d       	subi	r24, 0xD0	; 208
    2270:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
				digitsCounter/=10;
    2274:	c4 01       	movw	r24, r8
    2276:	b3 01       	movw	r22, r6
    2278:	2a e0       	ldi	r18, 0x0A	; 10
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    2284:	c9 01       	movw	r24, r18
    2286:	da 01       	movw	r26, r20
    2288:	3c 01       	movw	r6, r24
    228a:	4d 01       	movw	r8, r26
				}
				else {
					digitsCounter*=10;
				}
			}
			while(digitsCounter!=0){
    228c:	61 14       	cp	r6, r1
    228e:	71 04       	cpc	r7, r1
    2290:	81 04       	cpc	r8, r1
    2292:	91 04       	cpc	r9, r1
    2294:	e9 f6       	brne	.-70     	; 0x2250 <LCD_WriteNumber+0xae>
	else {
		LOC_ERROR = NOT_OK;
		LCD_WriteString("ERROR/RESTART");
	}
	return (LOC_ERROR);
}
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	bf 90       	pop	r11
    22a6:	af 90       	pop	r10
    22a8:	9f 90       	pop	r9
    22aa:	8f 90       	pop	r8
    22ac:	7f 90       	pop	r7
    22ae:	6f 90       	pop	r6
    22b0:	5f 90       	pop	r5
    22b2:	4f 90       	pop	r4
    22b4:	3f 90       	pop	r3
    22b6:	2f 90       	pop	r2
    22b8:	08 95       	ret

000022ba <LCD_WriteNumber_floatingPoint>:
		}
	}
	return (LOC_ERROR);
}

STD_ERROR LCD_WriteNumber_floatingPoint(f32 LCD_NUMBER){
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	8f 92       	push	r8
    22c2:	9f 92       	push	r9
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	7b 01       	movw	r14, r22
    22d6:	8c 01       	movw	r16, r24
	STD_ERROR LOC_ERROR = OK;
	s32 LCD_NUMBER_INTEGRAL=(s32)LCD_NUMBER;
    22d8:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    22dc:	5b 01       	movw	r10, r22
    22de:	6c 01       	movw	r12, r24
	u32 fractionalCounter=1;
	u8 zeroFirstFlag=1;

	LCD_NUMBER=(f32)(LCD_NUMBER-LCD_NUMBER_INTEGRAL);					//This makes LCD_NUMBER its fractional part only without the whole number (e.g. 0.23 the integral part has to be 0).
    22e0:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
    22e4:	9b 01       	movw	r18, r22
    22e6:	ac 01       	movw	r20, r24
    22e8:	c8 01       	movw	r24, r16
    22ea:	b7 01       	movw	r22, r14
    22ec:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    22f0:	3b 01       	movw	r6, r22
    22f2:	4c 01       	movw	r8, r24

	if(LCD_NUMBER<0){
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	0e 94 06 05 	call	0xa0c	; 0xa0c <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	94 f4       	brge	.+36     	; 0x2328 <LCD_WriteNumber_floatingPoint+0x6e>
		if(!LCD_NUMBER_INTEGRAL){
    2304:	a1 14       	cp	r10, r1
    2306:	b1 04       	cpc	r11, r1
    2308:	c1 04       	cpc	r12, r1
    230a:	d1 04       	cpc	r13, r1
    230c:	19 f4       	brne	.+6      	; 0x2314 <LCD_WriteNumber_floatingPoint+0x5a>
			LCD_WriteChar('-');											//Only print the negative sign if the integral part of the number is zero, because the negative sign will not be printed later if the integral part is zero and the fractional part is negative (e.g. -0.23).
    230e:	8d e2       	ldi	r24, 0x2D	; 45
    2310:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
		}
		LCD_NUMBER=0-LCD_NUMBER;
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a4 01       	movw	r20, r8
    231e:	93 01       	movw	r18, r6
    2320:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    2324:	3b 01       	movw	r6, r22
    2326:	4c 01       	movw	r8, r24
	}

	LCD_WriteNumber(LCD_NUMBER_INTEGRAL);								//Print the integral part of the number, and if its a negative then it prints the sign.
    2328:	c6 01       	movw	r24, r12
    232a:	b5 01       	movw	r22, r10
    232c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_WriteNumber>

	LCD_WriteChar('.');													//Print the decimal point.
    2330:	8e e2       	ldi	r24, 0x2E	; 46
    2332:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
    2336:	64 01       	movw	r12, r8
    2338:	53 01       	movw	r10, r6
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	e9 2e       	mov	r14, r25
    233e:	f1 2c       	mov	r15, r1
    2340:	01 2d       	mov	r16, r1
    2342:	11 2d       	mov	r17, r1
    2344:	55 24       	eor	r5, r5
    2346:	53 94       	inc	r5
    2348:	2a c0       	rjmp	.+84     	; 0x239e <LCD_WriteNumber_floatingPoint+0xe4>

	f32 LCD_NUMBER_tmp=LCD_NUMBER;										//This iteration counts the number of digits in the fractional part to print all of it, but as AVR does not support f64, there are some problems in representing the fractional numbers.

	while(LCD_NUMBER_tmp!=(s32)LCD_NUMBER_tmp){							//As long as the integral part of the number is not equal the number (for example 0.23 is not equal 0).
		LCD_NUMBER_tmp*=10;												//Then next iteration will be 2.3 not equal 2, and the one after it will be 23 equal 23, which satisfy the condition.
    234a:	c6 01       	movw	r24, r12
    234c:	b5 01       	movw	r22, r10
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
    235a:	5b 01       	movw	r10, r22
    235c:	6c 01       	movw	r12, r24

		if(zeroFirstFlag){												//This condition checks if the leading digit/digits in the fractional part are zeros, if so print zero (because it will not print it later as zero on the left is not significant).
    235e:	55 20       	and	r5, r5
    2360:	a1 f0       	breq	.+40     	; 0x238a <LCD_WriteNumber_floatingPoint+0xd0>
			if((s32)LCD_NUMBER_tmp%10==0){
    2362:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    2366:	2a e0       	ldi	r18, 0x0A	; 10
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <__divmodsi4>
    2372:	61 15       	cp	r22, r1
    2374:	71 05       	cpc	r23, r1
    2376:	81 05       	cpc	r24, r1
    2378:	91 05       	cpc	r25, r1
    237a:	11 f0       	breq	.+4      	; 0x2380 <LCD_WriteNumber_floatingPoint+0xc6>
    237c:	55 24       	eor	r5, r5
    237e:	05 c0       	rjmp	.+10     	; 0x238a <LCD_WriteNumber_floatingPoint+0xd0>
				LCD_WriteChar('0');
    2380:	80 e3       	ldi	r24, 0x30	; 48
    2382:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
    2386:	55 24       	eor	r5, r5
    2388:	53 94       	inc	r5
			}
			else {
				zeroFirstFlag=0;
			}
		}
		fractionalCounter*=10;
    238a:	c8 01       	movw	r24, r16
    238c:	b7 01       	movw	r22, r14
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    239a:	7b 01       	movw	r14, r22
    239c:	8c 01       	movw	r16, r24

	LCD_WriteChar('.');													//Print the decimal point.

	f32 LCD_NUMBER_tmp=LCD_NUMBER;										//This iteration counts the number of digits in the fractional part to print all of it, but as AVR does not support f64, there are some problems in representing the fractional numbers.

	while(LCD_NUMBER_tmp!=(s32)LCD_NUMBER_tmp){							//As long as the integral part of the number is not equal the number (for example 0.23 is not equal 0).
    239e:	c6 01       	movw	r24, r12
    23a0:	b5 01       	movw	r22, r10
    23a2:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    23a6:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
    23ae:	c6 01       	movw	r24, r12
    23b0:	b5 01       	movw	r22, r10
    23b2:	0e 94 76 04 	call	0x8ec	; 0x8ec <__nesf2>
    23b6:	88 23       	and	r24, r24
    23b8:	41 f6       	brne	.-112    	; 0x234a <LCD_WriteNumber_floatingPoint+0x90>
				zeroFirstFlag=0;
			}
		}
		fractionalCounter*=10;
	}
	if(fractionalCounter<1000000000){
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	e8 16       	cp	r14, r24
    23be:	8a ec       	ldi	r24, 0xCA	; 202
    23c0:	f8 06       	cpc	r15, r24
    23c2:	8a e9       	ldi	r24, 0x9A	; 154
    23c4:	08 07       	cpc	r16, r24
    23c6:	8b e3       	ldi	r24, 0x3B	; 59
    23c8:	18 07       	cpc	r17, r24
    23ca:	48 f4       	brcc	.+18     	; 0x23de <LCD_WriteNumber_floatingPoint+0x124>
		LCD_WriteNumber(LCD_NUMBER*fractionalCounter);
    23cc:	c8 01       	movw	r24, r16
    23ce:	b7 01       	movw	r22, r14
    23d0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    23d4:	9b 01       	movw	r18, r22
    23d6:	ac 01       	movw	r20, r24
    23d8:	c4 01       	movw	r24, r8
    23da:	b3 01       	movw	r22, r6
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <LCD_WriteNumber_floatingPoint+0x130>
	}
	else {
		LCD_WriteNumber(LCD_NUMBER*100000000);
    23de:	c4 01       	movw	r24, r8
    23e0:	b3 01       	movw	r22, r6
    23e2:	20 e2       	ldi	r18, 0x20	; 32
    23e4:	3c eb       	ldi	r19, 0xBC	; 188
    23e6:	4e eb       	ldi	r20, 0xBE	; 190
    23e8:	5c e4       	ldi	r21, 0x4C	; 76
    23ea:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
    23ee:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    23f2:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_WriteNumber>
	}

	return (LOC_ERROR);
}
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	ff 90       	pop	r15
    23fe:	ef 90       	pop	r14
    2400:	df 90       	pop	r13
    2402:	cf 90       	pop	r12
    2404:	bf 90       	pop	r11
    2406:	af 90       	pop	r10
    2408:	9f 90       	pop	r9
    240a:	8f 90       	pop	r8
    240c:	7f 90       	pop	r7
    240e:	6f 90       	pop	r6
    2410:	5f 90       	pop	r5
    2412:	08 95       	ret

00002414 <LCD_WriteString>:
	LCD_WriteChar(' ');
	TMR1_Delay_us(10);
	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
}

STD_ERROR LCD_WriteString (u8 const * Copy_String) {
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	ec 01       	movw	r28, r24
    241a:	07 c0       	rjmp	.+14     	; 0x242a <LCD_WriteString+0x16>
	STD_ERROR LOC_ERROR = OK;

	while(*Copy_String != '\0') {
		LCD_WriteChar(*Copy_String);
    241c:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
		Copy_String++;
    2420:	21 96       	adiw	r28, 0x01	; 1
		TMR1_Delay_us(100);
    2422:	84 e6       	ldi	r24, 0x64	; 100
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 0e 0a 	call	0x141c	; 0x141c <TMR1_Delay_us>
}

STD_ERROR LCD_WriteString (u8 const * Copy_String) {
	STD_ERROR LOC_ERROR = OK;

	while(*Copy_String != '\0') {
    242a:	88 81       	ld	r24, Y
    242c:	88 23       	and	r24, r24
    242e:	b1 f7       	brne	.-20     	; 0x241c <LCD_WriteString+0x8>
		LCD_WriteChar(*Copy_String);
		Copy_String++;
		TMR1_Delay_us(100);
	}
	return (LOC_ERROR);
}
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	08 95       	ret

00002436 <LCD_GetAddress>:

//#else #error "No Mode of Operation is entered."

//#endif

void LCD_GetAddress(u8* address){
    2436:	ef 92       	push	r14
    2438:	ff 92       	push	r15
    243a:	0f 93       	push	r16
    243c:	1f 93       	push	r17
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <LCD_GetAddress+0xe>
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	7c 01       	movw	r14, r24
	u8 busyFlagValue;
	u8 tmp_DataPortDirectionHolder;

	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	be 01       	movw	r22, r28
    244e:	6e 5f       	subi	r22, 0xFE	; 254
    2450:	7f 4f       	sbci	r23, 0xFF	; 255
    2452:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_GetPortDir>

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, DIO_PORT_DIR_FULL_INPUT);
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_SetPortDir>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    245e:	84 e0       	ldi	r24, 0x04	; 4
    2460:	64 e0       	ldi	r22, 0x04	; 4
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_HIGH);
    2468:	84 e0       	ldi	r24, 0x04	; 4
    246a:	63 e0       	ldi	r22, 0x03	; 3
    246c:	41 e0       	ldi	r20, 0x01	; 1
    246e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	do{
		DIO_GetPinValue(LCD_DATA_CONNECTED_PORT, LCD_BUSY_FLAG_BIT, &busyFlagValue);
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5f       	subi	r16, 0xFF	; 255
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	83 e0       	ldi	r24, 0x03	; 3
    2484:	67 e0       	ldi	r22, 0x07	; 7
    2486:	a8 01       	movw	r20, r16
    2488:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_GetPinValue>
	}
	while(busyFlagValue);
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	88 23       	and	r24, r24
    2490:	c1 f7       	brne	.-16     	; 0x2482 <LCD_GetAddress+0x4c>
	DIO_GetPortValue(LCD_DATA_CONNECTED_PORT, address);
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	b7 01       	movw	r22, r14
    2496:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <DIO_GetPortValue>

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	6a 81       	ldd	r22, Y+2	; 0x02
    249e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_SetPortDir>
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	08 95       	ret

000024b4 <LCD_SendCommand>:

#include "../../MCAL/DIO/DIO_interface.h"
#include "LCD_interface.h"
#include "../../MCAL/TMR1/TMR1_interface.h"

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
    24b4:	1f 93       	push	r17
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	0f 92       	push	r0
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	18 2f       	mov	r17, r24
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	be 01       	movw	r22, r28
    24c6:	6f 5f       	subi	r22, 0xFF	; 255
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    24ce:	84 e0       	ldi	r24, 0x04	; 4
    24d0:	64 e0       	ldi	r22, 0x04	; 4
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	63 e0       	ldi	r22, 0x03	; 3
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    24e2:	84 e0       	ldi	r24, 0x04	; 4
    24e4:	62 e0       	ldi	r22, 0x02	; 2
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	61 2f       	mov	r22, r17
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    24f6:	84 e0       	ldi	r24, 0x04	; 4
    24f8:	62 e0       	ldi	r22, 0x02	; 2
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2508:	84 e0       	ldi	r24, 0x04	; 4
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    2512:	84 ef       	ldi	r24, 0xF4	; 244
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	0e 94 0e 0a 	call	0x141c	; 0x141c <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	69 81       	ldd	r22, Y+1	; 0x01
    251e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_SetPortDir>
	return (LOC_ERROR);
}
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	1f 91       	pop	r17
    252c:	08 95       	ret

0000252e <LCD_GoTo_X_Y>:
}

STD_ERROR LCD_GoTo_X_Y (u8 const x, u8 const y) {

	STD_ERROR LOC_ERROR = OK;
	switch(y) {
    252e:	66 23       	and	r22, r22
    2530:	19 f0       	breq	.+6      	; 0x2538 <LCD_GoTo_X_Y+0xa>
    2532:	61 30       	cpi	r22, 0x01	; 1
    2534:	61 f4       	brne	.+24     	; 0x254e <LCD_GoTo_X_Y+0x20>
    2536:	04 c0       	rjmp	.+8      	; 0x2540 <LCD_GoTo_X_Y+0x12>
	case 0:
		if((x >= ZERO) && (x < LCD_MAX_CHAR_PER_LINE)) {
    2538:	80 31       	cpi	r24, 0x10	; 16
    253a:	48 f4       	brcc	.+18     	; 0x254e <LCD_GoTo_X_Y+0x20>
			LCD_SendCommand(LCD_COM_SET_CURSOR_FIRST_LINE + x);
    253c:	80 58       	subi	r24, 0x80	; 128
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <LCD_GoTo_X_Y+0x18>
		else {
			LOC_ERROR = NOT_OK;
		}
		break;
	case 1:
		if((x >= ZERO) && (x < LCD_MAX_CHAR_PER_LINE)) {
    2540:	80 31       	cpi	r24, 0x10	; 16
    2542:	28 f4       	brcc	.+10     	; 0x254e <LCD_GoTo_X_Y+0x20>
			LCD_SendCommand(LCD_COM_SET_CURSOR_SECOND_LINE + x);
    2544:	80 54       	subi	r24, 0x40	; 64
    2546:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	08 95       	ret
    254e:	81 e0       	ldi	r24, 0x01	; 1
	default:
		LOC_ERROR = NOT_OK;
		break;
	}
	return LOC_ERROR;
}
    2550:	08 95       	ret

00002552 <LCD_DeleteChar>:
	return LOC_ERROR;
}

void LCD_DeleteChar (void){

	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
    2552:	80 e1       	ldi	r24, 0x10	; 16
    2554:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_WriteChar(' ');
    2558:	80 e2       	ldi	r24, 0x20	; 32
    255a:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
	TMR1_Delay_us(10);
    255e:	8a e0       	ldi	r24, 0x0A	; 10
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 0e 0a 	call	0x141c	; 0x141c <TMR1_Delay_us>
	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
    2566:	80 e1       	ldi	r24, 0x10	; 16
    2568:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
}
    256c:	08 95       	ret

0000256e <LCD_INIT>:

//#if Mode_Of_Oper == Eight_Bit_Mode
STD_ERROR LCD_INIT (void) {
	STD_ERROR LOC_ERROR = OK;

	TMR1_Init_CTC();
    256e:	0e 94 aa 09 	call	0x1354	; 0x1354 <TMR1_Init_CTC>

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, DIO_PORT_DIR_FULL_OUTPUT);
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	6f ef       	ldi	r22, 0xFF	; 255
    2576:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_SetPortDir>
	DIO_SetPinDir(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_DIR_OUTPUT);
    257a:	84 e0       	ldi	r24, 0x04	; 4
    257c:	64 e0       	ldi	r22, 0x04	; 4
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_DIR_OUTPUT);
    2584:	84 e0       	ldi	r24, 0x04	; 4
    2586:	62 e0       	ldi	r22, 0x02	; 2
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_DIR_OUTPUT);
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	63 e0       	ldi	r22, 0x03	; 3
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <DIO_SetPinDir>

	LCD_SendCommand(LCD_COM_HOME);
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_SendCommand(LCD_COM_FUNCTION_SET_8BIT);
    259e:	88 e3       	ldi	r24, 0x38	; 56
    25a0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_SendCommand(LCD_COM_DISPLAY_ON_CURSOR_BLINK);
    25a4:	8d e0       	ldi	r24, 0x0D	; 13
    25a6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_SendCommand(LCD_COM_CLEAR);
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_SendCommand(LCD_COM_ENTRYMODE);
    25b0:	86 e0       	ldi	r24, 0x06	; 6
    25b2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>

	return LOC_ERROR;
}
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	08 95       	ret

000025ba <KEYPAD_GetPressedKey>:
																													//so if the button is pressed (the circuit is closed) nothing happens as VCC is connected to VCC.

	return LOC_ERROR;
}

u8 KEYPAD_GetPressedKey(void) {
    25ba:	7f 92       	push	r7
    25bc:	8f 92       	push	r8
    25be:	9f 92       	push	r9
    25c0:	af 92       	push	r10
    25c2:	bf 92       	push	r11
    25c4:	cf 92       	push	r12
    25c6:	df 92       	push	r13
    25c8:	ef 92       	push	r14
    25ca:	ff 92       	push	r15
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	u8 Pin_Value = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	aa 24       	eor	r10, r10
    25e0:	aa 94       	dec	r10
    25e2:	cc 24       	eor	r12, r12
    25e4:	dd 24       	eor	r13, r13
	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
																					//Also each 4 buttons forming a row are connected together to a pin (4 pins), those pins' direction are a pulled up input (connected to VCC via a resistor).
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_LOW);				//Activating a certain column by setting its value to low, so that now when a button (from the 4 buttons in the column) is pressed, it will drive the input pin of its row to the ground.

		for(int j = ROW_START; j < ROW_FIN; j++){
			DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);					//Looping on the 4 buttons of the column (4 rows), to find the pressed button.
    25e6:	4e 01       	movw	r8, r28
    25e8:	08 94       	sec
    25ea:	81 1c       	adc	r8, r1
    25ec:	91 1c       	adc	r9, r1

	return LOC_ERROR;
}

u8 KEYPAD_GetPressedKey(void) {
	u8 Pin_Value = 1;
    25ee:	7c 2c       	mov	r7, r12

	u16 buttonPressTime=0;

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
																					//Also each 4 buttons forming a row are connected together to a pin (4 pins), those pins' direction are a pulled up input (connected to VCC via a resistor).
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_LOW);				//Activating a certain column by setting its value to low, so that now when a button (from the 4 buttons in the column) is pressed, it will drive the input pin of its row to the ground.
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	6c 2d       	mov	r22, r12
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
    25fa:	76 01       	movw	r14, r12
    25fc:	ee 0c       	add	r14, r14
    25fe:	ff 1c       	adc	r15, r15
    2600:	ee 0c       	add	r14, r14
    2602:	ff 1c       	adc	r15, r15
    2604:	8b e9       	ldi	r24, 0x9B	; 155
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	e8 0e       	add	r14, r24
    260a:	f9 1e       	adc	r15, r25
    260c:	24 e0       	ldi	r18, 0x04	; 4
    260e:	b2 2e       	mov	r11, r18

		for(int j = ROW_START; j < ROW_FIN; j++){
			DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);					//Looping on the 4 buttons of the column (4 rows), to find the pressed button.
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	6b 2d       	mov	r22, r11
    2614:	a4 01       	movw	r20, r8
    2616:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_GetPinValue>
			if(Pin_Value == PRESSED){												//Checking if this pin is the pressed pin.
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	88 23       	and	r24, r24
    261e:	39 f5       	brne	.+78     	; 0x266e <KEYPAD_GetPressedKey+0xb4>
				Return_Value = Pressed_Key[i-COL_START][j-ROW_START];				//If i find it, i now know which button is pressed, by knowing its certain column (the activated one) and its certain row (the row that is driven to ground, i.e. reads as 0).
    2620:	f7 01       	movw	r30, r14
    2622:	a0 80       	ld	r10, Z
				TMR1_Start_CTC(8000);												//This line starts the timer in CTC mode, can be removed from the code (serves a specific purpose).
    2624:	80 e4       	ldi	r24, 0x40	; 64
    2626:	9f e1       	ldi	r25, 0x1F	; 31
    2628:	0e 94 c4 09 	call	0x1388	; 0x1388 <TMR1_Start_CTC>
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <KEYPAD_GetPressedKey+0x7e>
				while(Pin_Value == PRESSED){										//This loop makes sure that the function does not keep checking on a pressed button as long as the button is being pressed.
					DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	6b 2d       	mov	r22, r11
    2632:	a4 01       	movw	r20, r8
    2634:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_GetPinValue>
		for(int j = ROW_START; j < ROW_FIN; j++){
			DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);					//Looping on the 4 buttons of the column (4 rows), to find the pressed button.
			if(Pin_Value == PRESSED){												//Checking if this pin is the pressed pin.
				Return_Value = Pressed_Key[i-COL_START][j-ROW_START];				//If i find it, i now know which button is pressed, by knowing its certain column (the activated one) and its certain row (the row that is driven to ground, i.e. reads as 0).
				TMR1_Start_CTC(8000);												//This line starts the timer in CTC mode, can be removed from the code (serves a specific purpose).
				while(Pin_Value == PRESSED){										//This loop makes sure that the function does not keep checking on a pressed button as long as the button is being pressed.
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	88 23       	and	r24, r24
    263c:	c1 f3       	breq	.-16     	; 0x262e <KEYPAD_GetPressedKey+0x74>
					DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);
				}
				buttonPressTime=TMR1_Read_Current_Time_MS_CTC();					//This line gets the current reading of the timer after the button is no longer pressed, can be removed from the code (serves a specific purpose).
    263e:	0e 94 32 0a 	call	0x1464	; 0x1464 <TMR1_Read_Current_Time_MS_CTC>
    2642:	8c 01       	movw	r16, r24
				TMR1_Stop();														//Stops the timer, can be removed from the code (serves a specific purpose).
    2644:	0e 94 45 0a 	call	0x148a	; 0x148a <TMR1_Stop>
				if(Return_Value=='A' && buttonPressTime<300){						//This is the specific purpose, it makes sure that pressing a certain button ('A' in this case) for more than 300ms, sends a different character (acts as if i have two buttons in this button, i.e. when its long pressed and when its short pressed).
    2648:	f1 e4       	ldi	r31, 0x41	; 65
    264a:	af 16       	cp	r10, r31
    264c:	21 f4       	brne	.+8      	; 0x2656 <KEYPAD_GetPressedKey+0x9c>
    264e:	0c 52       	subi	r16, 0x2C	; 44
    2650:	11 40       	sbci	r17, 0x01	; 1
    2652:	88 f1       	brcs	.+98     	; 0x26b6 <KEYPAD_GetPressedKey+0xfc>
    2654:	08 c0       	rjmp	.+16     	; 0x2666 <KEYPAD_GetPressedKey+0xac>
					Return_Value='C';
				}
				if(Return_Value=='0' && buttonPressTime>300){						//Same as before.
    2656:	90 e3       	ldi	r25, 0x30	; 48
    2658:	a9 16       	cp	r10, r25
    265a:	29 f4       	brne	.+10     	; 0x2666 <KEYPAD_GetPressedKey+0xac>
    265c:	0d 52       	subi	r16, 0x2D	; 45
    265e:	11 40       	sbci	r17, 0x01	; 1
    2660:	10 f0       	brcs	.+4      	; 0x2666 <KEYPAD_GetPressedKey+0xac>
    2662:	94 e4       	ldi	r25, 0x44	; 68
    2664:	a9 2e       	mov	r10, r25
					Return_Value='D';
				}
				TMR1_Delay_ms(10);
    2666:	8a e0       	ldi	r24, 0x0A	; 10
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TMR1_Delay_ms>
    266e:	b3 94       	inc	r11
    2670:	08 94       	sec
    2672:	e1 1c       	adc	r14, r1
    2674:	f1 1c       	adc	r15, r1

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
																					//Also each 4 buttons forming a row are connected together to a pin (4 pins), those pins' direction are a pulled up input (connected to VCC via a resistor).
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_LOW);				//Activating a certain column by setting its value to low, so that now when a button (from the 4 buttons in the column) is pressed, it will drive the input pin of its row to the ground.

		for(int j = ROW_START; j < ROW_FIN; j++){
    2676:	f8 e0       	ldi	r31, 0x08	; 8
    2678:	bf 16       	cp	r11, r31
    267a:	51 f6       	brne	.-108    	; 0x2610 <KEYPAD_GetPressedKey+0x56>
					Return_Value='D';
				}
				TMR1_Delay_ms(10);
			}
		}
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_HIGH);				//Deactivating the column that i activated, to activate another in the next iteration.
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	67 2d       	mov	r22, r7
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_SetPinValue>
	u8 Pin_Value = 1;
	u8 Return_Value = 0xFF;															//Return value is all ones as initially with no buttons pressed the keypad output is high (no buttons

	u16 buttonPressTime=0;

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
    2686:	08 94       	sec
    2688:	c1 1c       	adc	r12, r1
    268a:	d1 1c       	adc	r13, r1
    268c:	84 e0       	ldi	r24, 0x04	; 4
    268e:	c8 16       	cp	r12, r24
    2690:	d1 04       	cpc	r13, r1
    2692:	09 f0       	breq	.+2      	; 0x2696 <KEYPAD_GetPressedKey+0xdc>
    2694:	ac cf       	rjmp	.-168    	; 0x25ee <KEYPAD_GetPressedKey+0x34>
		}
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_HIGH);				//Deactivating the column that i activated, to activate another in the next iteration.
	}																				//The processor clock is much faster than the human reaction time, that is why the MCU can loop on the 4 columns activating one a time, and still be able to know which button is pressed.

	return Return_Value;
}
    2696:	8a 2d       	mov	r24, r10
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	df 90       	pop	r13
    26a8:	cf 90       	pop	r12
    26aa:	bf 90       	pop	r11
    26ac:	af 90       	pop	r10
    26ae:	9f 90       	pop	r9
    26b0:	8f 90       	pop	r8
    26b2:	7f 90       	pop	r7
    26b4:	08 95       	ret
	u8 Pin_Value = 1;
	u8 Return_Value = 0xFF;															//Return value is all ones as initially with no buttons pressed the keypad output is high (no buttons

	u16 buttonPressTime=0;

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
    26b6:	83 e4       	ldi	r24, 0x43	; 67
    26b8:	a8 2e       	mov	r10, r24
    26ba:	d5 cf       	rjmp	.-86     	; 0x2666 <KEYPAD_GetPressedKey+0xac>

000026bc <KEYPAD_INIT>:
};

STD_ERROR KEYPAD_INIT(void) {
	STD_ERROR LOC_ERROR = OK;

	DIO_SetPortDir(KEYPAD_CONNECTED_PORT, DIO_PORT_DIR_FIRST_HALF_OUTPUT);											//First 4 pins are output (for the columns), and last 4 pins are input (for the rows).
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	6f e0       	ldi	r22, 0x0F	; 15
    26c0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DIO_SetPortDir>
	DIO_SetPortValue(KEYPAD_CONNECTED_PORT, DIO_PORT_VALUE_FULL_HIGH, FLAG_DefaultOrSetFromUser_LOW);				//Initially the output pins are high and the input pins are pulled up (also high). So now the button terminals are both connected to VCC,
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	6f ef       	ldi	r22, 0xFF	; 255
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <DIO_SetPortValue>
																													//so if the button is pressed (the circuit is closed) nothing happens as VCC is connected to VCC.

	return LOC_ERROR;
}
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	08 95       	ret

000026d2 <reset_calculator>:
u8 decimalNumberFlag=0;											//If the input number is decimal this flag is set.
u8 decimalPointPosition[MAX_OPERATIONS]={0};					//Array that its elements is set if there is a decimal point in the corresponding position (if there is a decimal point on the 23rd input then decimalPointPosition[23]=1).
u8 wrongInputPosition[MAX_OPERATIONS]={0};						//Array that its elements is set if there is a wrong input (for example two operations after each other: ++) in the corresponding position.

void reset_calculator(void){									//This function resets the calculator (all its variables, without clearing the LCD).
	for(u8 i=0;i<=operationsCounter;i++){						//Reset the arrays.
    26d2:	90 91 16 02 	lds	r25, 0x0216
    26d6:	80 e0       	ldi	r24, 0x00	; 0
		operandsHolder[i]=0;
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	a8 2f       	mov	r26, r24
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	fd 01       	movw	r30, r26
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	ee 0f       	add	r30, r30
    26ec:	ff 1f       	adc	r31, r31
    26ee:	ea 53       	subi	r30, 0x3A	; 58
    26f0:	fe 4f       	sbci	r31, 0xFE	; 254
    26f2:	20 83       	st	Z, r18
    26f4:	31 83       	std	Z+1, r19	; 0x01
    26f6:	42 83       	std	Z+2, r20	; 0x02
    26f8:	53 83       	std	Z+3, r21	; 0x03
		operationsHolder[i]=0;
    26fa:	a9 5e       	subi	r26, 0xE9	; 233
    26fc:	bd 4f       	sbci	r27, 0xFD	; 253
    26fe:	1c 92       	st	X, r1
u8 decimalNumberFlag=0;											//If the input number is decimal this flag is set.
u8 decimalPointPosition[MAX_OPERATIONS]={0};					//Array that its elements is set if there is a decimal point in the corresponding position (if there is a decimal point on the 23rd input then decimalPointPosition[23]=1).
u8 wrongInputPosition[MAX_OPERATIONS]={0};						//Array that its elements is set if there is a wrong input (for example two operations after each other: ++) in the corresponding position.

void reset_calculator(void){									//This function resets the calculator (all its variables, without clearing the LCD).
	for(u8 i=0;i<=operationsCounter;i++){						//Reset the arrays.
    2700:	8f 5f       	subi	r24, 0xFF	; 255
    2702:	98 17       	cp	r25, r24
    2704:	68 f7       	brcc	.-38     	; 0x26e0 <reset_calculator+0xe>
		operandsHolder[i]=0;
		operationsHolder[i]=0;
	}
	for(u8 i=0;i<=inputsCounter;i++){
    2706:	90 91 bc 01 	lds	r25, 0x01BC
    270a:	80 e0       	ldi	r24, 0x00	; 0
		negativeSignPosition[i]=0;
    270c:	e8 2f       	mov	r30, r24
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	df 01       	movw	r26, r30
    2712:	a9 5b       	subi	r26, 0xB9	; 185
    2714:	bd 4f       	sbci	r27, 0xFD	; 253
    2716:	1c 92       	st	X, r1
		wrongInputPosition[i]=0;
    2718:	df 01       	movw	r26, r30
    271a:	aa 56       	subi	r26, 0x6A	; 106
    271c:	bd 4f       	sbci	r27, 0xFD	; 253
    271e:	1c 92       	st	X, r1
		decimalPointPosition[i]=0;
    2720:	e1 59       	subi	r30, 0x91	; 145
    2722:	fd 4f       	sbci	r31, 0xFD	; 253
    2724:	10 82       	st	Z, r1
void reset_calculator(void){									//This function resets the calculator (all its variables, without clearing the LCD).
	for(u8 i=0;i<=operationsCounter;i++){						//Reset the arrays.
		operandsHolder[i]=0;
		operationsHolder[i]=0;
	}
	for(u8 i=0;i<=inputsCounter;i++){
    2726:	8f 5f       	subi	r24, 0xFF	; 255
    2728:	98 17       	cp	r25, r24
    272a:	80 f7       	brcc	.-32     	; 0x270c <reset_calculator+0x3a>
		negativeSignPosition[i]=0;
		wrongInputPosition[i]=0;
		decimalPointPosition[i]=0;
	}
	operandHolder=0;
    272c:	10 92 bd 01 	sts	0x01BD, r1
    2730:	10 92 be 01 	sts	0x01BE, r1
    2734:	10 92 bf 01 	sts	0x01BF, r1
    2738:	10 92 c0 01 	sts	0x01C0, r1
	decimalHolder=0;
    273c:	10 92 c1 01 	sts	0x01C1, r1
    2740:	10 92 c2 01 	sts	0x01C2, r1
    2744:	10 92 c3 01 	sts	0x01C3, r1
    2748:	10 92 c4 01 	sts	0x01C4, r1
	fractionalCounter=1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e0       	ldi	r26, 0x00	; 0
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	80 93 97 01 	sts	0x0197, r24
    2758:	90 93 98 01 	sts	0x0198, r25
    275c:	a0 93 99 01 	sts	0x0199, r26
    2760:	b0 93 9a 01 	sts	0x019A, r27
	operandsCounter=0;
    2764:	10 92 c5 01 	sts	0x01C5, r1
	operationsCounter=0;
    2768:	10 92 16 02 	sts	0x0216, r1
	inputsCounter=0;
    276c:	10 92 bc 01 	sts	0x01BC, r1
	input=0;
    2770:	10 92 bb 01 	sts	0x01BB, r1
	result=0;
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e0       	ldi	r26, 0x00	; 0
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	80 93 3e 02 	sts	0x023E, r24
    2780:	90 93 3f 02 	sts	0x023F, r25
    2784:	a0 93 40 02 	sts	0x0240, r26
    2788:	b0 93 41 02 	sts	0x0241, r27
	endIndicatorFlag=0;
    278c:	10 92 42 02 	sts	0x0242, r1
	sequenceCorrectFlag=0;
    2790:	10 92 44 02 	sts	0x0244, r1
	wrongInputCounter=0;
    2794:	10 92 45 02 	sts	0x0245, r1
	negativeNumberFlag=0;
    2798:	10 92 46 02 	sts	0x0246, r1
	decimalNumberFlag=0;
    279c:	10 92 6e 02 	sts	0x026E, r1
}
    27a0:	08 95       	ret

000027a2 <clear_LCD>:

void clear_LCD(void){
	LCD_SendCommand(LCD_COM_CLEAR);								//clear the LCD.
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_SendCommand(LCD_COM_DISPLAY_ON_CURSOR_BLINK);
    27a8:	8d e0       	ldi	r24, 0x0D	; 13
    27aa:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	UART_SendChar_Polling('C');
    27ae:	83 e4       	ldi	r24, 0x43	; 67
    27b0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
	UART_SendChar_Polling('B');
    27b4:	82 e4       	ldi	r24, 0x42	; 66
    27b6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
}
    27ba:	08 95       	ret

000027bc <error_report>:

void error_report(u8 limit_exceed_string[]){					//When the input exceeds either the limit of the LCD or the limit of the holding variable, this error print a "limit exceed" message on the LCD.
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	ec 01       	movw	r28, r24
	LCD_SendCommand(LCD_COM_HOME);
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_SendCommand(LCD_COM_SET_CURSOR_SECOND_LINE);
    27c8:	80 ec       	ldi	r24, 0xC0	; 192
    27ca:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
	LCD_WriteString(limit_exceed_string);
    27ce:	ce 01       	movw	r24, r28
    27d0:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_WriteString>
	UART_SendChar_Polling('H');
    27d4:	88 e4       	ldi	r24, 0x48	; 72
    27d6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
	UART_SendChar_Polling('S');
    27da:	83 e5       	ldi	r24, 0x53	; 83
    27dc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
	if(limit_exceed_string=="LCD Limit Exceed"){
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	c0 36       	cpi	r28, 0x60	; 96
    27e4:	d8 07       	cpc	r29, r24
    27e6:	11 f4       	brne	.+4      	; 0x27ec <error_report+0x30>
		UART_SendChar_Polling('Q');
    27e8:	81 e5       	ldi	r24, 0x51	; 81
    27ea:	06 c0       	rjmp	.+12     	; 0x27f8 <error_report+0x3c>
	}
	else if(limit_exceed_string=="VariableOverflow"){
    27ec:	c1 57       	subi	r28, 0x71	; 113
    27ee:	d0 40       	sbci	r29, 0x00	; 0
    27f0:	11 f4       	brne	.+4      	; 0x27f6 <error_report+0x3a>
		UART_SendChar_Polling('W');
    27f2:	87 e5       	ldi	r24, 0x57	; 87
    27f4:	01 c0       	rjmp	.+2      	; 0x27f8 <error_report+0x3c>
	}
	else {
		UART_SendChar_Polling('E');
    27f6:	85 e4       	ldi	r24, 0x45	; 69
    27f8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
	}
}
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret

00002802 <operation_perform>:
		}
		input=0;																					//After finishing one cycle of checking the input variable, input is reset to wait for the user to enter another input (0 in this context is null as input variable resembles the ascii table).
	}
}
//Name: "Calculating the result" part. Function: It calculates the whole operation entered by the user.
void operation_perform(void){
    2802:	8f 92       	push	r8
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17

	for(u8 i=0;i<=operationsCounter && endIndicatorFlag;i++){				//This for loop handles multiplication and division operations and produces a new operandsHodler array with the results of multiplying and dividing the operands, and a new operationsHolder array without any multiplication and division operations.
    2816:	c0 90 42 02 	lds	r12, 0x0242
    281a:	d0 90 c5 01 	lds	r13, 0x01C5
    281e:	e0 90 16 02 	lds	r14, 0x0216
    2822:	ff 24       	eor	r15, r15
    2824:	90 c0       	rjmp	.+288    	; 0x2946 <operation_perform+0x144>
		//This for loop was made for multiplication and division only to handle the priorities of a mathematical operation.
		//It basically search for multiplication and division operations in the operationsHolder array. and then perform this operation between its two consecutive operands in the operandsHolder,
		//and takes the result and store it in the first operand position, then update the operandsHolder array by shifting its contents to the left (seconds operand position).
		//It also updates the operationsHolder array removing that operation from it. Then it produces two arrays that has no multiplication or division operations.
		if(operationsHolder[i]=='x'){
    2826:	af 2d       	mov	r26, r15
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	fd 01       	movw	r30, r26
    282c:	e9 5e       	subi	r30, 0xE9	; 233
    282e:	fd 4f       	sbci	r31, 0xFD	; 253
    2830:	e0 81       	ld	r30, Z
    2832:	e8 37       	cpi	r30, 0x78	; 120
    2834:	f1 f5       	brne	.+124    	; 0x28b2 <operation_perform+0xb0>
			operandsHolder[i]*=operandsHolder[i+1];
    2836:	aa 0f       	add	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	aa 0f       	add	r26, r26
    283c:	bb 1f       	adc	r27, r27
    283e:	8d 01       	movw	r16, r26
    2840:	0a 53       	subi	r16, 0x3A	; 58
    2842:	1e 4f       	sbci	r17, 0xFE	; 254
    2844:	a6 53       	subi	r26, 0x36	; 54
    2846:	be 4f       	sbci	r27, 0xFE	; 254
    2848:	f8 01       	movw	r30, r16
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	2d 91       	ld	r18, X+
    2854:	3d 91       	ld	r19, X+
    2856:	4d 91       	ld	r20, X+
    2858:	5c 91       	ld	r21, X
    285a:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
    285e:	f8 01       	movw	r30, r16
    2860:	60 83       	st	Z, r22
    2862:	71 83       	std	Z+1, r23	; 0x01
    2864:	82 83       	std	Z+2, r24	; 0x02
    2866:	93 83       	std	Z+3, r25	; 0x03
			u8 j;
			for(j=i+1;j<operationsCounter;j++){
    2868:	6f 2d       	mov	r22, r15
    286a:	1d c0       	rjmp	.+58     	; 0x28a6 <operation_perform+0xa4>
				operandsHolder[j]=operandsHolder[j+1];
    286c:	9a 01       	movw	r18, r20
    286e:	22 0f       	add	r18, r18
    2870:	33 1f       	adc	r19, r19
    2872:	22 0f       	add	r18, r18
    2874:	33 1f       	adc	r19, r19
    2876:	2a 53       	subi	r18, 0x3A	; 58
    2878:	3e 4f       	sbci	r19, 0xFE	; 254
    287a:	fa 01       	movw	r30, r20
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	e6 53       	subi	r30, 0x36	; 54
    2886:	fe 4f       	sbci	r31, 0xFE	; 254
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	a2 81       	ldd	r26, Z+2	; 0x02
    288e:	b3 81       	ldd	r27, Z+3	; 0x03
    2890:	f9 01       	movw	r30, r18
    2892:	80 83       	st	Z, r24
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	a2 83       	std	Z+2, r26	; 0x02
    2898:	b3 83       	std	Z+3, r27	; 0x03
				operationsHolder[j-1]=operationsHolder[j];
    289a:	fa 01       	movw	r30, r20
    289c:	e9 5e       	subi	r30, 0xE9	; 233
    289e:	fd 4f       	sbci	r31, 0xFD	; 253
    28a0:	80 81       	ld	r24, Z
    28a2:	31 97       	sbiw	r30, 0x01	; 1
    28a4:	80 83       	st	Z, r24
		//and takes the result and store it in the first operand position, then update the operandsHolder array by shifting its contents to the left (seconds operand position).
		//It also updates the operationsHolder array removing that operation from it. Then it produces two arrays that has no multiplication or division operations.
		if(operationsHolder[i]=='x'){
			operandsHolder[i]*=operandsHolder[i+1];
			u8 j;
			for(j=i+1;j<operationsCounter;j++){
    28a6:	6f 5f       	subi	r22, 0xFF	; 255
    28a8:	46 2f       	mov	r20, r22
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	6e 15       	cp	r22, r14
    28ae:	f0 f2       	brcs	.-68     	; 0x286c <operation_perform+0x6a>
    28b0:	40 c0       	rjmp	.+128    	; 0x2932 <operation_perform+0x130>
			operationsHolder[j-1]=operationsHolder[j];
			operandsCounter--;
			operationsCounter--;
			i--;
		}
		else if(operationsHolder[i]=='/'){
    28b2:	ef 32       	cpi	r30, 0x2F	; 47
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <operation_perform+0xb6>
    28b6:	46 c0       	rjmp	.+140    	; 0x2944 <operation_perform+0x142>
			operandsHolder[i]/=operandsHolder[i+1];
    28b8:	aa 0f       	add	r26, r26
    28ba:	bb 1f       	adc	r27, r27
    28bc:	aa 0f       	add	r26, r26
    28be:	bb 1f       	adc	r27, r27
    28c0:	8d 01       	movw	r16, r26
    28c2:	0a 53       	subi	r16, 0x3A	; 58
    28c4:	1e 4f       	sbci	r17, 0xFE	; 254
    28c6:	a6 53       	subi	r26, 0x36	; 54
    28c8:	be 4f       	sbci	r27, 0xFE	; 254
    28ca:	f8 01       	movw	r30, r16
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	2d 91       	ld	r18, X+
    28d6:	3d 91       	ld	r19, X+
    28d8:	4d 91       	ld	r20, X+
    28da:	5c 91       	ld	r21, X
    28dc:	0e 94 9a 03 	call	0x734	; 0x734 <__divsf3>
    28e0:	f8 01       	movw	r30, r16
    28e2:	60 83       	st	Z, r22
    28e4:	71 83       	std	Z+1, r23	; 0x01
    28e6:	82 83       	std	Z+2, r24	; 0x02
    28e8:	93 83       	std	Z+3, r25	; 0x03
			u8 j;
			for(j=i+1;j<operationsCounter;j++){
    28ea:	6f 2d       	mov	r22, r15
    28ec:	1d c0       	rjmp	.+58     	; 0x2928 <operation_perform+0x126>
				operandsHolder[j]=operandsHolder[j+1];
    28ee:	9a 01       	movw	r18, r20
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	2a 53       	subi	r18, 0x3A	; 58
    28fa:	3e 4f       	sbci	r19, 0xFE	; 254
    28fc:	fa 01       	movw	r30, r20
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	e6 53       	subi	r30, 0x36	; 54
    2908:	fe 4f       	sbci	r31, 0xFE	; 254
    290a:	80 81       	ld	r24, Z
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	a2 81       	ldd	r26, Z+2	; 0x02
    2910:	b3 81       	ldd	r27, Z+3	; 0x03
    2912:	f9 01       	movw	r30, r18
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
				operationsHolder[j-1]=operationsHolder[j];
    291c:	fa 01       	movw	r30, r20
    291e:	e9 5e       	subi	r30, 0xE9	; 233
    2920:	fd 4f       	sbci	r31, 0xFD	; 253
    2922:	80 81       	ld	r24, Z
    2924:	31 97       	sbiw	r30, 0x01	; 1
    2926:	80 83       	st	Z, r24
			i--;
		}
		else if(operationsHolder[i]=='/'){
			operandsHolder[i]/=operandsHolder[i+1];
			u8 j;
			for(j=i+1;j<operationsCounter;j++){
    2928:	6f 5f       	subi	r22, 0xFF	; 255
    292a:	46 2f       	mov	r20, r22
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	6e 15       	cp	r22, r14
    2930:	f0 f2       	brcs	.-68     	; 0x28ee <operation_perform+0xec>
				operandsHolder[j]=operandsHolder[j+1];
				operationsHolder[j-1]=operationsHolder[j];
			}
			operationsHolder[j-1]=operationsHolder[j];
    2932:	fa 01       	movw	r30, r20
    2934:	e9 5e       	subi	r30, 0xE9	; 233
    2936:	fd 4f       	sbci	r31, 0xFD	; 253
    2938:	80 81       	ld	r24, Z
    293a:	31 97       	sbiw	r30, 0x01	; 1
    293c:	80 83       	st	Z, r24
			operandsCounter--;
    293e:	da 94       	dec	r13
			operationsCounter--;
    2940:	ea 94       	dec	r14
			i--;
    2942:	fa 94       	dec	r15
	}
}
//Name: "Calculating the result" part. Function: It calculates the whole operation entered by the user.
void operation_perform(void){

	for(u8 i=0;i<=operationsCounter && endIndicatorFlag;i++){				//This for loop handles multiplication and division operations and produces a new operandsHodler array with the results of multiplying and dividing the operands, and a new operationsHolder array without any multiplication and division operations.
    2944:	f3 94       	inc	r15
    2946:	ef 14       	cp	r14, r15
    2948:	18 f0       	brcs	.+6      	; 0x2950 <operation_perform+0x14e>
    294a:	cc 20       	and	r12, r12
    294c:	09 f0       	breq	.+2      	; 0x2950 <operation_perform+0x14e>
    294e:	6b cf       	rjmp	.-298    	; 0x2826 <operation_perform+0x24>
    2950:	d0 92 c5 01 	sts	0x01C5, r13
    2954:	e0 92 16 02 	sts	0x0216, r14
			operandsCounter--;
			operationsCounter--;
			i--;
		}
	}
	result=operandsHolder[0];						//Equate the result variable to the first element in the operands array.
    2958:	80 91 c6 01 	lds	r24, 0x01C6
    295c:	90 91 c7 01 	lds	r25, 0x01C7
    2960:	a0 91 c8 01 	lds	r26, 0x01C8
    2964:	b0 91 c9 01 	lds	r27, 0x01C9
    2968:	80 93 3e 02 	sts	0x023E, r24
    296c:	90 93 3f 02 	sts	0x023F, r25
    2970:	a0 93 40 02 	sts	0x0240, r26
    2974:	b0 93 41 02 	sts	0x0241, r27
    2978:	99 24       	eor	r9, r9
			}
			else{
				LCD_WriteNumber_floatingPoint(result);
				UART_SendNumber_floatingPoint_Polling(result);
			}
			clearLCDFlag=1;											//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
    297a:	88 24       	eor	r8, r8
    297c:	83 94       	inc	r8
    297e:	a6 c0       	rjmp	.+332    	; 0x2acc <operation_perform+0x2ca>
		}
	}
	result=operandsHolder[0];						//Equate the result variable to the first element in the operands array.

	for(u8 i=0;i<=operationsCounter && endIndicatorFlag;i++){				//This for loop handles the addition and subtraction and calculates and displays the result.
		if(operationsHolder[i]=='+'){
    2980:	a9 2d       	mov	r26, r9
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	fd 01       	movw	r30, r26
    2986:	e9 5e       	subi	r30, 0xE9	; 233
    2988:	fd 4f       	sbci	r31, 0xFD	; 253
    298a:	e0 81       	ld	r30, Z
    298c:	eb 32       	cpi	r30, 0x2B	; 43
    298e:	a9 f4       	brne	.+42     	; 0x29ba <operation_perform+0x1b8>
			result+=operandsHolder[i+1];
    2990:	aa 0f       	add	r26, r26
    2992:	bb 1f       	adc	r27, r27
    2994:	aa 0f       	add	r26, r26
    2996:	bb 1f       	adc	r27, r27
    2998:	a6 53       	subi	r26, 0x36	; 54
    299a:	be 4f       	sbci	r27, 0xFE	; 254
    299c:	60 91 3e 02 	lds	r22, 0x023E
    29a0:	70 91 3f 02 	lds	r23, 0x023F
    29a4:	80 91 40 02 	lds	r24, 0x0240
    29a8:	90 91 41 02 	lds	r25, 0x0241
    29ac:	2d 91       	ld	r18, X+
    29ae:	3d 91       	ld	r19, X+
    29b0:	4d 91       	ld	r20, X+
    29b2:	5c 91       	ld	r21, X
    29b4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3>
    29b8:	16 c0       	rjmp	.+44     	; 0x29e6 <operation_perform+0x1e4>
		}
		else if(operationsHolder[i]=='-'){
    29ba:	ed 32       	cpi	r30, 0x2D	; 45
    29bc:	e9 f4       	brne	.+58     	; 0x29f8 <operation_perform+0x1f6>
			result-=operandsHolder[i+1];
    29be:	aa 0f       	add	r26, r26
    29c0:	bb 1f       	adc	r27, r27
    29c2:	aa 0f       	add	r26, r26
    29c4:	bb 1f       	adc	r27, r27
    29c6:	a6 53       	subi	r26, 0x36	; 54
    29c8:	be 4f       	sbci	r27, 0xFE	; 254
    29ca:	60 91 3e 02 	lds	r22, 0x023E
    29ce:	70 91 3f 02 	lds	r23, 0x023F
    29d2:	80 91 40 02 	lds	r24, 0x0240
    29d6:	90 91 41 02 	lds	r25, 0x0241
    29da:	2d 91       	ld	r18, X+
    29dc:	3d 91       	ld	r19, X+
    29de:	4d 91       	ld	r20, X+
    29e0:	5c 91       	ld	r21, X
    29e2:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    29e6:	60 93 3e 02 	sts	0x023E, r22
    29ea:	70 93 3f 02 	sts	0x023F, r23
    29ee:	80 93 40 02 	sts	0x0240, r24
    29f2:	90 93 41 02 	sts	0x0241, r25
    29f6:	69 c0       	rjmp	.+210    	; 0x2aca <operation_perform+0x2c8>
		}
		else if(operationsHolder[i]=='='){
    29f8:	ed 33       	cpi	r30, 0x3D	; 61
    29fa:	09 f0       	breq	.+2      	; 0x29fe <operation_perform+0x1fc>
    29fc:	66 c0       	rjmp	.+204    	; 0x2aca <operation_perform+0x2c8>
			//etba3 el result.
			LCD_SendCommand(LCD_COM_HOME);
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
			LCD_SendCommand(LCD_COM_SET_CURSOR_SECOND_LINE);
    2a04:	80 ec       	ldi	r24, 0xC0	; 192
    2a06:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
			UART_SendChar_Polling('H');
    2a0a:	88 e4       	ldi	r24, 0x48	; 72
    2a0c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
			UART_SendChar_Polling('S');
    2a10:	83 e5       	ldi	r24, 0x53	; 83
    2a12:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
			if(result>2147483647 || result<-2147483648){
    2a16:	e0 90 3e 02 	lds	r14, 0x023E
    2a1a:	f0 90 3f 02 	lds	r15, 0x023F
    2a1e:	00 91 40 02 	lds	r16, 0x0240
    2a22:	10 91 41 02 	lds	r17, 0x0241
    2a26:	c8 01       	movw	r24, r16
    2a28:	b7 01       	movw	r22, r14
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	5f e4       	ldi	r21, 0x4F	; 79
    2a32:	0e 94 a6 04 	call	0x94c	; 0x94c <__gtsf2>
    2a36:	18 16       	cp	r1, r24
    2a38:	54 f0       	brlt	.+20     	; 0x2a4e <operation_perform+0x24c>
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	5f ec       	ldi	r21, 0xCF	; 207
    2a46:	0e 94 06 05 	call	0xa0c	; 0xa0c <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	2c f4       	brge	.+10     	; 0x2a58 <operation_perform+0x256>
				error_report("VariableOverflow");
    2a4e:	81 e7       	ldi	r24, 0x71	; 113
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 de 13 	call	0x27bc	; 0x27bc <error_report>
    2a56:	35 c0       	rjmp	.+106    	; 0x2ac2 <operation_perform+0x2c0>
			}
			else if((result-(s32)result)==0){							//This condition checks the decimal part of the result .. if it is 0 then no need to print ".0" in the result.
    2a58:	c8 01       	movw	r24, r16
    2a5a:	b7 01       	movw	r22, r14
    2a5c:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    2a60:	5b 01       	movw	r10, r22
    2a62:	6c 01       	movw	r12, r24
    2a64:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
    2a68:	9b 01       	movw	r18, r22
    2a6a:	ac 01       	movw	r20, r24
    2a6c:	c8 01       	movw	r24, r16
    2a6e:	b7 01       	movw	r22, r14
    2a70:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	0e 94 46 04 	call	0x88c	; 0x88c <__eqsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	89 f4       	brne	.+34     	; 0x2aa6 <operation_perform+0x2a4>
				LCD_WriteNumber((s32)result);
    2a84:	c6 01       	movw	r24, r12
    2a86:	b5 01       	movw	r22, r10
    2a88:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <LCD_WriteNumber>
				UART_SendNumber_Polling(result);
    2a8c:	60 91 3e 02 	lds	r22, 0x023E
    2a90:	70 91 3f 02 	lds	r23, 0x023F
    2a94:	80 91 40 02 	lds	r24, 0x0240
    2a98:	90 91 41 02 	lds	r25, 0x0241
    2a9c:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    2aa0:	0e 94 76 08 	call	0x10ec	; 0x10ec <UART_SendNumber_Polling>
    2aa4:	0e c0       	rjmp	.+28     	; 0x2ac2 <operation_perform+0x2c0>
			}
			else{
				LCD_WriteNumber_floatingPoint(result);
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_WriteNumber_floatingPoint>
				UART_SendNumber_floatingPoint_Polling(result);
    2aae:	60 91 3e 02 	lds	r22, 0x023E
    2ab2:	70 91 3f 02 	lds	r23, 0x023F
    2ab6:	80 91 40 02 	lds	r24, 0x0240
    2aba:	90 91 41 02 	lds	r25, 0x0241
    2abe:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <UART_SendNumber_floatingPoint_Polling>
			}
			clearLCDFlag=1;											//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
    2ac2:	80 92 43 02 	sts	0x0243, r8
			reset_calculator();
    2ac6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <reset_calculator>
			i--;
		}
	}
	result=operandsHolder[0];						//Equate the result variable to the first element in the operands array.

	for(u8 i=0;i<=operationsCounter && endIndicatorFlag;i++){				//This for loop handles the addition and subtraction and calculates and displays the result.
    2aca:	93 94       	inc	r9
    2acc:	80 91 16 02 	lds	r24, 0x0216
    2ad0:	89 15       	cp	r24, r9
    2ad2:	28 f0       	brcs	.+10     	; 0x2ade <operation_perform+0x2dc>
    2ad4:	80 91 42 02 	lds	r24, 0x0242
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f0       	breq	.+2      	; 0x2ade <operation_perform+0x2dc>
    2adc:	51 cf       	rjmp	.-350    	; 0x2980 <operation_perform+0x17e>
			}
			clearLCDFlag=1;											//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
			reset_calculator();
		}
	}
}
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	bf 90       	pop	r11
    2aec:	af 90       	pop	r10
    2aee:	9f 90       	pop	r9
    2af0:	8f 90       	pop	r8
    2af2:	08 95       	ret

00002af4 <inputs_store_and_display>:
}

//Name: "Inputs store and display" part. Function: It handles storing all the inputs from the user into two arrays; operansdHolder and operationsHolder.
//Also clears the LCD if AC button is pressed for a long time, and deletes the last entered character if it is pressed for a short time.
//It also handles some error that may happen by wrong sequence of inputs or out of variable and LCD limits.
void inputs_store_and_display(void){
    2af4:	2f 92       	push	r2
    2af6:	3f 92       	push	r3
    2af8:	4f 92       	push	r4
    2afa:	5f 92       	push	r5
    2afc:	6f 92       	push	r6
    2afe:	7f 92       	push	r7
    2b00:	8f 92       	push	r8
    2b02:	9f 92       	push	r9
    2b04:	af 92       	push	r10
    2b06:	bf 92       	push	r11
    2b08:	cf 92       	push	r12
    2b0a:	df 92       	push	r13
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
    2b12:	1f 93       	push	r17
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
				negativeNumberFlag=0;
			}

			operandHolder=0;												//reset everything related to the "input digit or decimal point" part.
			decimalHolder=0;
			fractionalCounter=1;
    2b18:	f1 e0       	ldi	r31, 0x01	; 1
    2b1a:	2f 2e       	mov	r2, r31
    2b1c:	31 2c       	mov	r3, r1
    2b1e:	41 2c       	mov	r4, r1
    2b20:	51 2c       	mov	r5, r1
				sequenceCorrectFlag=0;										//To prevent entering two operations (except for minus) after each other.
			}

			if(inputsCounter>=40){											//This condition is for if the user tried to enter another operation after the limit of the LCD (40), if so prints "Limit reached and then resets the calculator.
				error_report("LCD Limit Exceed");
				clearLCDFlag=1;												//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
    2b22:	77 24       	eor	r7, r7
    2b24:	73 94       	inc	r7
			}

			operandHolder=0;												//reset everything related to the "input digit or decimal point" part.
			decimalHolder=0;
			fractionalCounter=1;
			operationsHolder[operationsCounter]=input;						//Save the new operation in the operationsHolder array.
    2b26:	ed e3       	ldi	r30, 0x3D	; 61
    2b28:	6e 2e       	mov	r6, r30
    2b2a:	fb c4       	rjmp	.+2550   	; 0x3522 <inputs_store_and_display+0xa2e>
//Also clears the LCD if AC button is pressed for a long time, and deletes the last entered character if it is pressed for a short time.
//It also handles some error that may happen by wrong sequence of inputs or out of variable and LCD limits.
void inputs_store_and_display(void){
	while(!endIndicatorFlag){												//!endIndicatorFlag states that the user did not finish entering the whole operation (didn't press =) .
		while(!input || input==255){										//This condition checks if nothing is entered yet.
			input = KEYPAD_GetPressedKey();									//If nothing is entered keep checking on the keypad.
    2b2c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <KEYPAD_GetPressedKey>
    2b30:	80 93 bb 01 	sts	0x01BB, r24
//Name: "Inputs store and display" part. Function: It handles storing all the inputs from the user into two arrays; operansdHolder and operationsHolder.
//Also clears the LCD if AC button is pressed for a long time, and deletes the last entered character if it is pressed for a short time.
//It also handles some error that may happen by wrong sequence of inputs or out of variable and LCD limits.
void inputs_store_and_display(void){
	while(!endIndicatorFlag){												//!endIndicatorFlag states that the user did not finish entering the whole operation (didn't press =) .
		while(!input || input==255){										//This condition checks if nothing is entered yet.
    2b34:	80 91 bb 01 	lds	r24, 0x01BB
    2b38:	81 50       	subi	r24, 0x01	; 1
    2b3a:	8e 3f       	cpi	r24, 0xFE	; 254
    2b3c:	b8 f7       	brcc	.-18     	; 0x2b2c <inputs_store_and_display+0x38>
			input = KEYPAD_GetPressedKey();									//If nothing is entered keep checking on the keypad.
		}
		if(clearLCDFlag){													//This condition clears the LCD if an operation is finished (the result or an error is displayed) then a new number is entered (without pressing the AC button).
    2b3e:	80 91 43 02 	lds	r24, 0x0243
    2b42:	88 23       	and	r24, r24
    2b44:	21 f0       	breq	.+8      	; 0x2b4e <inputs_store_and_display+0x5a>
																			//Note: after finishing the operation the endIndicatorFlag is reset again.
			clear_LCD();
    2b46:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear_LCD>
			clearLCDFlag=0;
    2b4a:	10 92 43 02 	sts	0x0243, r1
		}
		//Name: "Reset Calculator" part. Function: It handles the long press on the AC button, it resets the calculator and clears the LCD no matter what is going on (has the highest priority).
		if(input=='A'){
    2b4e:	90 90 bb 01 	lds	r9, 0x01BB
    2b52:	21 e4       	ldi	r18, 0x41	; 65
    2b54:	92 16       	cp	r9, r18
    2b56:	29 f4       	brne	.+10     	; 0x2b62 <inputs_store_and_display+0x6e>
			reset_calculator();
    2b58:	0e 94 69 13 	call	0x26d2	; 0x26d2 <reset_calculator>
			clear_LCD();
    2b5c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear_LCD>
    2b60:	de c4       	rjmp	.+2492   	; 0x351e <inputs_store_and_display+0xa2a>
		}

		//Name: "Input digit or decimal point" part. Function: It handles forming the whole number from the digits entered by the user, also handles entering a decimal point and recognizing the number as a decimal number. It is divided to two partitions.
		//Name: "Input digit" partition.
		else if(input>=48 && input <=57){					//Checks if the input is a number (0 to 9).
    2b62:	89 2d       	mov	r24, r9
    2b64:	80 53       	subi	r24, 0x30	; 48
    2b66:	8a 30       	cpi	r24, 0x0A	; 10
    2b68:	08 f0       	brcs	.+2      	; 0x2b6c <inputs_store_and_display+0x78>
    2b6a:	99 c0       	rjmp	.+306    	; 0x2c9e <inputs_store_and_display+0x1aa>
			sequenceCorrectFlag=1;
    2b6c:	70 92 44 02 	sts	0x0244, r7
				//sequenceCorrectFlag is set when an operand is entered and is reset when an operation is entered. Its kept as it is if a decimal point or a negative sign is entered. Here is an example to clarify it.
				//initially SCF is 0, so if you press = without entering anything it gives you syntax error. Entering a digit (2 for example) then SCF is 1, now there are three cases; entering another digit: in which case SCF keeps its value and no error.
				//Second case is entering an operation (+ for example): in which case SCF changed to 0. From now there are two cases: entering a number so SCF changes to 1 and operation is correct, or entering another operation and operation gives an error because of two occurunces of SCF = 0 successively.
				//Third case is entering an equal (=): in which case SCF is checked and if equal zero an error counter incremented by 1 and an error would be displayed on the LCD (if not deleted).

			inputsCounter++;												//This counter counts all the inputs entered by the user (its also used as an index to arrays as it acts as an indicator to the position of the inputs).
    2b70:	80 91 bc 01 	lds	r24, 0x01BC
    2b74:	8f 5f       	subi	r24, 0xFF	; 255
    2b76:	80 93 bc 01 	sts	0x01BC, r24

			LCD_WriteChar(input);											//print and send the input digit.
    2b7a:	89 2d       	mov	r24, r9
    2b7c:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
			UART_SendChar_Polling(input);
    2b80:	80 91 bb 01 	lds	r24, 0x01BB
    2b84:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>

			if((operandHolder>=100000000 && !decimalNumberFlag) || decimalHolder>=100000000){		//This condition checks if the user input exceeds the maximum value that u32 can hold, if so prints "Limit Reached" and then resets the calculator.
    2b88:	80 91 bd 01 	lds	r24, 0x01BD
    2b8c:	90 91 be 01 	lds	r25, 0x01BE
    2b90:	a0 91 bf 01 	lds	r26, 0x01BF
    2b94:	b0 91 c0 01 	lds	r27, 0x01C0
    2b98:	80 50       	subi	r24, 0x00	; 0
    2b9a:	91 4e       	sbci	r25, 0xE1	; 225
    2b9c:	a5 4f       	sbci	r26, 0xF5	; 245
    2b9e:	b5 40       	sbci	r27, 0x05	; 5
    2ba0:	20 f0       	brcs	.+8      	; 0x2baa <inputs_store_and_display+0xb6>
    2ba2:	80 91 6e 02 	lds	r24, 0x026E
    2ba6:	88 23       	and	r24, r24
    2ba8:	69 f0       	breq	.+26     	; 0x2bc4 <inputs_store_and_display+0xd0>
    2baa:	80 91 c1 01 	lds	r24, 0x01C1
    2bae:	90 91 c2 01 	lds	r25, 0x01C2
    2bb2:	a0 91 c3 01 	lds	r26, 0x01C3
    2bb6:	b0 91 c4 01 	lds	r27, 0x01C4
    2bba:	80 50       	subi	r24, 0x00	; 0
    2bbc:	91 4e       	sbci	r25, 0xE1	; 225
    2bbe:	a5 4f       	sbci	r26, 0xF5	; 245
    2bc0:	b5 40       	sbci	r27, 0x05	; 5
    2bc2:	18 f0       	brcs	.+6      	; 0x2bca <inputs_store_and_display+0xd6>
				error_report("VariableOverflow");
    2bc4:	81 e7       	ldi	r24, 0x71	; 113
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	d4 c2       	rjmp	.+1448   	; 0x3172 <inputs_store_and_display+0x67e>
				clearLCDFlag=1;												//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
				reset_calculator();											//This method resets input=0 (this is a null character), so doesn't matter if i print it on LCD at the end of the method.
			}
			else {
				if(inputsCounter>15){										//If the input count is more than 16 (which is the maximum that my LCD can display at a time), shift the display to the left.
    2bca:	80 91 bc 01 	lds	r24, 0x01BC
    2bce:	80 31       	cpi	r24, 0x10	; 16
    2bd0:	30 f0       	brcs	.+12     	; 0x2bde <inputs_store_and_display+0xea>
					LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
    2bd2:	88 e1       	ldi	r24, 0x18	; 24
    2bd4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
					UART_SendChar_Polling('L');
    2bd8:	8c e4       	ldi	r24, 0x4C	; 76
    2bda:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
				}
				if(!decimalNumberFlag){
    2bde:	80 91 6e 02 	lds	r24, 0x026E
    2be2:	e0 90 bb 01 	lds	r14, 0x01BB
    2be6:	88 23       	and	r24, r24
    2be8:	21 f5       	brne	.+72     	; 0x2c32 <inputs_store_and_display+0x13e>
					operandHolder=operandHolder*10+(u32)(input-48);			//Forming the integer part of the number (the newest digit is the least significant digit).
    2bea:	ff 24       	eor	r15, r15
    2bec:	80 ed       	ldi	r24, 0xD0	; 208
    2bee:	9f ef       	ldi	r25, 0xFF	; 255
    2bf0:	e8 0e       	add	r14, r24
    2bf2:	f9 1e       	adc	r15, r25
    2bf4:	00 27       	eor	r16, r16
    2bf6:	f7 fc       	sbrc	r15, 7
    2bf8:	00 95       	com	r16
    2bfa:	10 2f       	mov	r17, r16
    2bfc:	60 91 bd 01 	lds	r22, 0x01BD
    2c00:	70 91 be 01 	lds	r23, 0x01BE
    2c04:	80 91 bf 01 	lds	r24, 0x01BF
    2c08:	90 91 c0 01 	lds	r25, 0x01C0
    2c0c:	2a e0       	ldi	r18, 0x0A	; 10
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    2c18:	e6 0e       	add	r14, r22
    2c1a:	f7 1e       	adc	r15, r23
    2c1c:	08 1f       	adc	r16, r24
    2c1e:	19 1f       	adc	r17, r25
    2c20:	e0 92 bd 01 	sts	0x01BD, r14
    2c24:	f0 92 be 01 	sts	0x01BE, r15
    2c28:	00 93 bf 01 	sts	0x01BF, r16
    2c2c:	10 93 c0 01 	sts	0x01C0, r17
    2c30:	99 c2       	rjmp	.+1330   	; 0x3164 <inputs_store_and_display+0x670>
				}
				else {														//If decimalNumberFlag=1, this means that a decimal point was entered before, so the input is a fractional number.
					decimalHolder=decimalHolder*10+(u32)(input-48);			//Forming the fractional part of the number (the newest digit is the least significant digit).
    2c32:	ff 24       	eor	r15, r15
    2c34:	20 ed       	ldi	r18, 0xD0	; 208
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	e2 0e       	add	r14, r18
    2c3a:	f3 1e       	adc	r15, r19
    2c3c:	00 27       	eor	r16, r16
    2c3e:	f7 fc       	sbrc	r15, 7
    2c40:	00 95       	com	r16
    2c42:	10 2f       	mov	r17, r16
    2c44:	60 91 c1 01 	lds	r22, 0x01C1
    2c48:	70 91 c2 01 	lds	r23, 0x01C2
    2c4c:	80 91 c3 01 	lds	r24, 0x01C3
    2c50:	90 91 c4 01 	lds	r25, 0x01C4
    2c54:	2a e0       	ldi	r18, 0x0A	; 10
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    2c60:	e6 0e       	add	r14, r22
    2c62:	f7 1e       	adc	r15, r23
    2c64:	08 1f       	adc	r16, r24
    2c66:	19 1f       	adc	r17, r25
    2c68:	e0 92 c1 01 	sts	0x01C1, r14
    2c6c:	f0 92 c2 01 	sts	0x01C2, r15
    2c70:	00 93 c3 01 	sts	0x01C3, r16
    2c74:	10 93 c4 01 	sts	0x01C4, r17
					fractionalCounter*=10;									//Counts the fractional part of the number in tens, so that when we can divide the decimalHolder by this count and add it to the operandHolder to form the number the user intended.
    2c78:	60 91 97 01 	lds	r22, 0x0197
    2c7c:	70 91 98 01 	lds	r23, 0x0198
    2c80:	80 91 99 01 	lds	r24, 0x0199
    2c84:	90 91 9a 01 	lds	r25, 0x019A
    2c88:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    2c8c:	60 93 97 01 	sts	0x0197, r22
    2c90:	70 93 98 01 	sts	0x0198, r23
    2c94:	80 93 99 01 	sts	0x0199, r24
    2c98:	90 93 9a 01 	sts	0x019A, r25
    2c9c:	63 c2       	rjmp	.+1222   	; 0x3164 <inputs_store_and_display+0x670>
					reset_calculator();										//This method resets input=0 (this is a null character), so doesn't matter if i print it on LCD at the end of the method.
				}
			}
		}
		//Name: "Input decimal point" partition.
		else if(input=='D'){												//Checks if the input is a decimal point. 'D' in the keypad driver resembles the '.'.
    2c9e:	34 e4       	ldi	r19, 0x44	; 68
    2ca0:	93 16       	cp	r9, r19
    2ca2:	89 f5       	brne	.+98     	; 0x2d06 <inputs_store_and_display+0x212>
			sequenceCorrectFlag=1;
    2ca4:	70 92 44 02 	sts	0x0244, r7
			inputsCounter++;
    2ca8:	80 91 bc 01 	lds	r24, 0x01BC
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	80 93 bc 01 	sts	0x01BC, r24

			LCD_WriteChar('.');												//print and send the input digit.
    2cb2:	8e e2       	ldi	r24, 0x2E	; 46
    2cb4:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
			UART_SendChar_Polling('.');
    2cb8:	8e e2       	ldi	r24, 0x2E	; 46
    2cba:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>

			if(!decimalNumberFlag){											//If the decimalNumberFlag=0 then there has been no decimal point entered before in this number.
    2cbe:	80 91 6e 02 	lds	r24, 0x026E
    2cc2:	88 23       	and	r24, r24
    2cc4:	19 f4       	brne	.+6      	; 0x2ccc <inputs_store_and_display+0x1d8>
				decimalNumberFlag=1;
    2cc6:	70 92 6e 02 	sts	0x026E, r7
    2cca:	0b c0       	rjmp	.+22     	; 0x2ce2 <inputs_store_and_display+0x1ee>
			}
			else {															//If decimalNumberFlag=1 already then a decimal point has been entered before, hence increase the wrong input counter and put its position (inputsCounter) in array.
				wrongInputCounter++;
    2ccc:	80 91 45 02 	lds	r24, 0x0245
    2cd0:	8f 5f       	subi	r24, 0xFF	; 255
    2cd2:	80 93 45 02 	sts	0x0245, r24
				wrongInputPosition[inputsCounter]=1;
    2cd6:	e0 91 bc 01 	lds	r30, 0x01BC
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	ea 56       	subi	r30, 0x6A	; 106
    2cde:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce0:	70 82       	st	Z, r7
			}
			decimalPointPosition[inputsCounter]=1;							//Add this decimal's point position to the decimal point array.
    2ce2:	80 91 bc 01 	lds	r24, 0x01BC
    2ce6:	e8 2f       	mov	r30, r24
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	e1 59       	subi	r30, 0x91	; 145
    2cec:	fd 4f       	sbci	r31, 0xFD	; 253
    2cee:	70 82       	st	Z, r7

			if(inputsCounter>=40){											//This condition is for if the user tried to enter another digit after the limit of the LCD (40), if so prints "Limit reached and then resets the calculator.
    2cf0:	88 32       	cpi	r24, 0x28	; 40
    2cf2:	08 f0       	brcs	.+2      	; 0x2cf6 <inputs_store_and_display+0x202>
    2cf4:	3c c2       	rjmp	.+1144   	; 0x316e <inputs_store_and_display+0x67a>
				error_report("LCD Limit Exceed");
				clearLCDFlag=1;												//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
				reset_calculator();											//This method resets input=0 (this is a null character), so doesn't matter if i print it on LCD at the end of the method.
			}
			else if(inputsCounter>15){										//If the input count is more than 16 (which is the maximum that my LCD can display at a time), shift the display to the left.
    2cf6:	80 31       	cpi	r24, 0x10	; 16
    2cf8:	08 f4       	brcc	.+2      	; 0x2cfc <inputs_store_and_display+0x208>
    2cfa:	11 c4       	rjmp	.+2082   	; 0x351e <inputs_store_and_display+0xa2a>
				LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
    2cfc:	88 e1       	ldi	r24, 0x18	; 24
    2cfe:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
				UART_SendChar_Polling('L');
    2d02:	8c e4       	ldi	r24, 0x4C	; 76
    2d04:	0a c4       	rjmp	.+2068   	; 0x351a <inputs_store_and_display+0xa26>
			}
		}
		//Name: "Input operation" part. Function: It handles entering an operation (+,x,/) excluding subtraction.
		else if((input=='+'||input=='x'||input=='/')){						//Checks if the input is an operation.
    2d06:	4b e2       	ldi	r20, 0x2B	; 43
    2d08:	94 16       	cp	r9, r20
    2d0a:	39 f0       	breq	.+14     	; 0x2d1a <inputs_store_and_display+0x226>
    2d0c:	58 e7       	ldi	r21, 0x78	; 120
    2d0e:	95 16       	cp	r9, r21
    2d10:	21 f0       	breq	.+8      	; 0x2d1a <inputs_store_and_display+0x226>
    2d12:	8f e2       	ldi	r24, 0x2F	; 47
    2d14:	98 16       	cp	r9, r24
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <inputs_store_and_display+0x226>
    2d18:	aa c0       	rjmp	.+340    	; 0x2e6e <inputs_store_and_display+0x37a>
			inputsCounter++;
    2d1a:	80 90 bc 01 	lds	r8, 0x01BC
    2d1e:	83 94       	inc	r8
    2d20:	80 92 bc 01 	sts	0x01BC, r8

			operandsHolder[operandsCounter]=(f32)operandHolder;				//After entering an operation, the number held in operandHolder (which is completed by now because an operation is entered) variable should be saved in the operandsHolder array.
    2d24:	80 91 c5 01 	lds	r24, 0x01C5
    2d28:	c8 2f       	mov	r28, r24
    2d2a:	d0 e0       	ldi	r29, 0x00	; 0
    2d2c:	60 91 bd 01 	lds	r22, 0x01BD
    2d30:	70 91 be 01 	lds	r23, 0x01BE
    2d34:	80 91 bf 01 	lds	r24, 0x01BF
    2d38:	90 91 c0 01 	lds	r25, 0x01C0
    2d3c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    2d40:	5b 01       	movw	r10, r22
    2d42:	6c 01       	movw	r12, r24
    2d44:	cc 0f       	add	r28, r28
    2d46:	dd 1f       	adc	r29, r29
    2d48:	cc 0f       	add	r28, r28
    2d4a:	dd 1f       	adc	r29, r29
    2d4c:	ca 53       	subi	r28, 0x3A	; 58
    2d4e:	de 4f       	sbci	r29, 0xFE	; 254
    2d50:	a8 82       	st	Y, r10
    2d52:	b9 82       	std	Y+1, r11	; 0x01
    2d54:	ca 82       	std	Y+2, r12	; 0x02
    2d56:	db 82       	std	Y+3, r13	; 0x03

			if(decimalNumberFlag){											//If decimalNumberFlag=1 then the number has a fractional part, hence update the saved value in the operandsHolder array by adding the fractional part stored in decimalHolder to it.
    2d58:	80 91 6e 02 	lds	r24, 0x026E
    2d5c:	88 23       	and	r24, r24
    2d5e:	41 f1       	breq	.+80     	; 0x2db0 <inputs_store_and_display+0x2bc>
				operandsHolder[operandsCounter]+=((f32)decimalHolder/fractionalCounter);		//The importance of fractionalCounter is shown here.
    2d60:	60 91 c1 01 	lds	r22, 0x01C1
    2d64:	70 91 c2 01 	lds	r23, 0x01C2
    2d68:	80 91 c3 01 	lds	r24, 0x01C3
    2d6c:	90 91 c4 01 	lds	r25, 0x01C4
    2d70:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    2d74:	7b 01       	movw	r14, r22
    2d76:	8c 01       	movw	r16, r24
    2d78:	60 91 97 01 	lds	r22, 0x0197
    2d7c:	70 91 98 01 	lds	r23, 0x0198
    2d80:	80 91 99 01 	lds	r24, 0x0199
    2d84:	90 91 9a 01 	lds	r25, 0x019A
    2d88:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    2d8c:	9b 01       	movw	r18, r22
    2d8e:	ac 01       	movw	r20, r24
    2d90:	c8 01       	movw	r24, r16
    2d92:	b7 01       	movw	r22, r14
    2d94:	0e 94 9a 03 	call	0x734	; 0x734 <__divsf3>
    2d98:	9b 01       	movw	r18, r22
    2d9a:	ac 01       	movw	r20, r24
    2d9c:	c6 01       	movw	r24, r12
    2d9e:	b5 01       	movw	r22, r10
    2da0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3>
    2da4:	68 83       	st	Y, r22
    2da6:	79 83       	std	Y+1, r23	; 0x01
    2da8:	8a 83       	std	Y+2, r24	; 0x02
    2daa:	9b 83       	std	Y+3, r25	; 0x03
				decimalNumberFlag=0;
    2dac:	10 92 6e 02 	sts	0x026E, r1
			}

			if(negativeNumberFlag){											//If negativeNumberFlag=1 then the number is negative, hence update the saved value in the operandsHolder array.
    2db0:	80 91 46 02 	lds	r24, 0x0246
    2db4:	88 23       	and	r24, r24
    2db6:	d1 f0       	breq	.+52     	; 0x2dec <inputs_store_and_display+0x2f8>
				operandsHolder[operandsCounter]=(f32)0-operandsHolder[operandsCounter];			//0-operandHolder to get the negative number of the operandHolder as the user entered a negative sign.
    2db8:	20 91 c5 01 	lds	r18, 0x01C5
    2dbc:	c2 2f       	mov	r28, r18
    2dbe:	d0 e0       	ldi	r29, 0x00	; 0
    2dc0:	cc 0f       	add	r28, r28
    2dc2:	dd 1f       	adc	r29, r29
    2dc4:	cc 0f       	add	r28, r28
    2dc6:	dd 1f       	adc	r29, r29
    2dc8:	ca 53       	subi	r28, 0x3A	; 58
    2dca:	de 4f       	sbci	r29, 0xFE	; 254
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	28 81       	ld	r18, Y
    2dd6:	39 81       	ldd	r19, Y+1	; 0x01
    2dd8:	4a 81       	ldd	r20, Y+2	; 0x02
    2dda:	5b 81       	ldd	r21, Y+3	; 0x03
    2ddc:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    2de0:	68 83       	st	Y, r22
    2de2:	79 83       	std	Y+1, r23	; 0x01
    2de4:	8a 83       	std	Y+2, r24	; 0x02
    2de6:	9b 83       	std	Y+3, r25	; 0x03
				negativeNumberFlag=0;
    2de8:	10 92 46 02 	sts	0x0246, r1
			}

			operandHolder=0;												//reset everything related to the "input digit or decimal point" part.
    2dec:	10 92 bd 01 	sts	0x01BD, r1
    2df0:	10 92 be 01 	sts	0x01BE, r1
    2df4:	10 92 bf 01 	sts	0x01BF, r1
    2df8:	10 92 c0 01 	sts	0x01C0, r1
			decimalHolder=0;
    2dfc:	10 92 c1 01 	sts	0x01C1, r1
    2e00:	10 92 c2 01 	sts	0x01C2, r1
    2e04:	10 92 c3 01 	sts	0x01C3, r1
    2e08:	10 92 c4 01 	sts	0x01C4, r1
			fractionalCounter=1;
    2e0c:	20 92 97 01 	sts	0x0197, r2
    2e10:	30 92 98 01 	sts	0x0198, r3
    2e14:	40 92 99 01 	sts	0x0199, r4
    2e18:	50 92 9a 01 	sts	0x019A, r5
			operandsCounter++;
    2e1c:	80 91 c5 01 	lds	r24, 0x01C5
    2e20:	8f 5f       	subi	r24, 0xFF	; 255
    2e22:	80 93 c5 01 	sts	0x01C5, r24
			operationsHolder[operationsCounter]=input;						//Save the new operand in the operationsHolder array.
    2e26:	80 91 16 02 	lds	r24, 0x0216
    2e2a:	e8 2f       	mov	r30, r24
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	e9 5e       	subi	r30, 0xE9	; 233
    2e30:	fd 4f       	sbci	r31, 0xFD	; 253
    2e32:	90 82       	st	Z, r9
			operationsCounter++;
    2e34:	8f 5f       	subi	r24, 0xFF	; 255
    2e36:	80 93 16 02 	sts	0x0216, r24

			if(!sequenceCorrectFlag){										//If the sequence is wrong (last thing entered is an operation).
    2e3a:	80 91 44 02 	lds	r24, 0x0244
    2e3e:	88 23       	and	r24, r24
    2e40:	59 f4       	brne	.+22     	; 0x2e58 <inputs_store_and_display+0x364>
				wrongInputCounter++;
    2e42:	80 91 45 02 	lds	r24, 0x0245
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	80 93 45 02 	sts	0x0245, r24
				wrongInputPosition[inputsCounter]=1;
    2e4c:	e8 2d       	mov	r30, r8
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	ea 56       	subi	r30, 0x6A	; 106
    2e52:	fd 4f       	sbci	r31, 0xFD	; 253
    2e54:	70 82       	st	Z, r7
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <inputs_store_and_display+0x368>
			}
			else {
				sequenceCorrectFlag=0;										//To prevent entering two operations (except for minus) after each other.
    2e58:	10 92 44 02 	sts	0x0244, r1
			}

			if(inputsCounter>=40){											//This condition is for if the user tried to enter another operation after the limit of the LCD (40), if so prints "Limit reached and then resets the calculator.
    2e5c:	97 e2       	ldi	r25, 0x27	; 39
    2e5e:	98 15       	cp	r25, r8
    2e60:	08 f4       	brcc	.+2      	; 0x2e64 <inputs_store_and_display+0x370>
    2e62:	ae c0       	rjmp	.+348    	; 0x2fc0 <inputs_store_and_display+0x4cc>
				error_report("LCD Limit Exceed");
				clearLCDFlag=1;												//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
				reset_calculator();											//This method resets input=0 (this is a null character), so doesn't matter if i print it on LCD at the end of the method.
			}
			else if(inputsCounter>15){										//If the input count is more than 16 (which is the maximum that my LCD can display at a time), shift the display to the left.
    2e64:	2f e0       	ldi	r18, 0x0F	; 15
    2e66:	28 15       	cp	r18, r8
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <inputs_store_and_display+0x378>
    2e6a:	bc c0       	rjmp	.+376    	; 0x2fe4 <inputs_store_and_display+0x4f0>
    2e6c:	b5 c0       	rjmp	.+362    	; 0x2fd8 <inputs_store_and_display+0x4e4>

			LCD_WriteChar(input);
			UART_SendChar_Polling(input);
		}
		//Name: "Input minus sign" part. Function: It handles entering a minus sign (-), to either consider it as a negative for the number or an operation. It is divided to two partitions.
		else if(input=='-'){												//Checks if the input is a minus sign.
    2e6e:	3d e2       	ldi	r19, 0x2D	; 45
    2e70:	93 16       	cp	r9, r19
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <inputs_store_and_display+0x382>
    2e74:	be c0       	rjmp	.+380    	; 0x2ff2 <inputs_store_and_display+0x4fe>
			inputsCounter++;
    2e76:	90 90 bc 01 	lds	r9, 0x01BC
    2e7a:	93 94       	inc	r9
    2e7c:	90 92 bc 01 	sts	0x01BC, r9

			//Name: "Input negative sign" partition.
			if(!sequenceCorrectFlag){										//This condition checks if the minus sign is for a negative number.
    2e80:	80 91 44 02 	lds	r24, 0x0244
    2e84:	88 23       	and	r24, r24
    2e86:	59 f4       	brne	.+22     	; 0x2e9e <inputs_store_and_display+0x3aa>
				negativeNumberFlag^=1;
    2e88:	80 91 46 02 	lds	r24, 0x0246
    2e8c:	87 25       	eor	r24, r7
    2e8e:	80 93 46 02 	sts	0x0246, r24
				negativeSignPosition[inputsCounter]=1;
    2e92:	e9 2d       	mov	r30, r9
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	e9 5b       	subi	r30, 0xB9	; 185
    2e98:	fd 4f       	sbci	r31, 0xFD	; 253
    2e9a:	70 82       	st	Z, r7
    2e9c:	8e c0       	rjmp	.+284    	; 0x2fba <inputs_store_and_display+0x4c6>
			}
			//Name: "Input subtraction sign" partition.
			else {															//This condition checks if the minus sign is for subtraction operation.
				sequenceCorrectFlag=0;										//If it is a subtraction, then do the same process as in addition, mult and division.
    2e9e:	10 92 44 02 	sts	0x0244, r1

				operandsHolder[operandsCounter]=(f32)operandHolder;
    2ea2:	80 91 c5 01 	lds	r24, 0x01C5
    2ea6:	c8 2f       	mov	r28, r24
    2ea8:	d0 e0       	ldi	r29, 0x00	; 0
    2eaa:	60 91 bd 01 	lds	r22, 0x01BD
    2eae:	70 91 be 01 	lds	r23, 0x01BE
    2eb2:	80 91 bf 01 	lds	r24, 0x01BF
    2eb6:	90 91 c0 01 	lds	r25, 0x01C0
    2eba:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    2ebe:	5b 01       	movw	r10, r22
    2ec0:	6c 01       	movw	r12, r24
    2ec2:	cc 0f       	add	r28, r28
    2ec4:	dd 1f       	adc	r29, r29
    2ec6:	cc 0f       	add	r28, r28
    2ec8:	dd 1f       	adc	r29, r29
    2eca:	ca 53       	subi	r28, 0x3A	; 58
    2ecc:	de 4f       	sbci	r29, 0xFE	; 254
    2ece:	68 83       	st	Y, r22
    2ed0:	79 83       	std	Y+1, r23	; 0x01
    2ed2:	8a 83       	std	Y+2, r24	; 0x02
    2ed4:	9b 83       	std	Y+3, r25	; 0x03

				if(decimalNumberFlag){
    2ed6:	80 91 6e 02 	lds	r24, 0x026E
    2eda:	88 23       	and	r24, r24
    2edc:	41 f1       	breq	.+80     	; 0x2f2e <inputs_store_and_display+0x43a>
					operandsHolder[operandsCounter]+=((f32)decimalHolder/fractionalCounter);
    2ede:	60 91 c1 01 	lds	r22, 0x01C1
    2ee2:	70 91 c2 01 	lds	r23, 0x01C2
    2ee6:	80 91 c3 01 	lds	r24, 0x01C3
    2eea:	90 91 c4 01 	lds	r25, 0x01C4
    2eee:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    2ef2:	7b 01       	movw	r14, r22
    2ef4:	8c 01       	movw	r16, r24
    2ef6:	60 91 97 01 	lds	r22, 0x0197
    2efa:	70 91 98 01 	lds	r23, 0x0198
    2efe:	80 91 99 01 	lds	r24, 0x0199
    2f02:	90 91 9a 01 	lds	r25, 0x019A
    2f06:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    2f0a:	9b 01       	movw	r18, r22
    2f0c:	ac 01       	movw	r20, r24
    2f0e:	c8 01       	movw	r24, r16
    2f10:	b7 01       	movw	r22, r14
    2f12:	0e 94 9a 03 	call	0x734	; 0x734 <__divsf3>
    2f16:	9b 01       	movw	r18, r22
    2f18:	ac 01       	movw	r20, r24
    2f1a:	c6 01       	movw	r24, r12
    2f1c:	b5 01       	movw	r22, r10
    2f1e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3>
    2f22:	68 83       	st	Y, r22
    2f24:	79 83       	std	Y+1, r23	; 0x01
    2f26:	8a 83       	std	Y+2, r24	; 0x02
    2f28:	9b 83       	std	Y+3, r25	; 0x03
					decimalNumberFlag=0;
    2f2a:	10 92 6e 02 	sts	0x026E, r1
				}

				if(negativeNumberFlag){
    2f2e:	80 91 46 02 	lds	r24, 0x0246
    2f32:	88 23       	and	r24, r24
    2f34:	d1 f0       	breq	.+52     	; 0x2f6a <inputs_store_and_display+0x476>
					operandsHolder[operandsCounter]=(f32)0-operandsHolder[operandsCounter];		//0-operandHolder to get the negative number of the operandHolder as the user entered a negative sign.
    2f36:	20 91 c5 01 	lds	r18, 0x01C5
    2f3a:	c2 2f       	mov	r28, r18
    2f3c:	d0 e0       	ldi	r29, 0x00	; 0
    2f3e:	cc 0f       	add	r28, r28
    2f40:	dd 1f       	adc	r29, r29
    2f42:	cc 0f       	add	r28, r28
    2f44:	dd 1f       	adc	r29, r29
    2f46:	ca 53       	subi	r28, 0x3A	; 58
    2f48:	de 4f       	sbci	r29, 0xFE	; 254
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	28 81       	ld	r18, Y
    2f54:	39 81       	ldd	r19, Y+1	; 0x01
    2f56:	4a 81       	ldd	r20, Y+2	; 0x02
    2f58:	5b 81       	ldd	r21, Y+3	; 0x03
    2f5a:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    2f5e:	68 83       	st	Y, r22
    2f60:	79 83       	std	Y+1, r23	; 0x01
    2f62:	8a 83       	std	Y+2, r24	; 0x02
    2f64:	9b 83       	std	Y+3, r25	; 0x03
					negativeNumberFlag=0;
    2f66:	10 92 46 02 	sts	0x0246, r1
				}

				operandHolder=0;
    2f6a:	10 92 bd 01 	sts	0x01BD, r1
    2f6e:	10 92 be 01 	sts	0x01BE, r1
    2f72:	10 92 bf 01 	sts	0x01BF, r1
    2f76:	10 92 c0 01 	sts	0x01C0, r1
				decimalHolder=0;
    2f7a:	10 92 c1 01 	sts	0x01C1, r1
    2f7e:	10 92 c2 01 	sts	0x01C2, r1
    2f82:	10 92 c3 01 	sts	0x01C3, r1
    2f86:	10 92 c4 01 	sts	0x01C4, r1
				fractionalCounter=1;
    2f8a:	20 92 97 01 	sts	0x0197, r2
    2f8e:	30 92 98 01 	sts	0x0198, r3
    2f92:	40 92 99 01 	sts	0x0199, r4
    2f96:	50 92 9a 01 	sts	0x019A, r5
				operandsCounter++;
    2f9a:	80 91 c5 01 	lds	r24, 0x01C5
    2f9e:	8f 5f       	subi	r24, 0xFF	; 255
    2fa0:	80 93 c5 01 	sts	0x01C5, r24
				operationsHolder[operationsCounter]=input;
    2fa4:	80 91 16 02 	lds	r24, 0x0216
    2fa8:	e8 2f       	mov	r30, r24
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	e9 5e       	subi	r30, 0xE9	; 233
    2fae:	fd 4f       	sbci	r31, 0xFD	; 253
    2fb0:	4d e2       	ldi	r20, 0x2D	; 45
    2fb2:	40 83       	st	Z, r20
				operationsCounter++;
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	80 93 16 02 	sts	0x0216, r24
			}

			if(inputsCounter>=40){											//This condition is for if the user tried to enter another operation after the limit of the LCD (40), if so prints "Limit reached and then resets the calculator.
    2fba:	57 e2       	ldi	r21, 0x27	; 39
    2fbc:	59 15       	cp	r21, r9
    2fbe:	48 f4       	brcc	.+18     	; 0x2fd2 <inputs_store_and_display+0x4de>
				error_report("LCD Limit Exceed");
    2fc0:	80 e6       	ldi	r24, 0x60	; 96
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 de 13 	call	0x27bc	; 0x27bc <error_report>
				clearLCDFlag=1;												//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
    2fc8:	70 92 43 02 	sts	0x0243, r7
				reset_calculator();											//This method resets input=0 (this is a null character), so doesn't matter if i print it on LCD at the end of the method.
    2fcc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <reset_calculator>
    2fd0:	09 c0       	rjmp	.+18     	; 0x2fe4 <inputs_store_and_display+0x4f0>
			}
			else if(inputsCounter>15){										//If the input count is more than 16 (which is the maximum that my LCD can display at a time), shift the display to the left.
    2fd2:	8f e0       	ldi	r24, 0x0F	; 15
    2fd4:	89 15       	cp	r24, r9
    2fd6:	30 f4       	brcc	.+12     	; 0x2fe4 <inputs_store_and_display+0x4f0>
				LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
    2fd8:	88 e1       	ldi	r24, 0x18	; 24
    2fda:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
				UART_SendChar_Polling('L');
    2fde:	8c e4       	ldi	r24, 0x4C	; 76
    2fe0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
			}
			LCD_WriteChar(input);
    2fe4:	80 91 bb 01 	lds	r24, 0x01BB
    2fe8:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
			UART_SendChar_Polling(input);
    2fec:	80 91 bb 01 	lds	r24, 0x01BB
    2ff0:	94 c2       	rjmp	.+1320   	; 0x351a <inputs_store_and_display+0xa26>
		}
		//Name: "Input equal sign" part. Function: It handles entering an equal sign '=', and proceed to the next part of the code "Calculating the result".
		else if(input=='='){
    2ff2:	9d e3       	ldi	r25, 0x3D	; 61
    2ff4:	99 16       	cp	r9, r25
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <inputs_store_and_display+0x506>
    2ff8:	c3 c0       	rjmp	.+390    	; 0x3180 <inputs_store_and_display+0x68c>
			inputsCounter++;
    2ffa:	90 90 bc 01 	lds	r9, 0x01BC
    2ffe:	93 94       	inc	r9
    3000:	90 92 bc 01 	sts	0x01BC, r9

			operandsHolder[operandsCounter]=(f32)operandHolder;				//After entering =, the number held in operandHolder (which is completed by now because an operation is entered) variable should be saved in the operandsHolder array.
    3004:	80 91 c5 01 	lds	r24, 0x01C5
    3008:	c8 2f       	mov	r28, r24
    300a:	d0 e0       	ldi	r29, 0x00	; 0
    300c:	60 91 bd 01 	lds	r22, 0x01BD
    3010:	70 91 be 01 	lds	r23, 0x01BE
    3014:	80 91 bf 01 	lds	r24, 0x01BF
    3018:	90 91 c0 01 	lds	r25, 0x01C0
    301c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    3020:	5b 01       	movw	r10, r22
    3022:	6c 01       	movw	r12, r24
    3024:	cc 0f       	add	r28, r28
    3026:	dd 1f       	adc	r29, r29
    3028:	cc 0f       	add	r28, r28
    302a:	dd 1f       	adc	r29, r29
    302c:	ca 53       	subi	r28, 0x3A	; 58
    302e:	de 4f       	sbci	r29, 0xFE	; 254
    3030:	68 83       	st	Y, r22
    3032:	79 83       	std	Y+1, r23	; 0x01
    3034:	8a 83       	std	Y+2, r24	; 0x02
    3036:	9b 83       	std	Y+3, r25	; 0x03

			if(decimalNumberFlag){											//If decimalNumberFlag=1 then the number has a fractional part, hence update the saved value in the operandsHolder array by adding the fractional part stored in decimalHolder to it.
    3038:	80 91 6e 02 	lds	r24, 0x026E
    303c:	88 23       	and	r24, r24
    303e:	41 f1       	breq	.+80     	; 0x3090 <inputs_store_and_display+0x59c>
				operandsHolder[operandsCounter]+=((f32)decimalHolder/fractionalCounter);
    3040:	60 91 c1 01 	lds	r22, 0x01C1
    3044:	70 91 c2 01 	lds	r23, 0x01C2
    3048:	80 91 c3 01 	lds	r24, 0x01C3
    304c:	90 91 c4 01 	lds	r25, 0x01C4
    3050:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    3054:	7b 01       	movw	r14, r22
    3056:	8c 01       	movw	r16, r24
    3058:	60 91 97 01 	lds	r22, 0x0197
    305c:	70 91 98 01 	lds	r23, 0x0198
    3060:	80 91 99 01 	lds	r24, 0x0199
    3064:	90 91 9a 01 	lds	r25, 0x019A
    3068:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    306c:	9b 01       	movw	r18, r22
    306e:	ac 01       	movw	r20, r24
    3070:	c8 01       	movw	r24, r16
    3072:	b7 01       	movw	r22, r14
    3074:	0e 94 9a 03 	call	0x734	; 0x734 <__divsf3>
    3078:	9b 01       	movw	r18, r22
    307a:	ac 01       	movw	r20, r24
    307c:	c6 01       	movw	r24, r12
    307e:	b5 01       	movw	r22, r10
    3080:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3>
    3084:	68 83       	st	Y, r22
    3086:	79 83       	std	Y+1, r23	; 0x01
    3088:	8a 83       	std	Y+2, r24	; 0x02
    308a:	9b 83       	std	Y+3, r25	; 0x03
				decimalNumberFlag=0;
    308c:	10 92 6e 02 	sts	0x026E, r1
			}

			if(negativeNumberFlag){											//If negativeNumberFlag=1 then the number is negative, hence update the saved value in the operandsHolder array.
    3090:	80 91 46 02 	lds	r24, 0x0246
    3094:	88 23       	and	r24, r24
    3096:	d1 f0       	breq	.+52     	; 0x30cc <inputs_store_and_display+0x5d8>
				operandsHolder[operandsCounter]=(f32)0-operandsHolder[operandsCounter];		//0-operandHolder to get the negative number of the operandHolder as the user entered a negative sign.
    3098:	20 91 c5 01 	lds	r18, 0x01C5
    309c:	c2 2f       	mov	r28, r18
    309e:	d0 e0       	ldi	r29, 0x00	; 0
    30a0:	cc 0f       	add	r28, r28
    30a2:	dd 1f       	adc	r29, r29
    30a4:	cc 0f       	add	r28, r28
    30a6:	dd 1f       	adc	r29, r29
    30a8:	ca 53       	subi	r28, 0x3A	; 58
    30aa:	de 4f       	sbci	r29, 0xFE	; 254
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	28 81       	ld	r18, Y
    30b6:	39 81       	ldd	r19, Y+1	; 0x01
    30b8:	4a 81       	ldd	r20, Y+2	; 0x02
    30ba:	5b 81       	ldd	r21, Y+3	; 0x03
    30bc:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    30c0:	68 83       	st	Y, r22
    30c2:	79 83       	std	Y+1, r23	; 0x01
    30c4:	8a 83       	std	Y+2, r24	; 0x02
    30c6:	9b 83       	std	Y+3, r25	; 0x03
				negativeNumberFlag=0;
    30c8:	10 92 46 02 	sts	0x0246, r1
			}

			operandHolder=0;												//reset everything related to the "input digit or decimal point" part.
    30cc:	10 92 bd 01 	sts	0x01BD, r1
    30d0:	10 92 be 01 	sts	0x01BE, r1
    30d4:	10 92 bf 01 	sts	0x01BF, r1
    30d8:	10 92 c0 01 	sts	0x01C0, r1
			decimalHolder=0;
    30dc:	10 92 c1 01 	sts	0x01C1, r1
    30e0:	10 92 c2 01 	sts	0x01C2, r1
    30e4:	10 92 c3 01 	sts	0x01C3, r1
    30e8:	10 92 c4 01 	sts	0x01C4, r1
			fractionalCounter=1;
    30ec:	20 92 97 01 	sts	0x0197, r2
    30f0:	30 92 98 01 	sts	0x0198, r3
    30f4:	40 92 99 01 	sts	0x0199, r4
    30f8:	50 92 9a 01 	sts	0x019A, r5
			operationsHolder[operationsCounter]=input;						//Save the new operation in the operationsHolder array.
    30fc:	e0 91 16 02 	lds	r30, 0x0216
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	e9 5e       	subi	r30, 0xE9	; 233
    3104:	fd 4f       	sbci	r31, 0xFD	; 253
    3106:	60 82       	st	Z, r6
			endIndicatorFlag=1;
    3108:	70 92 42 02 	sts	0x0242, r7

			if(inputsCounter>15){											//If the input count is more than 16 (which is the maximum that my LCD can display at a time), shift the display to the left.
    310c:	2f e0       	ldi	r18, 0x0F	; 15
    310e:	29 15       	cp	r18, r9
    3110:	30 f4       	brcc	.+12     	; 0x311e <inputs_store_and_display+0x62a>
				LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
    3112:	88 e1       	ldi	r24, 0x18	; 24
    3114:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
				UART_SendChar_Polling('L');
    3118:	8c e4       	ldi	r24, 0x4C	; 76
    311a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
			}
			LCD_SendCommand(LCD_COM_DISPLAY_ON);							//Remove the blinking cursor when '=' is entered.
    311e:	8c e0       	ldi	r24, 0x0C	; 12
    3120:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
			LCD_WriteChar(input);
    3124:	80 91 bb 01 	lds	r24, 0x01BB
    3128:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_WriteChar>
			UART_SendChar_Polling(input);
    312c:	80 91 bb 01 	lds	r24, 0x01BB
    3130:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
			UART_SendChar_Polling('O');
    3134:	8f e4       	ldi	r24, 0x4F	; 79
    3136:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>

			if(!sequenceCorrectFlag){										//If the sequence is wrong (last thing entered is an operation).
    313a:	80 91 44 02 	lds	r24, 0x0244
    313e:	88 23       	and	r24, r24
    3140:	29 f4       	brne	.+10     	; 0x314c <inputs_store_and_display+0x658>
				wrongInputCounter++;
    3142:	80 91 45 02 	lds	r24, 0x0245
    3146:	8f 5f       	subi	r24, 0xFF	; 255
    3148:	80 93 45 02 	sts	0x0245, r24
			}

			if(wrongInputCounter){											//Finally, if there is more than zero errors, report syntax error.
    314c:	80 91 45 02 	lds	r24, 0x0245
    3150:	88 23       	and	r24, r24
    3152:	41 f0       	breq	.+16     	; 0x3164 <inputs_store_and_display+0x670>
				error_report("Syntax Error");
    3154:	82 e8       	ldi	r24, 0x82	; 130
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 de 13 	call	0x27bc	; 0x27bc <error_report>
				clearLCDFlag=1;
    315c:	70 92 43 02 	sts	0x0243, r7
				reset_calculator();
    3160:	0e 94 69 13 	call	0x26d2	; 0x26d2 <reset_calculator>
			}

			if(inputsCounter>=40){											//This condition is for if the user tried to enter another digit after the limit of the LCD (40), if so prints "Limit reached and then resets the calculator.
    3164:	80 91 bc 01 	lds	r24, 0x01BC
    3168:	88 32       	cpi	r24, 0x28	; 40
    316a:	08 f4       	brcc	.+2      	; 0x316e <inputs_store_and_display+0x67a>
    316c:	d8 c1       	rjmp	.+944    	; 0x351e <inputs_store_and_display+0xa2a>
				error_report("LCD Limit Exceed");
    316e:	80 e6       	ldi	r24, 0x60	; 96
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 de 13 	call	0x27bc	; 0x27bc <error_report>
				clearLCDFlag=1;												//clearLCDFlag clear the LCD on a new number entrance (after the operation is finished and represented on the LCD, the calculator is reset but the LCD is not cleared, if a new number is entered the LCD is cleared).
    3176:	70 92 43 02 	sts	0x0243, r7
				reset_calculator();
    317a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <reset_calculator>
    317e:	cf c1       	rjmp	.+926    	; 0x351e <inputs_store_and_display+0xa2a>
			}
		}

		//Name: "Clear Input" part. Function: It handles the short press on the AC button, it counters the operations done by the last input (undo what the last operation did).
		else if(input=='C'){
    3180:	33 e4       	ldi	r19, 0x43	; 67
    3182:	93 16       	cp	r9, r19
    3184:	09 f0       	breq	.+2      	; 0x3188 <inputs_store_and_display+0x694>
    3186:	cb c1       	rjmp	.+918    	; 0x351e <inputs_store_and_display+0xa2a>
			if(sequenceCorrectFlag){												//If the last input was a digit (number from 0 to 9) or a decimal point, it delete it and counters everything done in the "input digit and decimal point" part.
    3188:	80 91 44 02 	lds	r24, 0x0244
    318c:	88 23       	and	r24, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <inputs_store_and_display+0x69e>
    3190:	bf c0       	rjmp	.+382    	; 0x3310 <inputs_store_and_display+0x81c>
				LCD_DeleteChar();
    3192:	0e 94 a9 12 	call	0x2552	; 0x2552 <LCD_DeleteChar>
				UART_SendChar_Polling('D');
    3196:	84 e4       	ldi	r24, 0x44	; 68
    3198:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>

				if(decimalPointPosition[inputsCounter]){							//If what i am deleting is a decimal point. Counters everything done in the "input digit" partition.
    319c:	d0 90 bc 01 	lds	r13, 0x01BC
    31a0:	cd 2d       	mov	r28, r13
    31a2:	d0 e0       	ldi	r29, 0x00	; 0
    31a4:	fe 01       	movw	r30, r28
    31a6:	e1 59       	subi	r30, 0x91	; 145
    31a8:	fd 4f       	sbci	r31, 0xFD	; 253
    31aa:	80 81       	ld	r24, Z
    31ac:	88 23       	and	r24, r24
    31ae:	09 f1       	breq	.+66     	; 0x31f2 <inputs_store_and_display+0x6fe>
					if(wrongInputPosition[inputsCounter]){							//If what i am deleting is also a wrong input (for example two decimal point after each other or two decimal points in the same number).
    31b0:	fe 01       	movw	r30, r28
    31b2:	ea 56       	subi	r30, 0x6A	; 106
    31b4:	fd 4f       	sbci	r31, 0xFD	; 253
    31b6:	80 81       	ld	r24, Z
    31b8:	88 23       	and	r24, r24
    31ba:	39 f0       	breq	.+14     	; 0x31ca <inputs_store_and_display+0x6d6>
						wrongInputCounter--;										//Delete that there was a wrong input at this position.
    31bc:	80 91 45 02 	lds	r24, 0x0245
    31c0:	81 50       	subi	r24, 0x01	; 1
    31c2:	80 93 45 02 	sts	0x0245, r24
						wrongInputPosition[inputsCounter]=0;
    31c6:	10 82       	st	Z, r1
    31c8:	10 c0       	rjmp	.+32     	; 0x31ea <inputs_store_and_display+0x6f6>
					}
					else {
						decimalNumberFlag=0;										//State the number that is going to be entered is no longer a decimal (because the decimal point was deleted).
    31ca:	10 92 6e 02 	sts	0x026E, r1
						if(!operandHolder){											//If the number held in operandHolder is zero, then set the sequenceCorrect
    31ce:	80 91 bd 01 	lds	r24, 0x01BD
    31d2:	90 91 be 01 	lds	r25, 0x01BE
    31d6:	a0 91 bf 01 	lds	r26, 0x01BF
    31da:	b0 91 c0 01 	lds	r27, 0x01C0
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	a1 05       	cpc	r26, r1
    31e2:	b1 05       	cpc	r27, r1
    31e4:	11 f4       	brne	.+4      	; 0x31ea <inputs_store_and_display+0x6f6>
							sequenceCorrectFlag=0;
    31e6:	10 92 44 02 	sts	0x0244, r1
						}
					}
					decimalPointPosition[inputsCounter]=0;
    31ea:	c1 59       	subi	r28, 0x91	; 145
    31ec:	dd 4f       	sbci	r29, 0xFD	; 253
    31ee:	18 82       	st	Y, r1
    31f0:	8a c0       	rjmp	.+276    	; 0x3306 <inputs_store_and_display+0x812>
				}
				else if(decimalHolder){												//If what i am deleting is a digit in the fractional part of a number (decimalNumberFlag=1).
    31f2:	e0 90 c1 01 	lds	r14, 0x01C1
    31f6:	f0 90 c2 01 	lds	r15, 0x01C2
    31fa:	00 91 c3 01 	lds	r16, 0x01C3
    31fe:	10 91 c4 01 	lds	r17, 0x01C4
    3202:	e1 14       	cp	r14, r1
    3204:	f1 04       	cpc	r15, r1
    3206:	01 05       	cpc	r16, r1
    3208:	11 05       	cpc	r17, r1
    320a:	09 f4       	brne	.+2      	; 0x320e <inputs_store_and_display+0x71a>
    320c:	41 c0       	rjmp	.+130    	; 0x3290 <inputs_store_and_display+0x79c>
					decimalHolder=(decimalHolder-decimalHolder%10);					//Countering everything done in the "input digit" partition if the input digit is a fractional number.
    320e:	c8 01       	movw	r24, r16
    3210:	b7 01       	movw	r22, r14
    3212:	2a e0       	ldi	r18, 0x0A	; 10
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    321e:	e6 1a       	sub	r14, r22
    3220:	f7 0a       	sbc	r15, r23
    3222:	08 0b       	sbc	r16, r24
    3224:	19 0b       	sbc	r17, r25
    3226:	e0 92 c1 01 	sts	0x01C1, r14
    322a:	f0 92 c2 01 	sts	0x01C2, r15
    322e:	00 93 c3 01 	sts	0x01C3, r16
    3232:	10 93 c4 01 	sts	0x01C4, r17
					fractionalCounter/=10;
    3236:	60 91 97 01 	lds	r22, 0x0197
    323a:	70 91 98 01 	lds	r23, 0x0198
    323e:	80 91 99 01 	lds	r24, 0x0199
    3242:	90 91 9a 01 	lds	r25, 0x019A
    3246:	2a e0       	ldi	r18, 0x0A	; 10
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    3252:	20 93 97 01 	sts	0x0197, r18
    3256:	30 93 98 01 	sts	0x0198, r19
    325a:	40 93 99 01 	sts	0x0199, r20
    325e:	50 93 9a 01 	sts	0x019A, r21
					if(decimalHolder){
    3262:	e1 14       	cp	r14, r1
    3264:	f1 04       	cpc	r15, r1
    3266:	01 05       	cpc	r16, r1
    3268:	11 05       	cpc	r17, r1
    326a:	09 f4       	brne	.+2      	; 0x326e <inputs_store_and_display+0x77a>
    326c:	4c c0       	rjmp	.+152    	; 0x3306 <inputs_store_and_display+0x812>
						decimalHolder/=10;
    326e:	c8 01       	movw	r24, r16
    3270:	b7 01       	movw	r22, r14
    3272:	2a e0       	ldi	r18, 0x0A	; 10
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    327e:	20 93 c1 01 	sts	0x01C1, r18
    3282:	30 93 c2 01 	sts	0x01C2, r19
    3286:	40 93 c3 01 	sts	0x01C3, r20
    328a:	50 93 c4 01 	sts	0x01C4, r21
    328e:	3b c0       	rjmp	.+118    	; 0x3306 <inputs_store_and_display+0x812>
					}
				}
				else if(operandHolder){												//If what i am deleting is a digit from the integer part (decimalNumberFlag=0).
    3290:	e0 90 bd 01 	lds	r14, 0x01BD
    3294:	f0 90 be 01 	lds	r15, 0x01BE
    3298:	00 91 bf 01 	lds	r16, 0x01BF
    329c:	10 91 c0 01 	lds	r17, 0x01C0
    32a0:	e1 14       	cp	r14, r1
    32a2:	f1 04       	cpc	r15, r1
    32a4:	01 05       	cpc	r16, r1
    32a6:	11 05       	cpc	r17, r1
    32a8:	71 f1       	breq	.+92     	; 0x3306 <inputs_store_and_display+0x812>
					operandHolder=(operandHolder-operandHolder%10);					//Countering everything done in the "input digit" partition if the input digit is an integer number.
    32aa:	c8 01       	movw	r24, r16
    32ac:	b7 01       	movw	r22, r14
    32ae:	2a e0       	ldi	r18, 0x0A	; 10
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    32ba:	a8 01       	movw	r20, r16
    32bc:	97 01       	movw	r18, r14
    32be:	26 1b       	sub	r18, r22
    32c0:	37 0b       	sbc	r19, r23
    32c2:	48 0b       	sbc	r20, r24
    32c4:	59 0b       	sbc	r21, r25
    32c6:	ca 01       	movw	r24, r20
    32c8:	b9 01       	movw	r22, r18
    32ca:	20 93 bd 01 	sts	0x01BD, r18
    32ce:	30 93 be 01 	sts	0x01BE, r19
    32d2:	40 93 bf 01 	sts	0x01BF, r20
    32d6:	50 93 c0 01 	sts	0x01C0, r21
					if(operandHolder){
    32da:	21 15       	cp	r18, r1
    32dc:	31 05       	cpc	r19, r1
    32de:	41 05       	cpc	r20, r1
    32e0:	51 05       	cpc	r21, r1
    32e2:	79 f0       	breq	.+30     	; 0x3302 <inputs_store_and_display+0x80e>
						operandHolder/=10;
    32e4:	2a e0       	ldi	r18, 0x0A	; 10
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e0       	ldi	r20, 0x00	; 0
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodsi4>
    32f0:	20 93 bd 01 	sts	0x01BD, r18
    32f4:	30 93 be 01 	sts	0x01BE, r19
    32f8:	40 93 bf 01 	sts	0x01BF, r20
    32fc:	50 93 c0 01 	sts	0x01C0, r21
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <inputs_store_and_display+0x812>
					}
					else {
						sequenceCorrectFlag=0;										//If the operandHolder reached zero then the last thing entered is an operation, so make the sequenceCorrectFlag=0 to detect errors if another operation is entered.
    3302:	10 92 44 02 	sts	0x0244, r1
					}
				}
				inputsCounter--;													//Decrease the number of inputs entered as i removed a digit.
    3306:	8d 2d       	mov	r24, r13
    3308:	81 50       	subi	r24, 0x01	; 1
    330a:	80 93 bc 01 	sts	0x01BC, r24
    330e:	fc c0       	rjmp	.+504    	; 0x3508 <inputs_store_and_display+0xa14>
					UART_SendChar_Polling('R');
				}
			}
			else {																	//Handles the undoing of all the operations and the negative sign (+, -, X, /).

				if(negativeSignPosition[inputsCounter]){							//Handles if the minus sign is for a negative number not a subtraction, it counter does everything done in the "input negative sign" partition.
    3310:	e0 91 bc 01 	lds	r30, 0x01BC
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	e9 5b       	subi	r30, 0xB9	; 185
    3318:	fd 4f       	sbci	r31, 0xFD	; 253
    331a:	80 81       	ld	r24, Z
    331c:	88 23       	and	r24, r24
    331e:	a9 f0       	breq	.+42     	; 0x334a <inputs_store_and_display+0x856>
					LCD_DeleteChar();
    3320:	0e 94 a9 12 	call	0x2552	; 0x2552 <LCD_DeleteChar>
					UART_SendChar_Polling('D');
    3324:	84 e4       	ldi	r24, 0x44	; 68
    3326:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>

					negativeNumberFlag^=1;
    332a:	80 91 46 02 	lds	r24, 0x0246
    332e:	87 25       	eor	r24, r7
    3330:	80 93 46 02 	sts	0x0246, r24
					negativeSignPosition[inputsCounter]=0;
    3334:	80 91 bc 01 	lds	r24, 0x01BC
    3338:	e8 2f       	mov	r30, r24
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	e9 5b       	subi	r30, 0xB9	; 185
    333e:	fd 4f       	sbci	r31, 0xFD	; 253
    3340:	10 82       	st	Z, r1

					inputsCounter--;
    3342:	81 50       	subi	r24, 0x01	; 1
    3344:	80 93 bc 01 	sts	0x01BC, r24
    3348:	dd c0       	rjmp	.+442    	; 0x3504 <inputs_store_and_display+0xa10>
				}
				else if(operandsCounter){											//Handles the undoing of all the operations (+, -, X, /), it counter does everything done in the "input operation" part and "input subtraction sign" partition..
    334a:	80 91 c5 01 	lds	r24, 0x01C5
    334e:	88 23       	and	r24, r24
    3350:	09 f4       	brne	.+2      	; 0x3354 <inputs_store_and_display+0x860>
    3352:	d8 c0       	rjmp	.+432    	; 0x3504 <inputs_store_and_display+0xa10>
					LCD_DeleteChar();
    3354:	0e 94 a9 12 	call	0x2552	; 0x2552 <LCD_DeleteChar>
					UART_SendChar_Polling('D');
    3358:	84 e4       	ldi	r24, 0x44	; 68
    335a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>

					operandsCounter--;
    335e:	60 91 c5 01 	lds	r22, 0x01C5
    3362:	61 50       	subi	r22, 0x01	; 1
    3364:	60 93 c5 01 	sts	0x01C5, r22

					operandHolder=(u32)operandsHolder[operandsCounter];
    3368:	c6 2f       	mov	r28, r22
    336a:	d0 e0       	ldi	r29, 0x00	; 0
    336c:	cc 0f       	add	r28, r28
    336e:	dd 1f       	adc	r29, r29
    3370:	cc 0f       	add	r28, r28
    3372:	dd 1f       	adc	r29, r29
    3374:	ca 53       	subi	r28, 0x3A	; 58
    3376:	de 4f       	sbci	r29, 0xFE	; 254
    3378:	68 81       	ld	r22, Y
    337a:	79 81       	ldd	r23, Y+1	; 0x01
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	0e 94 ca 00 	call	0x194	; 0x194 <__fixunssfsi>
    3384:	60 93 bd 01 	sts	0x01BD, r22
    3388:	70 93 be 01 	sts	0x01BE, r23
    338c:	80 93 bf 01 	sts	0x01BF, r24
    3390:	90 93 c0 01 	sts	0x01C0, r25

					if(operandsHolder[operandsCounter]!=(s32)(operandsHolder[operandsCounter])){
    3394:	e8 80       	ld	r14, Y
    3396:	f9 80       	ldd	r15, Y+1	; 0x01
    3398:	0a 81       	ldd	r16, Y+2	; 0x02
    339a:	1b 81       	ldd	r17, Y+3	; 0x03
    339c:	c8 01       	movw	r24, r16
    339e:	b7 01       	movw	r22, r14
    33a0:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    33a4:	5b 01       	movw	r10, r22
    33a6:	6c 01       	movw	r12, r24
    33a8:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
    33ac:	9b 01       	movw	r18, r22
    33ae:	ac 01       	movw	r20, r24
    33b0:	c8 01       	movw	r24, r16
    33b2:	b7 01       	movw	r22, r14
    33b4:	0e 94 76 04 	call	0x8ec	; 0x8ec <__nesf2>
    33b8:	88 23       	and	r24, r24
    33ba:	09 f4       	brne	.+2      	; 0x33be <inputs_store_and_display+0x8ca>
    33bc:	47 c0       	rjmp	.+142    	; 0x344c <inputs_store_and_display+0x958>
						decimalHolder=(u32)operandsHolder[operandsCounter]-(s32)operandsHolder[operandsCounter];
    33be:	c8 01       	movw	r24, r16
    33c0:	b7 01       	movw	r22, r14
    33c2:	0e 94 ca 00 	call	0x194	; 0x194 <__fixunssfsi>
    33c6:	6a 19       	sub	r22, r10
    33c8:	7b 09       	sbc	r23, r11
    33ca:	8c 09       	sbc	r24, r12
    33cc:	9d 09       	sbc	r25, r13
    33ce:	60 93 c1 01 	sts	0x01C1, r22
    33d2:	70 93 c2 01 	sts	0x01C2, r23
    33d6:	80 93 c3 01 	sts	0x01C3, r24
    33da:	90 93 c4 01 	sts	0x01C4, r25

						f32 decimalHolder_tmp=decimalHolder;										//This part is to set the fractional counter as it was before entering an operation because it is reset after entering an operation.
    33de:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__floatunsisf>
    33e2:	7b 01       	movw	r14, r22
    33e4:	8c 01       	movw	r16, r24
    33e6:	a0 90 97 01 	lds	r10, 0x0197
    33ea:	b0 90 98 01 	lds	r11, 0x0198
    33ee:	c0 90 99 01 	lds	r12, 0x0199
    33f2:	d0 90 9a 01 	lds	r13, 0x019A
    33f6:	14 c0       	rjmp	.+40     	; 0x3420 <inputs_store_and_display+0x92c>
						while(decimalHolder_tmp!=(s32)decimalHolder_tmp){							//So this loop counts the digits in the fractional part of the number to set the fractional counter as it was before it was reset.
							decimalHolder_tmp*=10;
    33f8:	c8 01       	movw	r24, r16
    33fa:	b7 01       	movw	r22, r14
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
    3408:	7b 01       	movw	r14, r22
    340a:	8c 01       	movw	r16, r24
							fractionalCounter*=10;
    340c:	c6 01       	movw	r24, r12
    340e:	b5 01       	movw	r22, r10
    3410:	2a e0       	ldi	r18, 0x0A	; 10
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <__mulsi3>
    341c:	5b 01       	movw	r10, r22
    341e:	6c 01       	movw	r12, r24

					if(operandsHolder[operandsCounter]!=(s32)(operandsHolder[operandsCounter])){
						decimalHolder=(u32)operandsHolder[operandsCounter]-(s32)operandsHolder[operandsCounter];

						f32 decimalHolder_tmp=decimalHolder;										//This part is to set the fractional counter as it was before entering an operation because it is reset after entering an operation.
						while(decimalHolder_tmp!=(s32)decimalHolder_tmp){							//So this loop counts the digits in the fractional part of the number to set the fractional counter as it was before it was reset.
    3420:	c8 01       	movw	r24, r16
    3422:	b7 01       	movw	r22, r14
    3424:	0e 94 94 05 	call	0xb28	; 0xb28 <__fixsfsi>
    3428:	0e 94 36 05 	call	0xa6c	; 0xa6c <__floatsisf>
    342c:	9b 01       	movw	r18, r22
    342e:	ac 01       	movw	r20, r24
    3430:	c8 01       	movw	r24, r16
    3432:	b7 01       	movw	r22, r14
    3434:	0e 94 76 04 	call	0x8ec	; 0x8ec <__nesf2>
    3438:	88 23       	and	r24, r24
    343a:	f1 f6       	brne	.-68     	; 0x33f8 <inputs_store_and_display+0x904>
    343c:	a0 92 97 01 	sts	0x0197, r10
    3440:	b0 92 98 01 	sts	0x0198, r11
    3444:	c0 92 99 01 	sts	0x0199, r12
    3448:	d0 92 9a 01 	sts	0x019A, r13
							decimalHolder_tmp*=10;
							fractionalCounter*=10;
						}
					}

					if(operandsHolder[operandsCounter]<0){
    344c:	e0 91 c5 01 	lds	r30, 0x01C5
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	ee 0f       	add	r30, r30
    3454:	ff 1f       	adc	r31, r31
    3456:	ee 0f       	add	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	ea 53       	subi	r30, 0x3A	; 58
    345c:	fe 4f       	sbci	r31, 0xFE	; 254
    345e:	e0 80       	ld	r14, Z
    3460:	f1 80       	ldd	r15, Z+1	; 0x01
    3462:	02 81       	ldd	r16, Z+2	; 0x02
    3464:	13 81       	ldd	r17, Z+3	; 0x03
    3466:	c8 01       	movw	r24, r16
    3468:	b7 01       	movw	r22, r14
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e0       	ldi	r20, 0x00	; 0
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	0e 94 06 05 	call	0xa0c	; 0xa0c <__ltsf2>
    3476:	88 23       	and	r24, r24
    3478:	a4 f4       	brge	.+40     	; 0x34a2 <inputs_store_and_display+0x9ae>
						operandHolder=(u32)0-operandsHolder[operandsCounter];
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	70 e0       	ldi	r23, 0x00	; 0
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	a8 01       	movw	r20, r16
    3484:	97 01       	movw	r18, r14
    3486:	0e 94 42 02 	call	0x484	; 0x484 <__subsf3>
    348a:	0e 94 ca 00 	call	0x194	; 0x194 <__fixunssfsi>
    348e:	60 93 bd 01 	sts	0x01BD, r22
    3492:	70 93 be 01 	sts	0x01BE, r23
    3496:	80 93 bf 01 	sts	0x01BF, r24
    349a:	90 93 c0 01 	sts	0x01C0, r25
						negativeNumberFlag=1;
    349e:	70 92 46 02 	sts	0x0246, r7
					}

					operandsHolder[operandsCounter]=0;
    34a2:	e0 91 c5 01 	lds	r30, 0x01C5
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	ee 0f       	add	r30, r30
    34aa:	ff 1f       	adc	r31, r31
    34ac:	ee 0f       	add	r30, r30
    34ae:	ff 1f       	adc	r31, r31
    34b0:	ea 53       	subi	r30, 0x3A	; 58
    34b2:	fe 4f       	sbci	r31, 0xFE	; 254
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	a0 e0       	ldi	r26, 0x00	; 0
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	80 83       	st	Z, r24
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	a2 83       	std	Z+2, r26	; 0x02
    34c2:	b3 83       	std	Z+3, r27	; 0x03
					operationsCounter--;
    34c4:	e0 91 16 02 	lds	r30, 0x0216
    34c8:	e1 50       	subi	r30, 0x01	; 1
    34ca:	e0 93 16 02 	sts	0x0216, r30
					operationsHolder[operationsCounter]=0;
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	e9 5e       	subi	r30, 0xE9	; 233
    34d2:	fd 4f       	sbci	r31, 0xFD	; 253
    34d4:	10 82       	st	Z, r1

					if(wrongInputPosition[inputsCounter]){
    34d6:	90 91 bc 01 	lds	r25, 0x01BC
    34da:	e9 2f       	mov	r30, r25
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	ea 56       	subi	r30, 0x6A	; 106
    34e0:	fd 4f       	sbci	r31, 0xFD	; 253
    34e2:	80 81       	ld	r24, Z
    34e4:	88 23       	and	r24, r24
    34e6:	49 f0       	breq	.+18     	; 0x34fa <inputs_store_and_display+0xa06>
						wrongInputCounter--;
    34e8:	80 91 45 02 	lds	r24, 0x0245
    34ec:	81 50       	subi	r24, 0x01	; 1
    34ee:	80 93 45 02 	sts	0x0245, r24
						sequenceCorrectFlag=0;
    34f2:	10 92 44 02 	sts	0x0244, r1
						wrongInputPosition[inputsCounter]=0;
    34f6:	10 82       	st	Z, r1
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <inputs_store_and_display+0xa0a>
					}
					else {
						sequenceCorrectFlag=1;
    34fa:	70 92 44 02 	sts	0x0244, r7
					}
					inputsCounter--;
    34fe:	91 50       	subi	r25, 0x01	; 1
    3500:	90 93 bc 01 	sts	0x01BC, r25
				}
				if(inputsCounter>=15){
    3504:	80 91 bc 01 	lds	r24, 0x01BC
    3508:	8f 30       	cpi	r24, 0x0F	; 15
    350a:	48 f0       	brcs	.+18     	; 0x351e <inputs_store_and_display+0xa2a>
					LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_RIGHT);									//Shift right what was shifted left if the inputs counter was bigger than 16 (which is the LCD limit).
    350c:	8c e1       	ldi	r24, 0x1C	; 28
    350e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_SendCommand>
					UART_SendChar_Polling('R');
    3512:	82 e5       	ldi	r24, 0x52	; 82
    3514:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
					UART_SendChar_Polling('R');
    3518:	82 e5       	ldi	r24, 0x52	; 82
    351a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <UART_SendChar_Polling>
				}
			}
		}
		input=0;																					//After finishing one cycle of checking the input variable, input is reset to wait for the user to enter another input (0 in this context is null as input variable resembles the ascii table).
    351e:	10 92 bb 01 	sts	0x01BB, r1

//Name: "Inputs store and display" part. Function: It handles storing all the inputs from the user into two arrays; operansdHolder and operationsHolder.
//Also clears the LCD if AC button is pressed for a long time, and deletes the last entered character if it is pressed for a short time.
//It also handles some error that may happen by wrong sequence of inputs or out of variable and LCD limits.
void inputs_store_and_display(void){
	while(!endIndicatorFlag){												//!endIndicatorFlag states that the user did not finish entering the whole operation (didn't press =) .
    3522:	80 91 42 02 	lds	r24, 0x0242
    3526:	88 23       	and	r24, r24
    3528:	09 f4       	brne	.+2      	; 0x352c <inputs_store_and_display+0xa38>
    352a:	04 cb       	rjmp	.-2552   	; 0x2b34 <inputs_store_and_display+0x40>
				}
			}
		}
		input=0;																					//After finishing one cycle of checking the input variable, input is reset to wait for the user to enter another input (0 in this context is null as input variable resembles the ascii table).
	}
}
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	1f 91       	pop	r17
    3532:	0f 91       	pop	r16
    3534:	ff 90       	pop	r15
    3536:	ef 90       	pop	r14
    3538:	df 90       	pop	r13
    353a:	cf 90       	pop	r12
    353c:	bf 90       	pop	r11
    353e:	af 90       	pop	r10
    3540:	9f 90       	pop	r9
    3542:	8f 90       	pop	r8
    3544:	7f 90       	pop	r7
    3546:	6f 90       	pop	r6
    3548:	5f 90       	pop	r5
    354a:	4f 90       	pop	r4
    354c:	3f 90       	pop	r3
    354e:	2f 90       	pop	r2
    3550:	08 95       	ret

00003552 <calculator>:
		}
	}
}

void calculator(void){
	inputs_store_and_display();
    3552:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <inputs_store_and_display>
	operation_perform();
    3556:	0e 94 01 14 	call	0x2802	; 0x2802 <operation_perform>
}
    355a:	08 95       	ret

0000355c <main>:
#include "calc.h"


int main(void){

	DIO_INIT();
    355c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <DIO_INIT>
	UART_Init();
    3560:	0e 94 56 08 	call	0x10ac	; 0x10ac <UART_Init>
	KEYPAD_INIT();
    3564:	0e 94 5e 13 	call	0x26bc	; 0x26bc <KEYPAD_INIT>
	LCD_INIT();
    3568:	0e 94 b7 12 	call	0x256e	; 0x256e <LCD_INIT>

	while(1){
		calculator();
    356c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <calculator>
    3570:	fd cf       	rjmp	.-6      	; 0x356c <main+0x10>

00003572 <vfprintf>:
    3572:	a1 e1       	ldi	r26, 0x11	; 17
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ef eb       	ldi	r30, 0xBF	; 191
    3578:	fa e1       	ldi	r31, 0x1A	; 26
    357a:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__prologue_saves__>
    357e:	3c 01       	movw	r6, r24
    3580:	7f 87       	std	Y+15, r23	; 0x0f
    3582:	6e 87       	std	Y+14, r22	; 0x0e
    3584:	6a 01       	movw	r12, r20
    3586:	fc 01       	movw	r30, r24
    3588:	17 82       	std	Z+7, r1	; 0x07
    358a:	16 82       	std	Z+6, r1	; 0x06
    358c:	83 81       	ldd	r24, Z+3	; 0x03
    358e:	81 fd       	sbrc	r24, 1
    3590:	03 c0       	rjmp	.+6      	; 0x3598 <vfprintf+0x26>
    3592:	6f ef       	ldi	r22, 0xFF	; 255
    3594:	7f ef       	ldi	r23, 0xFF	; 255
    3596:	6f c3       	rjmp	.+1758   	; 0x3c76 <vfprintf+0x704>
    3598:	9e 01       	movw	r18, r28
    359a:	2f 5f       	subi	r18, 0xFF	; 255
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	39 8b       	std	Y+17, r19	; 0x11
    35a0:	28 8b       	std	Y+16, r18	; 0x10
    35a2:	f3 01       	movw	r30, r6
    35a4:	23 81       	ldd	r18, Z+3	; 0x03
    35a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    35a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    35aa:	23 fd       	sbrc	r18, 3
    35ac:	85 91       	lpm	r24, Z+
    35ae:	23 ff       	sbrs	r18, 3
    35b0:	81 91       	ld	r24, Z+
    35b2:	ff 87       	std	Y+15, r31	; 0x0f
    35b4:	ee 87       	std	Y+14, r30	; 0x0e
    35b6:	88 23       	and	r24, r24
    35b8:	09 f4       	brne	.+2      	; 0x35bc <vfprintf+0x4a>
    35ba:	5a c3       	rjmp	.+1716   	; 0x3c70 <vfprintf+0x6fe>
    35bc:	85 32       	cpi	r24, 0x25	; 37
    35be:	51 f4       	brne	.+20     	; 0x35d4 <vfprintf+0x62>
    35c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    35c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    35c4:	23 fd       	sbrc	r18, 3
    35c6:	85 91       	lpm	r24, Z+
    35c8:	23 ff       	sbrs	r18, 3
    35ca:	81 91       	ld	r24, Z+
    35cc:	ff 87       	std	Y+15, r31	; 0x0f
    35ce:	ee 87       	std	Y+14, r30	; 0x0e
    35d0:	85 32       	cpi	r24, 0x25	; 37
    35d2:	29 f4       	brne	.+10     	; 0x35de <vfprintf+0x6c>
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	b3 01       	movw	r22, r6
    35d8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    35dc:	e2 cf       	rjmp	.-60     	; 0x35a2 <vfprintf+0x30>
    35de:	98 2f       	mov	r25, r24
    35e0:	10 e0       	ldi	r17, 0x00	; 0
    35e2:	88 24       	eor	r8, r8
    35e4:	99 24       	eor	r9, r9
    35e6:	10 32       	cpi	r17, 0x20	; 32
    35e8:	b0 f4       	brcc	.+44     	; 0x3616 <vfprintf+0xa4>
    35ea:	9b 32       	cpi	r25, 0x2B	; 43
    35ec:	69 f0       	breq	.+26     	; 0x3608 <vfprintf+0x96>
    35ee:	9c 32       	cpi	r25, 0x2C	; 44
    35f0:	28 f4       	brcc	.+10     	; 0x35fc <vfprintf+0x8a>
    35f2:	90 32       	cpi	r25, 0x20	; 32
    35f4:	51 f0       	breq	.+20     	; 0x360a <vfprintf+0x98>
    35f6:	93 32       	cpi	r25, 0x23	; 35
    35f8:	71 f4       	brne	.+28     	; 0x3616 <vfprintf+0xa4>
    35fa:	0b c0       	rjmp	.+22     	; 0x3612 <vfprintf+0xa0>
    35fc:	9d 32       	cpi	r25, 0x2D	; 45
    35fe:	39 f0       	breq	.+14     	; 0x360e <vfprintf+0x9c>
    3600:	90 33       	cpi	r25, 0x30	; 48
    3602:	49 f4       	brne	.+18     	; 0x3616 <vfprintf+0xa4>
    3604:	11 60       	ori	r17, 0x01	; 1
    3606:	28 c0       	rjmp	.+80     	; 0x3658 <vfprintf+0xe6>
    3608:	12 60       	ori	r17, 0x02	; 2
    360a:	14 60       	ori	r17, 0x04	; 4
    360c:	25 c0       	rjmp	.+74     	; 0x3658 <vfprintf+0xe6>
    360e:	18 60       	ori	r17, 0x08	; 8
    3610:	23 c0       	rjmp	.+70     	; 0x3658 <vfprintf+0xe6>
    3612:	10 61       	ori	r17, 0x10	; 16
    3614:	21 c0       	rjmp	.+66     	; 0x3658 <vfprintf+0xe6>
    3616:	17 fd       	sbrc	r17, 7
    3618:	2a c0       	rjmp	.+84     	; 0x366e <vfprintf+0xfc>
    361a:	89 2f       	mov	r24, r25
    361c:	80 53       	subi	r24, 0x30	; 48
    361e:	8a 30       	cpi	r24, 0x0A	; 10
    3620:	78 f4       	brcc	.+30     	; 0x3640 <vfprintf+0xce>
    3622:	16 ff       	sbrs	r17, 6
    3624:	06 c0       	rjmp	.+12     	; 0x3632 <vfprintf+0xc0>
    3626:	fa e0       	ldi	r31, 0x0A	; 10
    3628:	9f 9e       	mul	r9, r31
    362a:	90 2c       	mov	r9, r0
    362c:	11 24       	eor	r1, r1
    362e:	98 0e       	add	r9, r24
    3630:	13 c0       	rjmp	.+38     	; 0x3658 <vfprintf+0xe6>
    3632:	3a e0       	ldi	r19, 0x0A	; 10
    3634:	83 9e       	mul	r8, r19
    3636:	80 2c       	mov	r8, r0
    3638:	11 24       	eor	r1, r1
    363a:	88 0e       	add	r8, r24
    363c:	10 62       	ori	r17, 0x20	; 32
    363e:	0c c0       	rjmp	.+24     	; 0x3658 <vfprintf+0xe6>
    3640:	9e 32       	cpi	r25, 0x2E	; 46
    3642:	21 f4       	brne	.+8      	; 0x364c <vfprintf+0xda>
    3644:	16 fd       	sbrc	r17, 6
    3646:	14 c3       	rjmp	.+1576   	; 0x3c70 <vfprintf+0x6fe>
    3648:	10 64       	ori	r17, 0x40	; 64
    364a:	06 c0       	rjmp	.+12     	; 0x3658 <vfprintf+0xe6>
    364c:	9c 36       	cpi	r25, 0x6C	; 108
    364e:	11 f4       	brne	.+4      	; 0x3654 <vfprintf+0xe2>
    3650:	10 68       	ori	r17, 0x80	; 128
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <vfprintf+0xe6>
    3654:	98 36       	cpi	r25, 0x68	; 104
    3656:	59 f4       	brne	.+22     	; 0x366e <vfprintf+0xfc>
    3658:	ee 85       	ldd	r30, Y+14	; 0x0e
    365a:	ff 85       	ldd	r31, Y+15	; 0x0f
    365c:	23 fd       	sbrc	r18, 3
    365e:	95 91       	lpm	r25, Z+
    3660:	23 ff       	sbrs	r18, 3
    3662:	91 91       	ld	r25, Z+
    3664:	ff 87       	std	Y+15, r31	; 0x0f
    3666:	ee 87       	std	Y+14, r30	; 0x0e
    3668:	99 23       	and	r25, r25
    366a:	09 f0       	breq	.+2      	; 0x366e <vfprintf+0xfc>
    366c:	bc cf       	rjmp	.-136    	; 0x35e6 <vfprintf+0x74>
    366e:	89 2f       	mov	r24, r25
    3670:	85 54       	subi	r24, 0x45	; 69
    3672:	83 30       	cpi	r24, 0x03	; 3
    3674:	20 f4       	brcc	.+8      	; 0x367e <vfprintf+0x10c>
    3676:	81 2f       	mov	r24, r17
    3678:	80 61       	ori	r24, 0x10	; 16
    367a:	90 5e       	subi	r25, 0xE0	; 224
    367c:	07 c0       	rjmp	.+14     	; 0x368c <vfprintf+0x11a>
    367e:	89 2f       	mov	r24, r25
    3680:	85 56       	subi	r24, 0x65	; 101
    3682:	83 30       	cpi	r24, 0x03	; 3
    3684:	08 f0       	brcs	.+2      	; 0x3688 <vfprintf+0x116>
    3686:	9f c1       	rjmp	.+830    	; 0x39c6 <vfprintf+0x454>
    3688:	81 2f       	mov	r24, r17
    368a:	8f 7e       	andi	r24, 0xEF	; 239
    368c:	86 fd       	sbrc	r24, 6
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <vfprintf+0x122>
    3690:	76 e0       	ldi	r23, 0x06	; 6
    3692:	97 2e       	mov	r9, r23
    3694:	6f e3       	ldi	r22, 0x3F	; 63
    3696:	f6 2e       	mov	r15, r22
    3698:	f8 22       	and	r15, r24
    369a:	95 36       	cpi	r25, 0x65	; 101
    369c:	19 f4       	brne	.+6      	; 0x36a4 <vfprintf+0x132>
    369e:	f0 e4       	ldi	r31, 0x40	; 64
    36a0:	ff 2a       	or	r15, r31
    36a2:	07 c0       	rjmp	.+14     	; 0x36b2 <vfprintf+0x140>
    36a4:	96 36       	cpi	r25, 0x66	; 102
    36a6:	19 f4       	brne	.+6      	; 0x36ae <vfprintf+0x13c>
    36a8:	20 e8       	ldi	r18, 0x80	; 128
    36aa:	f2 2a       	or	r15, r18
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <vfprintf+0x140>
    36ae:	91 10       	cpse	r9, r1
    36b0:	9a 94       	dec	r9
    36b2:	f7 fe       	sbrs	r15, 7
    36b4:	0a c0       	rjmp	.+20     	; 0x36ca <vfprintf+0x158>
    36b6:	3b e3       	ldi	r19, 0x3B	; 59
    36b8:	39 15       	cp	r19, r9
    36ba:	18 f4       	brcc	.+6      	; 0x36c2 <vfprintf+0x150>
    36bc:	5c e3       	ldi	r21, 0x3C	; 60
    36be:	b5 2e       	mov	r11, r21
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <vfprintf+0x154>
    36c2:	b9 2c       	mov	r11, r9
    36c4:	b3 94       	inc	r11
    36c6:	27 e0       	ldi	r18, 0x07	; 7
    36c8:	09 c0       	rjmp	.+18     	; 0x36dc <vfprintf+0x16a>
    36ca:	47 e0       	ldi	r20, 0x07	; 7
    36cc:	49 15       	cp	r20, r9
    36ce:	20 f4       	brcc	.+8      	; 0x36d8 <vfprintf+0x166>
    36d0:	bb 24       	eor	r11, r11
    36d2:	47 e0       	ldi	r20, 0x07	; 7
    36d4:	94 2e       	mov	r9, r20
    36d6:	f7 cf       	rjmp	.-18     	; 0x36c6 <vfprintf+0x154>
    36d8:	29 2d       	mov	r18, r9
    36da:	bb 24       	eor	r11, r11
    36dc:	c6 01       	movw	r24, r12
    36de:	04 96       	adiw	r24, 0x04	; 4
    36e0:	9d 87       	std	Y+13, r25	; 0x0d
    36e2:	8c 87       	std	Y+12, r24	; 0x0c
    36e4:	f6 01       	movw	r30, r12
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	ae 01       	movw	r20, r28
    36f0:	4f 5f       	subi	r20, 0xFF	; 255
    36f2:	5f 4f       	sbci	r21, 0xFF	; 255
    36f4:	0b 2d       	mov	r16, r11
    36f6:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__ftoa_engine>
    36fa:	6c 01       	movw	r12, r24
    36fc:	09 81       	ldd	r16, Y+1	; 0x01
    36fe:	20 2e       	mov	r2, r16
    3700:	33 24       	eor	r3, r3
    3702:	00 ff       	sbrs	r16, 0
    3704:	04 c0       	rjmp	.+8      	; 0x370e <vfprintf+0x19c>
    3706:	03 fd       	sbrc	r16, 3
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0x19c>
    370a:	1d e2       	ldi	r17, 0x2D	; 45
    370c:	09 c0       	rjmp	.+18     	; 0x3720 <vfprintf+0x1ae>
    370e:	f1 fe       	sbrs	r15, 1
    3710:	02 c0       	rjmp	.+4      	; 0x3716 <vfprintf+0x1a4>
    3712:	1b e2       	ldi	r17, 0x2B	; 43
    3714:	05 c0       	rjmp	.+10     	; 0x3720 <vfprintf+0x1ae>
    3716:	f2 fc       	sbrc	r15, 2
    3718:	02 c0       	rjmp	.+4      	; 0x371e <vfprintf+0x1ac>
    371a:	10 e0       	ldi	r17, 0x00	; 0
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <vfprintf+0x1ae>
    371e:	10 e2       	ldi	r17, 0x20	; 32
    3720:	c1 01       	movw	r24, r2
    3722:	8c 70       	andi	r24, 0x0C	; 12
    3724:	90 70       	andi	r25, 0x00	; 0
    3726:	89 2b       	or	r24, r25
    3728:	b9 f1       	breq	.+110    	; 0x3798 <vfprintf+0x226>
    372a:	11 23       	and	r17, r17
    372c:	11 f4       	brne	.+4      	; 0x3732 <vfprintf+0x1c0>
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	01 c0       	rjmp	.+2      	; 0x3734 <vfprintf+0x1c2>
    3732:	84 e0       	ldi	r24, 0x04	; 4
    3734:	88 15       	cp	r24, r8
    3736:	10 f0       	brcs	.+4      	; 0x373c <vfprintf+0x1ca>
    3738:	88 24       	eor	r8, r8
    373a:	0a c0       	rjmp	.+20     	; 0x3750 <vfprintf+0x1de>
    373c:	88 1a       	sub	r8, r24
    373e:	f3 fc       	sbrc	r15, 3
    3740:	07 c0       	rjmp	.+14     	; 0x3750 <vfprintf+0x1de>
    3742:	80 e2       	ldi	r24, 0x20	; 32
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	b3 01       	movw	r22, r6
    3748:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    374c:	8a 94       	dec	r8
    374e:	c9 f7       	brne	.-14     	; 0x3742 <vfprintf+0x1d0>
    3750:	11 23       	and	r17, r17
    3752:	29 f0       	breq	.+10     	; 0x375e <vfprintf+0x1ec>
    3754:	81 2f       	mov	r24, r17
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	b3 01       	movw	r22, r6
    375a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    375e:	23 fe       	sbrs	r2, 3
    3760:	03 c0       	rjmp	.+6      	; 0x3768 <vfprintf+0x1f6>
    3762:	04 e5       	ldi	r16, 0x54	; 84
    3764:	10 e0       	ldi	r17, 0x00	; 0
    3766:	0e c0       	rjmp	.+28     	; 0x3784 <vfprintf+0x212>
    3768:	08 e5       	ldi	r16, 0x58	; 88
    376a:	10 e0       	ldi	r17, 0x00	; 0
    376c:	0b c0       	rjmp	.+22     	; 0x3784 <vfprintf+0x212>
    376e:	e1 14       	cp	r14, r1
    3770:	f1 04       	cpc	r15, r1
    3772:	09 f0       	breq	.+2      	; 0x3776 <vfprintf+0x204>
    3774:	80 52       	subi	r24, 0x20	; 32
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	b3 01       	movw	r22, r6
    377a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    377e:	0f 5f       	subi	r16, 0xFF	; 255
    3780:	1f 4f       	sbci	r17, 0xFF	; 255
    3782:	05 c0       	rjmp	.+10     	; 0x378e <vfprintf+0x21c>
    3784:	ef 2c       	mov	r14, r15
    3786:	ff 24       	eor	r15, r15
    3788:	f0 e1       	ldi	r31, 0x10	; 16
    378a:	ef 22       	and	r14, r31
    378c:	ff 24       	eor	r15, r15
    378e:	f8 01       	movw	r30, r16
    3790:	84 91       	lpm	r24, Z+
    3792:	88 23       	and	r24, r24
    3794:	61 f7       	brne	.-40     	; 0x376e <vfprintf+0x1fc>
    3796:	14 c1       	rjmp	.+552    	; 0x39c0 <vfprintf+0x44e>
    3798:	f7 fe       	sbrs	r15, 7
    379a:	12 c0       	rjmp	.+36     	; 0x37c0 <vfprintf+0x24e>
    379c:	bc 0c       	add	r11, r12
    379e:	24 fe       	sbrs	r2, 4
    37a0:	04 c0       	rjmp	.+8      	; 0x37aa <vfprintf+0x238>
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	81 33       	cpi	r24, 0x31	; 49
    37a6:	09 f4       	brne	.+2      	; 0x37aa <vfprintf+0x238>
    37a8:	ba 94       	dec	r11
    37aa:	1b 14       	cp	r1, r11
    37ac:	1c f0       	brlt	.+6      	; 0x37b4 <vfprintf+0x242>
    37ae:	bb 24       	eor	r11, r11
    37b0:	b3 94       	inc	r11
    37b2:	2d c0       	rjmp	.+90     	; 0x380e <vfprintf+0x29c>
    37b4:	f8 e0       	ldi	r31, 0x08	; 8
    37b6:	fb 15       	cp	r31, r11
    37b8:	50 f5       	brcc	.+84     	; 0x380e <vfprintf+0x29c>
    37ba:	38 e0       	ldi	r19, 0x08	; 8
    37bc:	b3 2e       	mov	r11, r19
    37be:	27 c0       	rjmp	.+78     	; 0x380e <vfprintf+0x29c>
    37c0:	f6 fc       	sbrc	r15, 6
    37c2:	25 c0       	rjmp	.+74     	; 0x380e <vfprintf+0x29c>
    37c4:	89 2d       	mov	r24, r9
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	8c 15       	cp	r24, r12
    37ca:	9d 05       	cpc	r25, r13
    37cc:	4c f0       	brlt	.+18     	; 0x37e0 <vfprintf+0x26e>
    37ce:	2c ef       	ldi	r18, 0xFC	; 252
    37d0:	c2 16       	cp	r12, r18
    37d2:	2f ef       	ldi	r18, 0xFF	; 255
    37d4:	d2 06       	cpc	r13, r18
    37d6:	24 f0       	brlt	.+8      	; 0x37e0 <vfprintf+0x26e>
    37d8:	30 e8       	ldi	r19, 0x80	; 128
    37da:	f3 2a       	or	r15, r19
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <vfprintf+0x26e>
    37de:	9a 94       	dec	r9
    37e0:	99 20       	and	r9, r9
    37e2:	49 f0       	breq	.+18     	; 0x37f6 <vfprintf+0x284>
    37e4:	e2 e0       	ldi	r30, 0x02	; 2
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	ec 0f       	add	r30, r28
    37ea:	fd 1f       	adc	r31, r29
    37ec:	e9 0d       	add	r30, r9
    37ee:	f1 1d       	adc	r31, r1
    37f0:	80 81       	ld	r24, Z
    37f2:	80 33       	cpi	r24, 0x30	; 48
    37f4:	a1 f3       	breq	.-24     	; 0x37de <vfprintf+0x26c>
    37f6:	f7 fe       	sbrs	r15, 7
    37f8:	0a c0       	rjmp	.+20     	; 0x380e <vfprintf+0x29c>
    37fa:	b9 2c       	mov	r11, r9
    37fc:	b3 94       	inc	r11
    37fe:	89 2d       	mov	r24, r9
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	c8 16       	cp	r12, r24
    3804:	d9 06       	cpc	r13, r25
    3806:	14 f0       	brlt	.+4      	; 0x380c <vfprintf+0x29a>
    3808:	99 24       	eor	r9, r9
    380a:	01 c0       	rjmp	.+2      	; 0x380e <vfprintf+0x29c>
    380c:	9c 18       	sub	r9, r12
    380e:	f7 fc       	sbrc	r15, 7
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <vfprintf+0x2a6>
    3812:	25 e0       	ldi	r18, 0x05	; 5
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	09 c0       	rjmp	.+18     	; 0x382a <vfprintf+0x2b8>
    3818:	1c 14       	cp	r1, r12
    381a:	1d 04       	cpc	r1, r13
    381c:	1c f0       	brlt	.+6      	; 0x3824 <vfprintf+0x2b2>
    381e:	21 e0       	ldi	r18, 0x01	; 1
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	03 c0       	rjmp	.+6      	; 0x382a <vfprintf+0x2b8>
    3824:	96 01       	movw	r18, r12
    3826:	2f 5f       	subi	r18, 0xFF	; 255
    3828:	3f 4f       	sbci	r19, 0xFF	; 255
    382a:	11 23       	and	r17, r17
    382c:	11 f0       	breq	.+4      	; 0x3832 <vfprintf+0x2c0>
    382e:	2f 5f       	subi	r18, 0xFF	; 255
    3830:	3f 4f       	sbci	r19, 0xFF	; 255
    3832:	99 20       	and	r9, r9
    3834:	29 f0       	breq	.+10     	; 0x3840 <vfprintf+0x2ce>
    3836:	89 2d       	mov	r24, r9
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	01 96       	adiw	r24, 0x01	; 1
    383c:	28 0f       	add	r18, r24
    383e:	39 1f       	adc	r19, r25
    3840:	88 2d       	mov	r24, r8
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	28 17       	cp	r18, r24
    3846:	39 07       	cpc	r19, r25
    3848:	14 f0       	brlt	.+4      	; 0x384e <vfprintf+0x2dc>
    384a:	88 24       	eor	r8, r8
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <vfprintf+0x2de>
    384e:	82 1a       	sub	r8, r18
    3850:	4f 2c       	mov	r4, r15
    3852:	55 24       	eor	r5, r5
    3854:	c2 01       	movw	r24, r4
    3856:	89 70       	andi	r24, 0x09	; 9
    3858:	90 70       	andi	r25, 0x00	; 0
    385a:	89 2b       	or	r24, r25
    385c:	39 f0       	breq	.+14     	; 0x386c <vfprintf+0x2fa>
    385e:	08 c0       	rjmp	.+16     	; 0x3870 <vfprintf+0x2fe>
    3860:	80 e2       	ldi	r24, 0x20	; 32
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	b3 01       	movw	r22, r6
    3866:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    386a:	8a 94       	dec	r8
    386c:	88 20       	and	r8, r8
    386e:	c1 f7       	brne	.-16     	; 0x3860 <vfprintf+0x2ee>
    3870:	11 23       	and	r17, r17
    3872:	29 f0       	breq	.+10     	; 0x387e <vfprintf+0x30c>
    3874:	81 2f       	mov	r24, r17
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	b3 01       	movw	r22, r6
    387a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    387e:	43 fe       	sbrs	r4, 3
    3880:	07 c0       	rjmp	.+14     	; 0x3890 <vfprintf+0x31e>
    3882:	08 c0       	rjmp	.+16     	; 0x3894 <vfprintf+0x322>
    3884:	80 e3       	ldi	r24, 0x30	; 48
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	b3 01       	movw	r22, r6
    388a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    388e:	8a 94       	dec	r8
    3890:	88 20       	and	r8, r8
    3892:	c1 f7       	brne	.-16     	; 0x3884 <vfprintf+0x312>
    3894:	f7 fe       	sbrs	r15, 7
    3896:	46 c0       	rjmp	.+140    	; 0x3924 <vfprintf+0x3b2>
    3898:	86 01       	movw	r16, r12
    389a:	d7 fe       	sbrs	r13, 7
    389c:	02 c0       	rjmp	.+4      	; 0x38a2 <vfprintf+0x330>
    389e:	00 e0       	ldi	r16, 0x00	; 0
    38a0:	10 e0       	ldi	r17, 0x00	; 0
    38a2:	76 01       	movw	r14, r12
    38a4:	08 94       	sec
    38a6:	e1 1c       	adc	r14, r1
    38a8:	f1 1c       	adc	r15, r1
    38aa:	e0 1a       	sub	r14, r16
    38ac:	f1 0a       	sbc	r15, r17
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	4c 0f       	add	r20, r28
    38b4:	5d 1f       	adc	r21, r29
    38b6:	e4 0e       	add	r14, r20
    38b8:	f5 1e       	adc	r15, r21
    38ba:	26 01       	movw	r4, r12
    38bc:	4b 18       	sub	r4, r11
    38be:	51 08       	sbc	r5, r1
    38c0:	89 2d       	mov	r24, r9
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	aa 24       	eor	r10, r10
    38c6:	bb 24       	eor	r11, r11
    38c8:	a8 1a       	sub	r10, r24
    38ca:	b9 0a       	sbc	r11, r25
    38cc:	5f ef       	ldi	r21, 0xFF	; 255
    38ce:	0f 3f       	cpi	r16, 0xFF	; 255
    38d0:	15 07       	cpc	r17, r21
    38d2:	29 f4       	brne	.+10     	; 0x38de <vfprintf+0x36c>
    38d4:	8e e2       	ldi	r24, 0x2E	; 46
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	b3 01       	movw	r22, r6
    38da:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    38de:	c0 16       	cp	r12, r16
    38e0:	d1 06       	cpc	r13, r17
    38e2:	34 f0       	brlt	.+12     	; 0x38f0 <vfprintf+0x37e>
    38e4:	40 16       	cp	r4, r16
    38e6:	51 06       	cpc	r5, r17
    38e8:	1c f4       	brge	.+6      	; 0x38f0 <vfprintf+0x37e>
    38ea:	f7 01       	movw	r30, r14
    38ec:	80 81       	ld	r24, Z
    38ee:	01 c0       	rjmp	.+2      	; 0x38f2 <vfprintf+0x380>
    38f0:	80 e3       	ldi	r24, 0x30	; 48
    38f2:	01 50       	subi	r16, 0x01	; 1
    38f4:	10 40       	sbci	r17, 0x00	; 0
    38f6:	08 94       	sec
    38f8:	e1 1c       	adc	r14, r1
    38fa:	f1 1c       	adc	r15, r1
    38fc:	0a 15       	cp	r16, r10
    38fe:	1b 05       	cpc	r17, r11
    3900:	2c f0       	brlt	.+10     	; 0x390c <vfprintf+0x39a>
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	b3 01       	movw	r22, r6
    3906:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    390a:	e0 cf       	rjmp	.-64     	; 0x38cc <vfprintf+0x35a>
    390c:	0c 15       	cp	r16, r12
    390e:	1d 05       	cpc	r17, r13
    3910:	39 f4       	brne	.+14     	; 0x3920 <vfprintf+0x3ae>
    3912:	9a 81       	ldd	r25, Y+2	; 0x02
    3914:	96 33       	cpi	r25, 0x36	; 54
    3916:	18 f4       	brcc	.+6      	; 0x391e <vfprintf+0x3ac>
    3918:	95 33       	cpi	r25, 0x35	; 53
    391a:	11 f4       	brne	.+4      	; 0x3920 <vfprintf+0x3ae>
    391c:	24 fe       	sbrs	r2, 4
    391e:	81 e3       	ldi	r24, 0x31	; 49
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	4b c0       	rjmp	.+150    	; 0x39ba <vfprintf+0x448>
    3924:	8a 81       	ldd	r24, Y+2	; 0x02
    3926:	81 33       	cpi	r24, 0x31	; 49
    3928:	09 f0       	breq	.+2      	; 0x392c <vfprintf+0x3ba>
    392a:	0f 7e       	andi	r16, 0xEF	; 239
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	b3 01       	movw	r22, r6
    3930:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3934:	99 20       	and	r9, r9
    3936:	a1 f0       	breq	.+40     	; 0x3960 <vfprintf+0x3ee>
    3938:	8e e2       	ldi	r24, 0x2E	; 46
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	b3 01       	movw	r22, r6
    393e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3942:	12 e0       	ldi	r17, 0x02	; 2
    3944:	e1 e0       	ldi	r30, 0x01	; 1
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	ec 0f       	add	r30, r28
    394a:	fd 1f       	adc	r31, r29
    394c:	e1 0f       	add	r30, r17
    394e:	f1 1d       	adc	r31, r1
    3950:	1f 5f       	subi	r17, 0xFF	; 255
    3952:	80 81       	ld	r24, Z
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	b3 01       	movw	r22, r6
    3958:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    395c:	9a 94       	dec	r9
    395e:	91 f7       	brne	.-28     	; 0x3944 <vfprintf+0x3d2>
    3960:	44 fc       	sbrc	r4, 4
    3962:	03 c0       	rjmp	.+6      	; 0x396a <vfprintf+0x3f8>
    3964:	85 e6       	ldi	r24, 0x65	; 101
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	02 c0       	rjmp	.+4      	; 0x396e <vfprintf+0x3fc>
    396a:	85 e4       	ldi	r24, 0x45	; 69
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	b3 01       	movw	r22, r6
    3970:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3974:	d7 fc       	sbrc	r13, 7
    3976:	05 c0       	rjmp	.+10     	; 0x3982 <vfprintf+0x410>
    3978:	c1 14       	cp	r12, r1
    397a:	d1 04       	cpc	r13, r1
    397c:	41 f4       	brne	.+16     	; 0x398e <vfprintf+0x41c>
    397e:	04 ff       	sbrs	r16, 4
    3980:	06 c0       	rjmp	.+12     	; 0x398e <vfprintf+0x41c>
    3982:	d0 94       	com	r13
    3984:	c1 94       	neg	r12
    3986:	d1 08       	sbc	r13, r1
    3988:	d3 94       	inc	r13
    398a:	8d e2       	ldi	r24, 0x2D	; 45
    398c:	01 c0       	rjmp	.+2      	; 0x3990 <vfprintf+0x41e>
    398e:	8b e2       	ldi	r24, 0x2B	; 43
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	b3 01       	movw	r22, r6
    3994:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3998:	80 e3       	ldi	r24, 0x30	; 48
    399a:	05 c0       	rjmp	.+10     	; 0x39a6 <vfprintf+0x434>
    399c:	8f 5f       	subi	r24, 0xFF	; 255
    399e:	26 ef       	ldi	r18, 0xF6	; 246
    39a0:	3f ef       	ldi	r19, 0xFF	; 255
    39a2:	c2 0e       	add	r12, r18
    39a4:	d3 1e       	adc	r13, r19
    39a6:	3a e0       	ldi	r19, 0x0A	; 10
    39a8:	c3 16       	cp	r12, r19
    39aa:	d1 04       	cpc	r13, r1
    39ac:	bc f7       	brge	.-18     	; 0x399c <vfprintf+0x42a>
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	b3 01       	movw	r22, r6
    39b2:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    39b6:	c6 01       	movw	r24, r12
    39b8:	c0 96       	adiw	r24, 0x30	; 48
    39ba:	b3 01       	movw	r22, r6
    39bc:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    39c0:	cc 84       	ldd	r12, Y+12	; 0x0c
    39c2:	dd 84       	ldd	r13, Y+13	; 0x0d
    39c4:	52 c1       	rjmp	.+676    	; 0x3c6a <vfprintf+0x6f8>
    39c6:	93 36       	cpi	r25, 0x63	; 99
    39c8:	31 f0       	breq	.+12     	; 0x39d6 <vfprintf+0x464>
    39ca:	93 37       	cpi	r25, 0x73	; 115
    39cc:	99 f0       	breq	.+38     	; 0x39f4 <vfprintf+0x482>
    39ce:	93 35       	cpi	r25, 0x53	; 83
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <vfprintf+0x462>
    39d2:	59 c0       	rjmp	.+178    	; 0x3a86 <vfprintf+0x514>
    39d4:	23 c0       	rjmp	.+70     	; 0x3a1c <vfprintf+0x4aa>
    39d6:	f6 01       	movw	r30, r12
    39d8:	80 81       	ld	r24, Z
    39da:	89 83       	std	Y+1, r24	; 0x01
    39dc:	5e 01       	movw	r10, r28
    39de:	08 94       	sec
    39e0:	a1 1c       	adc	r10, r1
    39e2:	b1 1c       	adc	r11, r1
    39e4:	22 e0       	ldi	r18, 0x02	; 2
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	c2 0e       	add	r12, r18
    39ea:	d3 1e       	adc	r13, r19
    39ec:	21 e0       	ldi	r18, 0x01	; 1
    39ee:	e2 2e       	mov	r14, r18
    39f0:	f1 2c       	mov	r15, r1
    39f2:	12 c0       	rjmp	.+36     	; 0x3a18 <vfprintf+0x4a6>
    39f4:	f6 01       	movw	r30, r12
    39f6:	a0 80       	ld	r10, Z
    39f8:	b1 80       	ldd	r11, Z+1	; 0x01
    39fa:	16 fd       	sbrc	r17, 6
    39fc:	03 c0       	rjmp	.+6      	; 0x3a04 <vfprintf+0x492>
    39fe:	6f ef       	ldi	r22, 0xFF	; 255
    3a00:	7f ef       	ldi	r23, 0xFF	; 255
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <vfprintf+0x496>
    3a04:	69 2d       	mov	r22, r9
    3a06:	70 e0       	ldi	r23, 0x00	; 0
    3a08:	22 e0       	ldi	r18, 0x02	; 2
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	c2 0e       	add	r12, r18
    3a0e:	d3 1e       	adc	r13, r19
    3a10:	c5 01       	movw	r24, r10
    3a12:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <strnlen>
    3a16:	7c 01       	movw	r14, r24
    3a18:	1f 77       	andi	r17, 0x7F	; 127
    3a1a:	13 c0       	rjmp	.+38     	; 0x3a42 <vfprintf+0x4d0>
    3a1c:	f6 01       	movw	r30, r12
    3a1e:	a0 80       	ld	r10, Z
    3a20:	b1 80       	ldd	r11, Z+1	; 0x01
    3a22:	16 fd       	sbrc	r17, 6
    3a24:	03 c0       	rjmp	.+6      	; 0x3a2c <vfprintf+0x4ba>
    3a26:	6f ef       	ldi	r22, 0xFF	; 255
    3a28:	7f ef       	ldi	r23, 0xFF	; 255
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <vfprintf+0x4be>
    3a2c:	69 2d       	mov	r22, r9
    3a2e:	70 e0       	ldi	r23, 0x00	; 0
    3a30:	22 e0       	ldi	r18, 0x02	; 2
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	c2 0e       	add	r12, r18
    3a36:	d3 1e       	adc	r13, r19
    3a38:	c5 01       	movw	r24, r10
    3a3a:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <strnlen_P>
    3a3e:	7c 01       	movw	r14, r24
    3a40:	10 68       	ori	r17, 0x80	; 128
    3a42:	13 ff       	sbrs	r17, 3
    3a44:	07 c0       	rjmp	.+14     	; 0x3a54 <vfprintf+0x4e2>
    3a46:	1b c0       	rjmp	.+54     	; 0x3a7e <vfprintf+0x50c>
    3a48:	80 e2       	ldi	r24, 0x20	; 32
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	b3 01       	movw	r22, r6
    3a4e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3a52:	8a 94       	dec	r8
    3a54:	88 2d       	mov	r24, r8
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	e8 16       	cp	r14, r24
    3a5a:	f9 06       	cpc	r15, r25
    3a5c:	a8 f3       	brcs	.-22     	; 0x3a48 <vfprintf+0x4d6>
    3a5e:	0f c0       	rjmp	.+30     	; 0x3a7e <vfprintf+0x50c>
    3a60:	f5 01       	movw	r30, r10
    3a62:	17 fd       	sbrc	r17, 7
    3a64:	85 91       	lpm	r24, Z+
    3a66:	17 ff       	sbrs	r17, 7
    3a68:	81 91       	ld	r24, Z+
    3a6a:	5f 01       	movw	r10, r30
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	b3 01       	movw	r22, r6
    3a70:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3a74:	81 10       	cpse	r8, r1
    3a76:	8a 94       	dec	r8
    3a78:	08 94       	sec
    3a7a:	e1 08       	sbc	r14, r1
    3a7c:	f1 08       	sbc	r15, r1
    3a7e:	e1 14       	cp	r14, r1
    3a80:	f1 04       	cpc	r15, r1
    3a82:	71 f7       	brne	.-36     	; 0x3a60 <vfprintf+0x4ee>
    3a84:	f2 c0       	rjmp	.+484    	; 0x3c6a <vfprintf+0x6f8>
    3a86:	94 36       	cpi	r25, 0x64	; 100
    3a88:	11 f0       	breq	.+4      	; 0x3a8e <vfprintf+0x51c>
    3a8a:	99 36       	cpi	r25, 0x69	; 105
    3a8c:	89 f5       	brne	.+98     	; 0x3af0 <vfprintf+0x57e>
    3a8e:	17 ff       	sbrs	r17, 7
    3a90:	08 c0       	rjmp	.+16     	; 0x3aa2 <vfprintf+0x530>
    3a92:	f6 01       	movw	r30, r12
    3a94:	20 81       	ld	r18, Z
    3a96:	31 81       	ldd	r19, Z+1	; 0x01
    3a98:	42 81       	ldd	r20, Z+2	; 0x02
    3a9a:	53 81       	ldd	r21, Z+3	; 0x03
    3a9c:	84 e0       	ldi	r24, 0x04	; 4
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	0a c0       	rjmp	.+20     	; 0x3ab6 <vfprintf+0x544>
    3aa2:	f6 01       	movw	r30, r12
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	9c 01       	movw	r18, r24
    3aaa:	44 27       	eor	r20, r20
    3aac:	37 fd       	sbrc	r19, 7
    3aae:	40 95       	com	r20
    3ab0:	54 2f       	mov	r21, r20
    3ab2:	82 e0       	ldi	r24, 0x02	; 2
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	c8 0e       	add	r12, r24
    3ab8:	d9 1e       	adc	r13, r25
    3aba:	9f e6       	ldi	r25, 0x6F	; 111
    3abc:	f9 2e       	mov	r15, r25
    3abe:	f1 22       	and	r15, r17
    3ac0:	57 ff       	sbrs	r21, 7
    3ac2:	09 c0       	rjmp	.+18     	; 0x3ad6 <vfprintf+0x564>
    3ac4:	50 95       	com	r21
    3ac6:	40 95       	com	r20
    3ac8:	30 95       	com	r19
    3aca:	21 95       	neg	r18
    3acc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ace:	4f 4f       	sbci	r20, 0xFF	; 255
    3ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad2:	90 e8       	ldi	r25, 0x80	; 128
    3ad4:	f9 2a       	or	r15, r25
    3ad6:	ca 01       	movw	r24, r20
    3ad8:	b9 01       	movw	r22, r18
    3ada:	ae 01       	movw	r20, r28
    3adc:	4f 5f       	subi	r20, 0xFF	; 255
    3ade:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae0:	2a e0       	ldi	r18, 0x0A	; 10
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	0e 94 14 20 	call	0x4028	; 0x4028 <__ultoa_invert>
    3ae8:	e8 2e       	mov	r14, r24
    3aea:	e8 89       	ldd	r30, Y+16	; 0x10
    3aec:	ee 1a       	sub	r14, r30
    3aee:	41 c0       	rjmp	.+130    	; 0x3b72 <vfprintf+0x600>
    3af0:	95 37       	cpi	r25, 0x75	; 117
    3af2:	21 f4       	brne	.+8      	; 0x3afc <vfprintf+0x58a>
    3af4:	1f 7e       	andi	r17, 0xEF	; 239
    3af6:	2a e0       	ldi	r18, 0x0A	; 10
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	1c c0       	rjmp	.+56     	; 0x3b34 <vfprintf+0x5c2>
    3afc:	19 7f       	andi	r17, 0xF9	; 249
    3afe:	9f 36       	cpi	r25, 0x6F	; 111
    3b00:	61 f0       	breq	.+24     	; 0x3b1a <vfprintf+0x5a8>
    3b02:	90 37       	cpi	r25, 0x70	; 112
    3b04:	20 f4       	brcc	.+8      	; 0x3b0e <vfprintf+0x59c>
    3b06:	98 35       	cpi	r25, 0x58	; 88
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <vfprintf+0x59a>
    3b0a:	b2 c0       	rjmp	.+356    	; 0x3c70 <vfprintf+0x6fe>
    3b0c:	0f c0       	rjmp	.+30     	; 0x3b2c <vfprintf+0x5ba>
    3b0e:	90 37       	cpi	r25, 0x70	; 112
    3b10:	39 f0       	breq	.+14     	; 0x3b20 <vfprintf+0x5ae>
    3b12:	98 37       	cpi	r25, 0x78	; 120
    3b14:	09 f0       	breq	.+2      	; 0x3b18 <vfprintf+0x5a6>
    3b16:	ac c0       	rjmp	.+344    	; 0x3c70 <vfprintf+0x6fe>
    3b18:	04 c0       	rjmp	.+8      	; 0x3b22 <vfprintf+0x5b0>
    3b1a:	28 e0       	ldi	r18, 0x08	; 8
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	0a c0       	rjmp	.+20     	; 0x3b34 <vfprintf+0x5c2>
    3b20:	10 61       	ori	r17, 0x10	; 16
    3b22:	14 fd       	sbrc	r17, 4
    3b24:	14 60       	ori	r17, 0x04	; 4
    3b26:	20 e1       	ldi	r18, 0x10	; 16
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	04 c0       	rjmp	.+8      	; 0x3b34 <vfprintf+0x5c2>
    3b2c:	14 fd       	sbrc	r17, 4
    3b2e:	16 60       	ori	r17, 0x06	; 6
    3b30:	20 e1       	ldi	r18, 0x10	; 16
    3b32:	32 e0       	ldi	r19, 0x02	; 2
    3b34:	17 ff       	sbrs	r17, 7
    3b36:	08 c0       	rjmp	.+16     	; 0x3b48 <vfprintf+0x5d6>
    3b38:	f6 01       	movw	r30, r12
    3b3a:	60 81       	ld	r22, Z
    3b3c:	71 81       	ldd	r23, Z+1	; 0x01
    3b3e:	82 81       	ldd	r24, Z+2	; 0x02
    3b40:	93 81       	ldd	r25, Z+3	; 0x03
    3b42:	44 e0       	ldi	r20, 0x04	; 4
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	08 c0       	rjmp	.+16     	; 0x3b58 <vfprintf+0x5e6>
    3b48:	f6 01       	movw	r30, r12
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	bc 01       	movw	r22, r24
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	42 e0       	ldi	r20, 0x02	; 2
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	c4 0e       	add	r12, r20
    3b5a:	d5 1e       	adc	r13, r21
    3b5c:	ae 01       	movw	r20, r28
    3b5e:	4f 5f       	subi	r20, 0xFF	; 255
    3b60:	5f 4f       	sbci	r21, 0xFF	; 255
    3b62:	0e 94 14 20 	call	0x4028	; 0x4028 <__ultoa_invert>
    3b66:	e8 2e       	mov	r14, r24
    3b68:	58 89       	ldd	r21, Y+16	; 0x10
    3b6a:	e5 1a       	sub	r14, r21
    3b6c:	8f e7       	ldi	r24, 0x7F	; 127
    3b6e:	f8 2e       	mov	r15, r24
    3b70:	f1 22       	and	r15, r17
    3b72:	f6 fe       	sbrs	r15, 6
    3b74:	0b c0       	rjmp	.+22     	; 0x3b8c <vfprintf+0x61a>
    3b76:	8e ef       	ldi	r24, 0xFE	; 254
    3b78:	f8 22       	and	r15, r24
    3b7a:	e9 14       	cp	r14, r9
    3b7c:	38 f4       	brcc	.+14     	; 0x3b8c <vfprintf+0x61a>
    3b7e:	f4 fe       	sbrs	r15, 4
    3b80:	07 c0       	rjmp	.+14     	; 0x3b90 <vfprintf+0x61e>
    3b82:	f2 fc       	sbrc	r15, 2
    3b84:	05 c0       	rjmp	.+10     	; 0x3b90 <vfprintf+0x61e>
    3b86:	9f ee       	ldi	r25, 0xEF	; 239
    3b88:	f9 22       	and	r15, r25
    3b8a:	02 c0       	rjmp	.+4      	; 0x3b90 <vfprintf+0x61e>
    3b8c:	1e 2d       	mov	r17, r14
    3b8e:	01 c0       	rjmp	.+2      	; 0x3b92 <vfprintf+0x620>
    3b90:	19 2d       	mov	r17, r9
    3b92:	f4 fe       	sbrs	r15, 4
    3b94:	0d c0       	rjmp	.+26     	; 0x3bb0 <vfprintf+0x63e>
    3b96:	fe 01       	movw	r30, r28
    3b98:	ee 0d       	add	r30, r14
    3b9a:	f1 1d       	adc	r31, r1
    3b9c:	80 81       	ld	r24, Z
    3b9e:	80 33       	cpi	r24, 0x30	; 48
    3ba0:	19 f4       	brne	.+6      	; 0x3ba8 <vfprintf+0x636>
    3ba2:	e9 ee       	ldi	r30, 0xE9	; 233
    3ba4:	fe 22       	and	r15, r30
    3ba6:	08 c0       	rjmp	.+16     	; 0x3bb8 <vfprintf+0x646>
    3ba8:	1f 5f       	subi	r17, 0xFF	; 255
    3baa:	f2 fe       	sbrs	r15, 2
    3bac:	05 c0       	rjmp	.+10     	; 0x3bb8 <vfprintf+0x646>
    3bae:	03 c0       	rjmp	.+6      	; 0x3bb6 <vfprintf+0x644>
    3bb0:	8f 2d       	mov	r24, r15
    3bb2:	86 78       	andi	r24, 0x86	; 134
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <vfprintf+0x646>
    3bb6:	1f 5f       	subi	r17, 0xFF	; 255
    3bb8:	0f 2d       	mov	r16, r15
    3bba:	f3 fc       	sbrc	r15, 3
    3bbc:	14 c0       	rjmp	.+40     	; 0x3be6 <vfprintf+0x674>
    3bbe:	f0 fe       	sbrs	r15, 0
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <vfprintf+0x66e>
    3bc2:	18 15       	cp	r17, r8
    3bc4:	10 f0       	brcs	.+4      	; 0x3bca <vfprintf+0x658>
    3bc6:	9e 2c       	mov	r9, r14
    3bc8:	0b c0       	rjmp	.+22     	; 0x3be0 <vfprintf+0x66e>
    3bca:	9e 2c       	mov	r9, r14
    3bcc:	98 0c       	add	r9, r8
    3bce:	91 1a       	sub	r9, r17
    3bd0:	18 2d       	mov	r17, r8
    3bd2:	06 c0       	rjmp	.+12     	; 0x3be0 <vfprintf+0x66e>
    3bd4:	80 e2       	ldi	r24, 0x20	; 32
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	b3 01       	movw	r22, r6
    3bda:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3bde:	1f 5f       	subi	r17, 0xFF	; 255
    3be0:	18 15       	cp	r17, r8
    3be2:	c0 f3       	brcs	.-16     	; 0x3bd4 <vfprintf+0x662>
    3be4:	04 c0       	rjmp	.+8      	; 0x3bee <vfprintf+0x67c>
    3be6:	18 15       	cp	r17, r8
    3be8:	10 f4       	brcc	.+4      	; 0x3bee <vfprintf+0x67c>
    3bea:	81 1a       	sub	r8, r17
    3bec:	01 c0       	rjmp	.+2      	; 0x3bf0 <vfprintf+0x67e>
    3bee:	88 24       	eor	r8, r8
    3bf0:	04 ff       	sbrs	r16, 4
    3bf2:	0f c0       	rjmp	.+30     	; 0x3c12 <vfprintf+0x6a0>
    3bf4:	80 e3       	ldi	r24, 0x30	; 48
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	b3 01       	movw	r22, r6
    3bfa:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3bfe:	02 ff       	sbrs	r16, 2
    3c00:	1d c0       	rjmp	.+58     	; 0x3c3c <vfprintf+0x6ca>
    3c02:	01 fd       	sbrc	r16, 1
    3c04:	03 c0       	rjmp	.+6      	; 0x3c0c <vfprintf+0x69a>
    3c06:	88 e7       	ldi	r24, 0x78	; 120
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e c0       	rjmp	.+28     	; 0x3c28 <vfprintf+0x6b6>
    3c0c:	88 e5       	ldi	r24, 0x58	; 88
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	0b c0       	rjmp	.+22     	; 0x3c28 <vfprintf+0x6b6>
    3c12:	80 2f       	mov	r24, r16
    3c14:	86 78       	andi	r24, 0x86	; 134
    3c16:	91 f0       	breq	.+36     	; 0x3c3c <vfprintf+0x6ca>
    3c18:	01 ff       	sbrs	r16, 1
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <vfprintf+0x6ae>
    3c1c:	8b e2       	ldi	r24, 0x2B	; 43
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <vfprintf+0x6b0>
    3c20:	80 e2       	ldi	r24, 0x20	; 32
    3c22:	f7 fc       	sbrc	r15, 7
    3c24:	8d e2       	ldi	r24, 0x2D	; 45
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	b3 01       	movw	r22, r6
    3c2a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3c2e:	06 c0       	rjmp	.+12     	; 0x3c3c <vfprintf+0x6ca>
    3c30:	80 e3       	ldi	r24, 0x30	; 48
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	b3 01       	movw	r22, r6
    3c36:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3c3a:	9a 94       	dec	r9
    3c3c:	e9 14       	cp	r14, r9
    3c3e:	c0 f3       	brcs	.-16     	; 0x3c30 <vfprintf+0x6be>
    3c40:	ea 94       	dec	r14
    3c42:	e1 e0       	ldi	r30, 0x01	; 1
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	ec 0f       	add	r30, r28
    3c48:	fd 1f       	adc	r31, r29
    3c4a:	ee 0d       	add	r30, r14
    3c4c:	f1 1d       	adc	r31, r1
    3c4e:	80 81       	ld	r24, Z
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	b3 01       	movw	r22, r6
    3c54:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3c58:	ee 20       	and	r14, r14
    3c5a:	91 f7       	brne	.-28     	; 0x3c40 <vfprintf+0x6ce>
    3c5c:	06 c0       	rjmp	.+12     	; 0x3c6a <vfprintf+0x6f8>
    3c5e:	80 e2       	ldi	r24, 0x20	; 32
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	b3 01       	movw	r22, r6
    3c64:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <fputc>
    3c68:	8a 94       	dec	r8
    3c6a:	88 20       	and	r8, r8
    3c6c:	c1 f7       	brne	.-16     	; 0x3c5e <vfprintf+0x6ec>
    3c6e:	99 cc       	rjmp	.-1742   	; 0x35a2 <vfprintf+0x30>
    3c70:	f3 01       	movw	r30, r6
    3c72:	66 81       	ldd	r22, Z+6	; 0x06
    3c74:	77 81       	ldd	r23, Z+7	; 0x07
    3c76:	cb 01       	movw	r24, r22
    3c78:	61 96       	adiw	r28, 0x11	; 17
    3c7a:	e2 e1       	ldi	r30, 0x12	; 18
    3c7c:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__epilogue_restores__>

00003c80 <__mulsi3>:
    3c80:	62 9f       	mul	r22, r18
    3c82:	d0 01       	movw	r26, r0
    3c84:	73 9f       	mul	r23, r19
    3c86:	f0 01       	movw	r30, r0
    3c88:	82 9f       	mul	r24, r18
    3c8a:	e0 0d       	add	r30, r0
    3c8c:	f1 1d       	adc	r31, r1
    3c8e:	64 9f       	mul	r22, r20
    3c90:	e0 0d       	add	r30, r0
    3c92:	f1 1d       	adc	r31, r1
    3c94:	92 9f       	mul	r25, r18
    3c96:	f0 0d       	add	r31, r0
    3c98:	83 9f       	mul	r24, r19
    3c9a:	f0 0d       	add	r31, r0
    3c9c:	74 9f       	mul	r23, r20
    3c9e:	f0 0d       	add	r31, r0
    3ca0:	65 9f       	mul	r22, r21
    3ca2:	f0 0d       	add	r31, r0
    3ca4:	99 27       	eor	r25, r25
    3ca6:	72 9f       	mul	r23, r18
    3ca8:	b0 0d       	add	r27, r0
    3caa:	e1 1d       	adc	r30, r1
    3cac:	f9 1f       	adc	r31, r25
    3cae:	63 9f       	mul	r22, r19
    3cb0:	b0 0d       	add	r27, r0
    3cb2:	e1 1d       	adc	r30, r1
    3cb4:	f9 1f       	adc	r31, r25
    3cb6:	bd 01       	movw	r22, r26
    3cb8:	cf 01       	movw	r24, r30
    3cba:	11 24       	eor	r1, r1
    3cbc:	08 95       	ret

00003cbe <__udivmodhi4>:
    3cbe:	aa 1b       	sub	r26, r26
    3cc0:	bb 1b       	sub	r27, r27
    3cc2:	51 e1       	ldi	r21, 0x11	; 17
    3cc4:	07 c0       	rjmp	.+14     	; 0x3cd4 <__udivmodhi4_ep>

00003cc6 <__udivmodhi4_loop>:
    3cc6:	aa 1f       	adc	r26, r26
    3cc8:	bb 1f       	adc	r27, r27
    3cca:	a6 17       	cp	r26, r22
    3ccc:	b7 07       	cpc	r27, r23
    3cce:	10 f0       	brcs	.+4      	; 0x3cd4 <__udivmodhi4_ep>
    3cd0:	a6 1b       	sub	r26, r22
    3cd2:	b7 0b       	sbc	r27, r23

00003cd4 <__udivmodhi4_ep>:
    3cd4:	88 1f       	adc	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	5a 95       	dec	r21
    3cda:	a9 f7       	brne	.-22     	; 0x3cc6 <__udivmodhi4_loop>
    3cdc:	80 95       	com	r24
    3cde:	90 95       	com	r25
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	08 95       	ret

00003ce6 <__divmodhi4>:
    3ce6:	97 fb       	bst	r25, 7
    3ce8:	09 2e       	mov	r0, r25
    3cea:	07 26       	eor	r0, r23
    3cec:	0a d0       	rcall	.+20     	; 0x3d02 <__divmodhi4_neg1>
    3cee:	77 fd       	sbrc	r23, 7
    3cf0:	04 d0       	rcall	.+8      	; 0x3cfa <__divmodhi4_neg2>
    3cf2:	e5 df       	rcall	.-54     	; 0x3cbe <__udivmodhi4>
    3cf4:	06 d0       	rcall	.+12     	; 0x3d02 <__divmodhi4_neg1>
    3cf6:	00 20       	and	r0, r0
    3cf8:	1a f4       	brpl	.+6      	; 0x3d00 <__divmodhi4_exit>

00003cfa <__divmodhi4_neg2>:
    3cfa:	70 95       	com	r23
    3cfc:	61 95       	neg	r22
    3cfe:	7f 4f       	sbci	r23, 0xFF	; 255

00003d00 <__divmodhi4_exit>:
    3d00:	08 95       	ret

00003d02 <__divmodhi4_neg1>:
    3d02:	f6 f7       	brtc	.-4      	; 0x3d00 <__divmodhi4_exit>
    3d04:	90 95       	com	r25
    3d06:	81 95       	neg	r24
    3d08:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0a:	08 95       	ret

00003d0c <__udivmodsi4>:
    3d0c:	a1 e2       	ldi	r26, 0x21	; 33
    3d0e:	1a 2e       	mov	r1, r26
    3d10:	aa 1b       	sub	r26, r26
    3d12:	bb 1b       	sub	r27, r27
    3d14:	fd 01       	movw	r30, r26
    3d16:	0d c0       	rjmp	.+26     	; 0x3d32 <__udivmodsi4_ep>

00003d18 <__udivmodsi4_loop>:
    3d18:	aa 1f       	adc	r26, r26
    3d1a:	bb 1f       	adc	r27, r27
    3d1c:	ee 1f       	adc	r30, r30
    3d1e:	ff 1f       	adc	r31, r31
    3d20:	a2 17       	cp	r26, r18
    3d22:	b3 07       	cpc	r27, r19
    3d24:	e4 07       	cpc	r30, r20
    3d26:	f5 07       	cpc	r31, r21
    3d28:	20 f0       	brcs	.+8      	; 0x3d32 <__udivmodsi4_ep>
    3d2a:	a2 1b       	sub	r26, r18
    3d2c:	b3 0b       	sbc	r27, r19
    3d2e:	e4 0b       	sbc	r30, r20
    3d30:	f5 0b       	sbc	r31, r21

00003d32 <__udivmodsi4_ep>:
    3d32:	66 1f       	adc	r22, r22
    3d34:	77 1f       	adc	r23, r23
    3d36:	88 1f       	adc	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	1a 94       	dec	r1
    3d3c:	69 f7       	brne	.-38     	; 0x3d18 <__udivmodsi4_loop>
    3d3e:	60 95       	com	r22
    3d40:	70 95       	com	r23
    3d42:	80 95       	com	r24
    3d44:	90 95       	com	r25
    3d46:	9b 01       	movw	r18, r22
    3d48:	ac 01       	movw	r20, r24
    3d4a:	bd 01       	movw	r22, r26
    3d4c:	cf 01       	movw	r24, r30
    3d4e:	08 95       	ret

00003d50 <__divmodsi4>:
    3d50:	97 fb       	bst	r25, 7
    3d52:	09 2e       	mov	r0, r25
    3d54:	05 26       	eor	r0, r21
    3d56:	0e d0       	rcall	.+28     	; 0x3d74 <__divmodsi4_neg1>
    3d58:	57 fd       	sbrc	r21, 7
    3d5a:	04 d0       	rcall	.+8      	; 0x3d64 <__divmodsi4_neg2>
    3d5c:	d7 df       	rcall	.-82     	; 0x3d0c <__udivmodsi4>
    3d5e:	0a d0       	rcall	.+20     	; 0x3d74 <__divmodsi4_neg1>
    3d60:	00 1c       	adc	r0, r0
    3d62:	38 f4       	brcc	.+14     	; 0x3d72 <__divmodsi4_exit>

00003d64 <__divmodsi4_neg2>:
    3d64:	50 95       	com	r21
    3d66:	40 95       	com	r20
    3d68:	30 95       	com	r19
    3d6a:	21 95       	neg	r18
    3d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6e:	4f 4f       	sbci	r20, 0xFF	; 255
    3d70:	5f 4f       	sbci	r21, 0xFF	; 255

00003d72 <__divmodsi4_exit>:
    3d72:	08 95       	ret

00003d74 <__divmodsi4_neg1>:
    3d74:	f6 f7       	brtc	.-4      	; 0x3d72 <__divmodsi4_exit>
    3d76:	90 95       	com	r25
    3d78:	80 95       	com	r24
    3d7a:	70 95       	com	r23
    3d7c:	61 95       	neg	r22
    3d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d80:	8f 4f       	sbci	r24, 0xFF	; 255
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	08 95       	ret

00003d86 <__prologue_saves__>:
    3d86:	2f 92       	push	r2
    3d88:	3f 92       	push	r3
    3d8a:	4f 92       	push	r4
    3d8c:	5f 92       	push	r5
    3d8e:	6f 92       	push	r6
    3d90:	7f 92       	push	r7
    3d92:	8f 92       	push	r8
    3d94:	9f 92       	push	r9
    3d96:	af 92       	push	r10
    3d98:	bf 92       	push	r11
    3d9a:	cf 92       	push	r12
    3d9c:	df 92       	push	r13
    3d9e:	ef 92       	push	r14
    3da0:	ff 92       	push	r15
    3da2:	0f 93       	push	r16
    3da4:	1f 93       	push	r17
    3da6:	cf 93       	push	r28
    3da8:	df 93       	push	r29
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	ca 1b       	sub	r28, r26
    3db0:	db 0b       	sbc	r29, r27
    3db2:	0f b6       	in	r0, 0x3f	; 63
    3db4:	f8 94       	cli
    3db6:	de bf       	out	0x3e, r29	; 62
    3db8:	0f be       	out	0x3f, r0	; 63
    3dba:	cd bf       	out	0x3d, r28	; 61
    3dbc:	09 94       	ijmp

00003dbe <__epilogue_restores__>:
    3dbe:	2a 88       	ldd	r2, Y+18	; 0x12
    3dc0:	39 88       	ldd	r3, Y+17	; 0x11
    3dc2:	48 88       	ldd	r4, Y+16	; 0x10
    3dc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dca:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dce:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dd0:	b9 84       	ldd	r11, Y+9	; 0x09
    3dd2:	c8 84       	ldd	r12, Y+8	; 0x08
    3dd4:	df 80       	ldd	r13, Y+7	; 0x07
    3dd6:	ee 80       	ldd	r14, Y+6	; 0x06
    3dd8:	fd 80       	ldd	r15, Y+5	; 0x05
    3dda:	0c 81       	ldd	r16, Y+4	; 0x04
    3ddc:	1b 81       	ldd	r17, Y+3	; 0x03
    3dde:	aa 81       	ldd	r26, Y+2	; 0x02
    3de0:	b9 81       	ldd	r27, Y+1	; 0x01
    3de2:	ce 0f       	add	r28, r30
    3de4:	d1 1d       	adc	r29, r1
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	de bf       	out	0x3e, r29	; 62
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	ed 01       	movw	r28, r26
    3df2:	08 95       	ret

00003df4 <__ftoa_engine>:
    3df4:	28 30       	cpi	r18, 0x08	; 8
    3df6:	08 f0       	brcs	.+2      	; 0x3dfa <__ftoa_engine+0x6>
    3df8:	27 e0       	ldi	r18, 0x07	; 7
    3dfa:	33 27       	eor	r19, r19
    3dfc:	da 01       	movw	r26, r20
    3dfe:	99 0f       	add	r25, r25
    3e00:	31 1d       	adc	r19, r1
    3e02:	87 fd       	sbrc	r24, 7
    3e04:	91 60       	ori	r25, 0x01	; 1
    3e06:	00 96       	adiw	r24, 0x00	; 0
    3e08:	61 05       	cpc	r22, r1
    3e0a:	71 05       	cpc	r23, r1
    3e0c:	39 f4       	brne	.+14     	; 0x3e1c <__ftoa_engine+0x28>
    3e0e:	32 60       	ori	r19, 0x02	; 2
    3e10:	2e 5f       	subi	r18, 0xFE	; 254
    3e12:	3d 93       	st	X+, r19
    3e14:	30 e3       	ldi	r19, 0x30	; 48
    3e16:	2a 95       	dec	r18
    3e18:	e1 f7       	brne	.-8      	; 0x3e12 <__ftoa_engine+0x1e>
    3e1a:	08 95       	ret
    3e1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e1e:	30 f0       	brcs	.+12     	; 0x3e2c <__ftoa_engine+0x38>
    3e20:	80 38       	cpi	r24, 0x80	; 128
    3e22:	71 05       	cpc	r23, r1
    3e24:	61 05       	cpc	r22, r1
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <__ftoa_engine+0x36>
    3e28:	3c 5f       	subi	r19, 0xFC	; 252
    3e2a:	3c 5f       	subi	r19, 0xFC	; 252
    3e2c:	3d 93       	st	X+, r19
    3e2e:	91 30       	cpi	r25, 0x01	; 1
    3e30:	08 f0       	brcs	.+2      	; 0x3e34 <__ftoa_engine+0x40>
    3e32:	80 68       	ori	r24, 0x80	; 128
    3e34:	91 1d       	adc	r25, r1
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	1f 93       	push	r17
    3e3c:	0f 93       	push	r16
    3e3e:	ff 92       	push	r15
    3e40:	ef 92       	push	r14
    3e42:	19 2f       	mov	r17, r25
    3e44:	98 7f       	andi	r25, 0xF8	; 248
    3e46:	96 95       	lsr	r25
    3e48:	e9 2f       	mov	r30, r25
    3e4a:	96 95       	lsr	r25
    3e4c:	96 95       	lsr	r25
    3e4e:	e9 0f       	add	r30, r25
    3e50:	ff 27       	eor	r31, r31
    3e52:	ea 54       	subi	r30, 0x4A	; 74
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	99 27       	eor	r25, r25
    3e58:	33 27       	eor	r19, r19
    3e5a:	ee 24       	eor	r14, r14
    3e5c:	ff 24       	eor	r15, r15
    3e5e:	a7 01       	movw	r20, r14
    3e60:	e7 01       	movw	r28, r14
    3e62:	05 90       	lpm	r0, Z+
    3e64:	08 94       	sec
    3e66:	07 94       	ror	r0
    3e68:	28 f4       	brcc	.+10     	; 0x3e74 <__ftoa_engine+0x80>
    3e6a:	36 0f       	add	r19, r22
    3e6c:	e7 1e       	adc	r14, r23
    3e6e:	f8 1e       	adc	r15, r24
    3e70:	49 1f       	adc	r20, r25
    3e72:	51 1d       	adc	r21, r1
    3e74:	66 0f       	add	r22, r22
    3e76:	77 1f       	adc	r23, r23
    3e78:	88 1f       	adc	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	06 94       	lsr	r0
    3e7e:	a1 f7       	brne	.-24     	; 0x3e68 <__ftoa_engine+0x74>
    3e80:	05 90       	lpm	r0, Z+
    3e82:	07 94       	ror	r0
    3e84:	28 f4       	brcc	.+10     	; 0x3e90 <__ftoa_engine+0x9c>
    3e86:	e7 0e       	add	r14, r23
    3e88:	f8 1e       	adc	r15, r24
    3e8a:	49 1f       	adc	r20, r25
    3e8c:	56 1f       	adc	r21, r22
    3e8e:	c1 1d       	adc	r28, r1
    3e90:	77 0f       	add	r23, r23
    3e92:	88 1f       	adc	r24, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	66 1f       	adc	r22, r22
    3e98:	06 94       	lsr	r0
    3e9a:	a1 f7       	brne	.-24     	; 0x3e84 <__ftoa_engine+0x90>
    3e9c:	05 90       	lpm	r0, Z+
    3e9e:	07 94       	ror	r0
    3ea0:	28 f4       	brcc	.+10     	; 0x3eac <__ftoa_engine+0xb8>
    3ea2:	f8 0e       	add	r15, r24
    3ea4:	49 1f       	adc	r20, r25
    3ea6:	56 1f       	adc	r21, r22
    3ea8:	c7 1f       	adc	r28, r23
    3eaa:	d1 1d       	adc	r29, r1
    3eac:	88 0f       	add	r24, r24
    3eae:	99 1f       	adc	r25, r25
    3eb0:	66 1f       	adc	r22, r22
    3eb2:	77 1f       	adc	r23, r23
    3eb4:	06 94       	lsr	r0
    3eb6:	a1 f7       	brne	.-24     	; 0x3ea0 <__ftoa_engine+0xac>
    3eb8:	05 90       	lpm	r0, Z+
    3eba:	07 94       	ror	r0
    3ebc:	20 f4       	brcc	.+8      	; 0x3ec6 <__ftoa_engine+0xd2>
    3ebe:	49 0f       	add	r20, r25
    3ec0:	56 1f       	adc	r21, r22
    3ec2:	c7 1f       	adc	r28, r23
    3ec4:	d8 1f       	adc	r29, r24
    3ec6:	99 0f       	add	r25, r25
    3ec8:	66 1f       	adc	r22, r22
    3eca:	77 1f       	adc	r23, r23
    3ecc:	88 1f       	adc	r24, r24
    3ece:	06 94       	lsr	r0
    3ed0:	a9 f7       	brne	.-22     	; 0x3ebc <__ftoa_engine+0xc8>
    3ed2:	84 91       	lpm	r24, Z+
    3ed4:	10 95       	com	r17
    3ed6:	17 70       	andi	r17, 0x07	; 7
    3ed8:	41 f0       	breq	.+16     	; 0x3eea <__ftoa_engine+0xf6>
    3eda:	d6 95       	lsr	r29
    3edc:	c7 95       	ror	r28
    3ede:	57 95       	ror	r21
    3ee0:	47 95       	ror	r20
    3ee2:	f7 94       	ror	r15
    3ee4:	e7 94       	ror	r14
    3ee6:	1a 95       	dec	r17
    3ee8:	c1 f7       	brne	.-16     	; 0x3eda <__ftoa_engine+0xe6>
    3eea:	ec e5       	ldi	r30, 0x5C	; 92
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	68 94       	set
    3ef0:	15 90       	lpm	r1, Z+
    3ef2:	15 91       	lpm	r17, Z+
    3ef4:	35 91       	lpm	r19, Z+
    3ef6:	65 91       	lpm	r22, Z+
    3ef8:	95 91       	lpm	r25, Z+
    3efa:	05 90       	lpm	r0, Z+
    3efc:	7f e2       	ldi	r23, 0x2F	; 47
    3efe:	73 95       	inc	r23
    3f00:	e1 18       	sub	r14, r1
    3f02:	f1 0a       	sbc	r15, r17
    3f04:	43 0b       	sbc	r20, r19
    3f06:	56 0b       	sbc	r21, r22
    3f08:	c9 0b       	sbc	r28, r25
    3f0a:	d0 09       	sbc	r29, r0
    3f0c:	c0 f7       	brcc	.-16     	; 0x3efe <__ftoa_engine+0x10a>
    3f0e:	e1 0c       	add	r14, r1
    3f10:	f1 1e       	adc	r15, r17
    3f12:	43 1f       	adc	r20, r19
    3f14:	56 1f       	adc	r21, r22
    3f16:	c9 1f       	adc	r28, r25
    3f18:	d0 1d       	adc	r29, r0
    3f1a:	7e f4       	brtc	.+30     	; 0x3f3a <__ftoa_engine+0x146>
    3f1c:	70 33       	cpi	r23, 0x30	; 48
    3f1e:	11 f4       	brne	.+4      	; 0x3f24 <__ftoa_engine+0x130>
    3f20:	8a 95       	dec	r24
    3f22:	e6 cf       	rjmp	.-52     	; 0x3ef0 <__ftoa_engine+0xfc>
    3f24:	e8 94       	clt
    3f26:	01 50       	subi	r16, 0x01	; 1
    3f28:	30 f0       	brcs	.+12     	; 0x3f36 <__ftoa_engine+0x142>
    3f2a:	08 0f       	add	r16, r24
    3f2c:	0a f4       	brpl	.+2      	; 0x3f30 <__ftoa_engine+0x13c>
    3f2e:	00 27       	eor	r16, r16
    3f30:	02 17       	cp	r16, r18
    3f32:	08 f4       	brcc	.+2      	; 0x3f36 <__ftoa_engine+0x142>
    3f34:	20 2f       	mov	r18, r16
    3f36:	23 95       	inc	r18
    3f38:	02 2f       	mov	r16, r18
    3f3a:	7a 33       	cpi	r23, 0x3A	; 58
    3f3c:	28 f0       	brcs	.+10     	; 0x3f48 <__ftoa_engine+0x154>
    3f3e:	79 e3       	ldi	r23, 0x39	; 57
    3f40:	7d 93       	st	X+, r23
    3f42:	2a 95       	dec	r18
    3f44:	e9 f7       	brne	.-6      	; 0x3f40 <__ftoa_engine+0x14c>
    3f46:	10 c0       	rjmp	.+32     	; 0x3f68 <__ftoa_engine+0x174>
    3f48:	7d 93       	st	X+, r23
    3f4a:	2a 95       	dec	r18
    3f4c:	89 f6       	brne	.-94     	; 0x3ef0 <__ftoa_engine+0xfc>
    3f4e:	06 94       	lsr	r0
    3f50:	97 95       	ror	r25
    3f52:	67 95       	ror	r22
    3f54:	37 95       	ror	r19
    3f56:	17 95       	ror	r17
    3f58:	17 94       	ror	r1
    3f5a:	e1 18       	sub	r14, r1
    3f5c:	f1 0a       	sbc	r15, r17
    3f5e:	43 0b       	sbc	r20, r19
    3f60:	56 0b       	sbc	r21, r22
    3f62:	c9 0b       	sbc	r28, r25
    3f64:	d0 09       	sbc	r29, r0
    3f66:	98 f0       	brcs	.+38     	; 0x3f8e <__ftoa_engine+0x19a>
    3f68:	23 95       	inc	r18
    3f6a:	7e 91       	ld	r23, -X
    3f6c:	73 95       	inc	r23
    3f6e:	7a 33       	cpi	r23, 0x3A	; 58
    3f70:	08 f0       	brcs	.+2      	; 0x3f74 <__ftoa_engine+0x180>
    3f72:	70 e3       	ldi	r23, 0x30	; 48
    3f74:	7c 93       	st	X, r23
    3f76:	20 13       	cpse	r18, r16
    3f78:	b8 f7       	brcc	.-18     	; 0x3f68 <__ftoa_engine+0x174>
    3f7a:	7e 91       	ld	r23, -X
    3f7c:	70 61       	ori	r23, 0x10	; 16
    3f7e:	7d 93       	st	X+, r23
    3f80:	30 f0       	brcs	.+12     	; 0x3f8e <__ftoa_engine+0x19a>
    3f82:	83 95       	inc	r24
    3f84:	71 e3       	ldi	r23, 0x31	; 49
    3f86:	7d 93       	st	X+, r23
    3f88:	70 e3       	ldi	r23, 0x30	; 48
    3f8a:	2a 95       	dec	r18
    3f8c:	e1 f7       	brne	.-8      	; 0x3f86 <__ftoa_engine+0x192>
    3f8e:	11 24       	eor	r1, r1
    3f90:	ef 90       	pop	r14
    3f92:	ff 90       	pop	r15
    3f94:	0f 91       	pop	r16
    3f96:	1f 91       	pop	r17
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	99 27       	eor	r25, r25
    3f9e:	87 fd       	sbrc	r24, 7
    3fa0:	90 95       	com	r25
    3fa2:	08 95       	ret

00003fa4 <strnlen_P>:
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	05 90       	lpm	r0, Z+
    3fa8:	61 50       	subi	r22, 0x01	; 1
    3faa:	70 40       	sbci	r23, 0x00	; 0
    3fac:	01 10       	cpse	r0, r1
    3fae:	d8 f7       	brcc	.-10     	; 0x3fa6 <strnlen_P+0x2>
    3fb0:	80 95       	com	r24
    3fb2:	90 95       	com	r25
    3fb4:	8e 0f       	add	r24, r30
    3fb6:	9f 1f       	adc	r25, r31
    3fb8:	08 95       	ret

00003fba <strnlen>:
    3fba:	fc 01       	movw	r30, r24
    3fbc:	61 50       	subi	r22, 0x01	; 1
    3fbe:	70 40       	sbci	r23, 0x00	; 0
    3fc0:	01 90       	ld	r0, Z+
    3fc2:	01 10       	cpse	r0, r1
    3fc4:	d8 f7       	brcc	.-10     	; 0x3fbc <strnlen+0x2>
    3fc6:	80 95       	com	r24
    3fc8:	90 95       	com	r25
    3fca:	8e 0f       	add	r24, r30
    3fcc:	9f 1f       	adc	r25, r31
    3fce:	08 95       	ret

00003fd0 <fputc>:
    3fd0:	0f 93       	push	r16
    3fd2:	1f 93       	push	r17
    3fd4:	cf 93       	push	r28
    3fd6:	df 93       	push	r29
    3fd8:	8c 01       	movw	r16, r24
    3fda:	eb 01       	movw	r28, r22
    3fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fde:	81 ff       	sbrs	r24, 1
    3fe0:	1b c0       	rjmp	.+54     	; 0x4018 <fputc+0x48>
    3fe2:	82 ff       	sbrs	r24, 2
    3fe4:	0d c0       	rjmp	.+26     	; 0x4000 <fputc+0x30>
    3fe6:	2e 81       	ldd	r18, Y+6	; 0x06
    3fe8:	3f 81       	ldd	r19, Y+7	; 0x07
    3fea:	8c 81       	ldd	r24, Y+4	; 0x04
    3fec:	9d 81       	ldd	r25, Y+5	; 0x05
    3fee:	28 17       	cp	r18, r24
    3ff0:	39 07       	cpc	r19, r25
    3ff2:	64 f4       	brge	.+24     	; 0x400c <fputc+0x3c>
    3ff4:	e8 81       	ld	r30, Y
    3ff6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ff8:	01 93       	st	Z+, r16
    3ffa:	f9 83       	std	Y+1, r31	; 0x01
    3ffc:	e8 83       	st	Y, r30
    3ffe:	06 c0       	rjmp	.+12     	; 0x400c <fputc+0x3c>
    4000:	e8 85       	ldd	r30, Y+8	; 0x08
    4002:	f9 85       	ldd	r31, Y+9	; 0x09
    4004:	80 2f       	mov	r24, r16
    4006:	09 95       	icall
    4008:	89 2b       	or	r24, r25
    400a:	31 f4       	brne	.+12     	; 0x4018 <fputc+0x48>
    400c:	8e 81       	ldd	r24, Y+6	; 0x06
    400e:	9f 81       	ldd	r25, Y+7	; 0x07
    4010:	01 96       	adiw	r24, 0x01	; 1
    4012:	9f 83       	std	Y+7, r25	; 0x07
    4014:	8e 83       	std	Y+6, r24	; 0x06
    4016:	02 c0       	rjmp	.+4      	; 0x401c <fputc+0x4c>
    4018:	0f ef       	ldi	r16, 0xFF	; 255
    401a:	1f ef       	ldi	r17, 0xFF	; 255
    401c:	c8 01       	movw	r24, r16
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	08 95       	ret

00004028 <__ultoa_invert>:
    4028:	fa 01       	movw	r30, r20
    402a:	aa 27       	eor	r26, r26
    402c:	28 30       	cpi	r18, 0x08	; 8
    402e:	51 f1       	breq	.+84     	; 0x4084 <__ultoa_invert+0x5c>
    4030:	20 31       	cpi	r18, 0x10	; 16
    4032:	81 f1       	breq	.+96     	; 0x4094 <__ultoa_invert+0x6c>
    4034:	e8 94       	clt
    4036:	6f 93       	push	r22
    4038:	6e 7f       	andi	r22, 0xFE	; 254
    403a:	6e 5f       	subi	r22, 0xFE	; 254
    403c:	7f 4f       	sbci	r23, 0xFF	; 255
    403e:	8f 4f       	sbci	r24, 0xFF	; 255
    4040:	9f 4f       	sbci	r25, 0xFF	; 255
    4042:	af 4f       	sbci	r26, 0xFF	; 255
    4044:	b1 e0       	ldi	r27, 0x01	; 1
    4046:	3e d0       	rcall	.+124    	; 0x40c4 <__ultoa_invert+0x9c>
    4048:	b4 e0       	ldi	r27, 0x04	; 4
    404a:	3c d0       	rcall	.+120    	; 0x40c4 <__ultoa_invert+0x9c>
    404c:	67 0f       	add	r22, r23
    404e:	78 1f       	adc	r23, r24
    4050:	89 1f       	adc	r24, r25
    4052:	9a 1f       	adc	r25, r26
    4054:	a1 1d       	adc	r26, r1
    4056:	68 0f       	add	r22, r24
    4058:	79 1f       	adc	r23, r25
    405a:	8a 1f       	adc	r24, r26
    405c:	91 1d       	adc	r25, r1
    405e:	a1 1d       	adc	r26, r1
    4060:	6a 0f       	add	r22, r26
    4062:	71 1d       	adc	r23, r1
    4064:	81 1d       	adc	r24, r1
    4066:	91 1d       	adc	r25, r1
    4068:	a1 1d       	adc	r26, r1
    406a:	20 d0       	rcall	.+64     	; 0x40ac <__ultoa_invert+0x84>
    406c:	09 f4       	brne	.+2      	; 0x4070 <__ultoa_invert+0x48>
    406e:	68 94       	set
    4070:	3f 91       	pop	r19
    4072:	2a e0       	ldi	r18, 0x0A	; 10
    4074:	26 9f       	mul	r18, r22
    4076:	11 24       	eor	r1, r1
    4078:	30 19       	sub	r19, r0
    407a:	30 5d       	subi	r19, 0xD0	; 208
    407c:	31 93       	st	Z+, r19
    407e:	de f6       	brtc	.-74     	; 0x4036 <__ultoa_invert+0xe>
    4080:	cf 01       	movw	r24, r30
    4082:	08 95       	ret
    4084:	46 2f       	mov	r20, r22
    4086:	47 70       	andi	r20, 0x07	; 7
    4088:	40 5d       	subi	r20, 0xD0	; 208
    408a:	41 93       	st	Z+, r20
    408c:	b3 e0       	ldi	r27, 0x03	; 3
    408e:	0f d0       	rcall	.+30     	; 0x40ae <__ultoa_invert+0x86>
    4090:	c9 f7       	brne	.-14     	; 0x4084 <__ultoa_invert+0x5c>
    4092:	f6 cf       	rjmp	.-20     	; 0x4080 <__ultoa_invert+0x58>
    4094:	46 2f       	mov	r20, r22
    4096:	4f 70       	andi	r20, 0x0F	; 15
    4098:	40 5d       	subi	r20, 0xD0	; 208
    409a:	4a 33       	cpi	r20, 0x3A	; 58
    409c:	18 f0       	brcs	.+6      	; 0x40a4 <__ultoa_invert+0x7c>
    409e:	49 5d       	subi	r20, 0xD9	; 217
    40a0:	31 fd       	sbrc	r19, 1
    40a2:	40 52       	subi	r20, 0x20	; 32
    40a4:	41 93       	st	Z+, r20
    40a6:	02 d0       	rcall	.+4      	; 0x40ac <__ultoa_invert+0x84>
    40a8:	a9 f7       	brne	.-22     	; 0x4094 <__ultoa_invert+0x6c>
    40aa:	ea cf       	rjmp	.-44     	; 0x4080 <__ultoa_invert+0x58>
    40ac:	b4 e0       	ldi	r27, 0x04	; 4
    40ae:	a6 95       	lsr	r26
    40b0:	97 95       	ror	r25
    40b2:	87 95       	ror	r24
    40b4:	77 95       	ror	r23
    40b6:	67 95       	ror	r22
    40b8:	ba 95       	dec	r27
    40ba:	c9 f7       	brne	.-14     	; 0x40ae <__ultoa_invert+0x86>
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	61 05       	cpc	r22, r1
    40c0:	71 05       	cpc	r23, r1
    40c2:	08 95       	ret
    40c4:	9b 01       	movw	r18, r22
    40c6:	ac 01       	movw	r20, r24
    40c8:	0a 2e       	mov	r0, r26
    40ca:	06 94       	lsr	r0
    40cc:	57 95       	ror	r21
    40ce:	47 95       	ror	r20
    40d0:	37 95       	ror	r19
    40d2:	27 95       	ror	r18
    40d4:	ba 95       	dec	r27
    40d6:	c9 f7       	brne	.-14     	; 0x40ca <__ultoa_invert+0xa2>
    40d8:	62 0f       	add	r22, r18
    40da:	73 1f       	adc	r23, r19
    40dc:	84 1f       	adc	r24, r20
    40de:	95 1f       	adc	r25, r21
    40e0:	a0 1d       	adc	r26, r0
    40e2:	08 95       	ret

000040e4 <_exit>:
    40e4:	f8 94       	cli

000040e6 <__stop_program>:
    40e6:	ff cf       	rjmp	.-2      	; 0x40e6 <__stop_program>
