
Two_MCU_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00002ac2  00002b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008001a8  008001a8  00002c9e  2**0
                  ALLOC
  3 .stab         00003a20  00000000  00000000  00002ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001319  00000000  00000000  000066c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000079d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b4  00000000  00000000  00007b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001ee6  00000000  00000000  00007ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fbc  00000000  00000000  0000acd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bc90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bd  00000000  00000000  0000be10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  0000c0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_6>
      1c:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_13>
      38:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 14 	call	0x282c	; 0x282c <main>
      8a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
      9e:	dc 01       	movw	r26, r24
      a0:	2b 01       	movw	r4, r22
      a2:	fa 01       	movw	r30, r20
      a4:	9c 91       	ld	r25, X
      a6:	92 30       	cpi	r25, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	39 c1       	rjmp	.+626    	; 0x31e <_fpadd_parts+0x28c>
      ac:	eb 01       	movw	r28, r22
      ae:	88 81       	ld	r24, Y
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	33 c1       	rjmp	.+614    	; 0x31c <_fpadd_parts+0x28a>
      b6:	94 30       	cpi	r25, 0x04	; 4
      b8:	69 f4       	brne	.+26     	; 0xd4 <_fpadd_parts+0x42>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	2f c1       	rjmp	.+606    	; 0x31e <_fpadd_parts+0x28c>
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	9c 91       	ld	r25, X
      c4:	11 97       	sbiw	r26, 0x01	; 1
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	28 c1       	rjmp	.+592    	; 0x31e <_fpadd_parts+0x28c>
      ce:	af e8       	ldi	r26, 0x8F	; 143
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	25 c1       	rjmp	.+586    	; 0x31e <_fpadd_parts+0x28c>
      d4:	84 30       	cpi	r24, 0x04	; 4
      d6:	09 f4       	brne	.+2      	; 0xda <_fpadd_parts+0x48>
      d8:	21 c1       	rjmp	.+578    	; 0x31c <_fpadd_parts+0x28a>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a9 f4       	brne	.+42     	; 0x108 <_fpadd_parts+0x76>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	09 f0       	breq	.+2      	; 0xe4 <_fpadd_parts+0x52>
      e2:	1d c1       	rjmp	.+570    	; 0x31e <_fpadd_parts+0x28c>
      e4:	9a 01       	movw	r18, r20
      e6:	ad 01       	movw	r20, r26
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	ea 01       	movw	r28, r20
      ec:	09 90       	ld	r0, Y+
      ee:	ae 01       	movw	r20, r28
      f0:	e9 01       	movw	r28, r18
      f2:	09 92       	st	Y+, r0
      f4:	9e 01       	movw	r18, r28
      f6:	81 50       	subi	r24, 0x01	; 1
      f8:	c1 f7       	brne	.-16     	; 0xea <_fpadd_parts+0x58>
      fa:	e2 01       	movw	r28, r4
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	89 23       	and	r24, r25
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 c1       	rjmp	.+528    	; 0x318 <_fpadd_parts+0x286>
     108:	92 30       	cpi	r25, 0x02	; 2
     10a:	09 f4       	brne	.+2      	; 0x10e <_fpadd_parts+0x7c>
     10c:	07 c1       	rjmp	.+526    	; 0x31c <_fpadd_parts+0x28a>
     10e:	12 96       	adiw	r26, 0x02	; 2
     110:	2d 90       	ld	r2, X+
     112:	3c 90       	ld	r3, X
     114:	13 97       	sbiw	r26, 0x03	; 3
     116:	eb 01       	movw	r28, r22
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	14 96       	adiw	r26, 0x04	; 4
     11e:	ad 90       	ld	r10, X+
     120:	bd 90       	ld	r11, X+
     122:	cd 90       	ld	r12, X+
     124:	dc 90       	ld	r13, X
     126:	17 97       	sbiw	r26, 0x07	; 7
     128:	ec 80       	ldd	r14, Y+4	; 0x04
     12a:	fd 80       	ldd	r15, Y+5	; 0x05
     12c:	0e 81       	ldd	r16, Y+6	; 0x06
     12e:	1f 81       	ldd	r17, Y+7	; 0x07
     130:	91 01       	movw	r18, r2
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	b9 01       	movw	r22, r18
     138:	37 ff       	sbrs	r19, 7
     13a:	04 c0       	rjmp	.+8      	; 0x144 <_fpadd_parts+0xb2>
     13c:	66 27       	eor	r22, r22
     13e:	77 27       	eor	r23, r23
     140:	62 1b       	sub	r22, r18
     142:	73 0b       	sbc	r23, r19
     144:	60 32       	cpi	r22, 0x20	; 32
     146:	71 05       	cpc	r23, r1
     148:	0c f0       	brlt	.+2      	; 0x14c <_fpadd_parts+0xba>
     14a:	61 c0       	rjmp	.+194    	; 0x20e <_fpadd_parts+0x17c>
     14c:	12 16       	cp	r1, r18
     14e:	13 06       	cpc	r1, r19
     150:	6c f5       	brge	.+90     	; 0x1ac <_fpadd_parts+0x11a>
     152:	37 01       	movw	r6, r14
     154:	48 01       	movw	r8, r16
     156:	06 2e       	mov	r0, r22
     158:	04 c0       	rjmp	.+8      	; 0x162 <_fpadd_parts+0xd0>
     15a:	96 94       	lsr	r9
     15c:	87 94       	ror	r8
     15e:	77 94       	ror	r7
     160:	67 94       	ror	r6
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <_fpadd_parts+0xc8>
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	04 c0       	rjmp	.+8      	; 0x178 <_fpadd_parts+0xe6>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	6a 95       	dec	r22
     17a:	d2 f7       	brpl	.-12     	; 0x170 <_fpadd_parts+0xde>
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	30 40       	sbci	r19, 0x00	; 0
     180:	40 40       	sbci	r20, 0x00	; 0
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	2e 21       	and	r18, r14
     186:	3f 21       	and	r19, r15
     188:	40 23       	and	r20, r16
     18a:	51 23       	and	r21, r17
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	41 05       	cpc	r20, r1
     192:	51 05       	cpc	r21, r1
     194:	21 f0       	breq	.+8      	; 0x19e <_fpadd_parts+0x10c>
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	79 01       	movw	r14, r18
     1a0:	8a 01       	movw	r16, r20
     1a2:	e6 28       	or	r14, r6
     1a4:	f7 28       	or	r15, r7
     1a6:	08 29       	or	r16, r8
     1a8:	19 29       	or	r17, r9
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <_fpadd_parts+0x192>
     1ac:	23 2b       	or	r18, r19
     1ae:	d1 f1       	breq	.+116    	; 0x224 <_fpadd_parts+0x192>
     1b0:	26 0e       	add	r2, r22
     1b2:	37 1e       	adc	r3, r23
     1b4:	35 01       	movw	r6, r10
     1b6:	46 01       	movw	r8, r12
     1b8:	06 2e       	mov	r0, r22
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0x132>
     1bc:	96 94       	lsr	r9
     1be:	87 94       	ror	r8
     1c0:	77 94       	ror	r7
     1c2:	67 94       	ror	r6
     1c4:	0a 94       	dec	r0
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0x12a>
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <_fpadd_parts+0x148>
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	44 1f       	adc	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	d2 f7       	brpl	.-12     	; 0x1d2 <_fpadd_parts+0x140>
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	30 40       	sbci	r19, 0x00	; 0
     1e2:	40 40       	sbci	r20, 0x00	; 0
     1e4:	50 40       	sbci	r21, 0x00	; 0
     1e6:	2a 21       	and	r18, r10
     1e8:	3b 21       	and	r19, r11
     1ea:	4c 21       	and	r20, r12
     1ec:	5d 21       	and	r21, r13
     1ee:	21 15       	cp	r18, r1
     1f0:	31 05       	cpc	r19, r1
     1f2:	41 05       	cpc	r20, r1
     1f4:	51 05       	cpc	r21, r1
     1f6:	21 f0       	breq	.+8      	; 0x200 <_fpadd_parts+0x16e>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	59 01       	movw	r10, r18
     202:	6a 01       	movw	r12, r20
     204:	a6 28       	or	r10, r6
     206:	b7 28       	or	r11, r7
     208:	c8 28       	or	r12, r8
     20a:	d9 28       	or	r13, r9
     20c:	0b c0       	rjmp	.+22     	; 0x224 <_fpadd_parts+0x192>
     20e:	82 15       	cp	r24, r2
     210:	93 05       	cpc	r25, r3
     212:	2c f0       	brlt	.+10     	; 0x21e <_fpadd_parts+0x18c>
     214:	1c 01       	movw	r2, r24
     216:	aa 24       	eor	r10, r10
     218:	bb 24       	eor	r11, r11
     21a:	65 01       	movw	r12, r10
     21c:	03 c0       	rjmp	.+6      	; 0x224 <_fpadd_parts+0x192>
     21e:	ee 24       	eor	r14, r14
     220:	ff 24       	eor	r15, r15
     222:	87 01       	movw	r16, r14
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	9c 91       	ld	r25, X
     228:	d2 01       	movw	r26, r4
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	98 17       	cp	r25, r24
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x1a2>
     232:	45 c0       	rjmp	.+138    	; 0x2be <_fpadd_parts+0x22c>
     234:	99 23       	and	r25, r25
     236:	39 f0       	breq	.+14     	; 0x246 <_fpadd_parts+0x1b4>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	2a 19       	sub	r18, r10
     23e:	3b 09       	sbc	r19, r11
     240:	4c 09       	sbc	r20, r12
     242:	5d 09       	sbc	r21, r13
     244:	06 c0       	rjmp	.+12     	; 0x252 <_fpadd_parts+0x1c0>
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	2e 19       	sub	r18, r14
     24c:	3f 09       	sbc	r19, r15
     24e:	40 0b       	sbc	r20, r16
     250:	51 0b       	sbc	r21, r17
     252:	57 fd       	sbrc	r21, 7
     254:	08 c0       	rjmp	.+16     	; 0x266 <_fpadd_parts+0x1d4>
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	33 82       	std	Z+3, r3	; 0x03
     25a:	22 82       	std	Z+2, r2	; 0x02
     25c:	24 83       	std	Z+4, r18	; 0x04
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	46 83       	std	Z+6, r20	; 0x06
     262:	57 83       	std	Z+7, r21	; 0x07
     264:	1d c0       	rjmp	.+58     	; 0x2a0 <_fpadd_parts+0x20e>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	33 82       	std	Z+3, r3	; 0x03
     26c:	22 82       	std	Z+2, r2	; 0x02
     26e:	88 27       	eor	r24, r24
     270:	99 27       	eor	r25, r25
     272:	dc 01       	movw	r26, r24
     274:	82 1b       	sub	r24, r18
     276:	93 0b       	sbc	r25, r19
     278:	a4 0b       	sbc	r26, r20
     27a:	b5 0b       	sbc	r27, r21
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	95 83       	std	Z+5, r25	; 0x05
     280:	a6 83       	std	Z+6, r26	; 0x06
     282:	b7 83       	std	Z+7, r27	; 0x07
     284:	0d c0       	rjmp	.+26     	; 0x2a0 <_fpadd_parts+0x20e>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	44 1f       	adc	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	24 83       	std	Z+4, r18	; 0x04
     290:	35 83       	std	Z+5, r19	; 0x05
     292:	46 83       	std	Z+6, r20	; 0x06
     294:	57 83       	std	Z+7, r21	; 0x07
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	24 81       	ldd	r18, Z+4	; 0x04
     2a2:	35 81       	ldd	r19, Z+5	; 0x05
     2a4:	46 81       	ldd	r20, Z+6	; 0x06
     2a6:	57 81       	ldd	r21, Z+7	; 0x07
     2a8:	da 01       	movw	r26, r20
     2aa:	c9 01       	movw	r24, r18
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	af 4f       	sbci	r26, 0xFF	; 255
     2b8:	bf 43       	sbci	r27, 0x3F	; 63
     2ba:	28 f3       	brcs	.-54     	; 0x286 <_fpadd_parts+0x1f4>
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <_fpadd_parts+0x242>
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	33 82       	std	Z+3, r3	; 0x03
     2c2:	22 82       	std	Z+2, r2	; 0x02
     2c4:	ea 0c       	add	r14, r10
     2c6:	fb 1c       	adc	r15, r11
     2c8:	0c 1d       	adc	r16, r12
     2ca:	1d 1d       	adc	r17, r13
     2cc:	e4 82       	std	Z+4, r14	; 0x04
     2ce:	f5 82       	std	Z+5, r15	; 0x05
     2d0:	06 83       	std	Z+6, r16	; 0x06
     2d2:	17 83       	std	Z+7, r17	; 0x07
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	24 81       	ldd	r18, Z+4	; 0x04
     2da:	35 81       	ldd	r19, Z+5	; 0x05
     2dc:	46 81       	ldd	r20, Z+6	; 0x06
     2de:	57 81       	ldd	r21, Z+7	; 0x07
     2e0:	57 ff       	sbrs	r21, 7
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <_fpadd_parts+0x286>
     2e4:	c9 01       	movw	r24, r18
     2e6:	aa 27       	eor	r26, r26
     2e8:	97 fd       	sbrc	r25, 7
     2ea:	a0 95       	com	r26
     2ec:	ba 2f       	mov	r27, r26
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	a0 70       	andi	r26, 0x00	; 0
     2f4:	b0 70       	andi	r27, 0x00	; 0
     2f6:	56 95       	lsr	r21
     2f8:	47 95       	ror	r20
     2fa:	37 95       	ror	r19
     2fc:	27 95       	ror	r18
     2fe:	82 2b       	or	r24, r18
     300:	93 2b       	or	r25, r19
     302:	a4 2b       	or	r26, r20
     304:	b5 2b       	or	r27, r21
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	a6 83       	std	Z+6, r26	; 0x06
     30c:	b7 83       	std	Z+7, r27	; 0x07
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 01       	movw	r26, r30
     31a:	01 c0       	rjmp	.+2      	; 0x31e <_fpadd_parts+0x28c>
     31c:	d2 01       	movw	r26, r4
     31e:	cd 01       	movw	r24, r26
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	e2 e1       	ldi	r30, 0x12	; 18
     326:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

0000032a <__subsf3>:
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	2d 83       	std	Y+5, r18	; 0x05
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	4f 83       	std	Y+7, r20	; 0x07
     344:	58 87       	std	Y+8, r21	; 0x08
     346:	e9 e0       	ldi	r30, 0x09	; 9
     348:	ee 2e       	mov	r14, r30
     34a:	f1 2c       	mov	r15, r1
     34c:	ec 0e       	add	r14, r28
     34e:	fd 1e       	adc	r15, r29
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	b7 01       	movw	r22, r14
     356:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5e       	subi	r16, 0xEF	; 239
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	ce 01       	movw	r24, r28
     362:	05 96       	adiw	r24, 0x05	; 5
     364:	b8 01       	movw	r22, r16
     366:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     36a:	8a 89       	ldd	r24, Y+18	; 0x12
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 27       	eor	r24, r25
     370:	8a 8b       	std	Y+18, r24	; 0x12
     372:	c7 01       	movw	r24, r14
     374:	b8 01       	movw	r22, r16
     376:	ae 01       	movw	r20, r28
     378:	47 5e       	subi	r20, 0xE7	; 231
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     380:	0e 94 c7 04 	call	0x98e	; 0x98e <__pack_f>
     384:	a0 96       	adiw	r28, 0x20	; 32
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

0000038c <__addsf3>:
     38c:	a0 e2       	ldi	r26, 0x20	; 32
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	7a 83       	std	Y+2, r23	; 0x02
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	ec 0e       	add	r14, r28
     3b0:	fd 1e       	adc	r15, r29
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5e       	subi	r16, 0xEF	; 239
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	b8 01       	movw	r22, r16
     3c8:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     3cc:	c7 01       	movw	r24, r14
     3ce:	b8 01       	movw	r22, r16
     3d0:	ae 01       	movw	r20, r28
     3d2:	47 5e       	subi	r20, 0xE7	; 231
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3da:	0e 94 c7 04 	call	0x98e	; 0x98e <__pack_f>
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	e6 e0       	ldi	r30, 0x06	; 6
     3e2:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

000003e6 <__mulsf3>:
     3e6:	a0 e2       	ldi	r26, 0x20	; 32
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e9 ef       	ldi	r30, 0xF9	; 249
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
     3f2:	69 83       	std	Y+1, r22	; 0x01
     3f4:	7a 83       	std	Y+2, r23	; 0x02
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	2d 83       	std	Y+5, r18	; 0x05
     3fc:	3e 83       	std	Y+6, r19	; 0x06
     3fe:	4f 83       	std	Y+7, r20	; 0x07
     400:	58 87       	std	Y+8, r21	; 0x08
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	be 01       	movw	r22, r28
     408:	67 5f       	subi	r22, 0xF7	; 247
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     410:	ce 01       	movw	r24, r28
     412:	05 96       	adiw	r24, 0x05	; 5
     414:	be 01       	movw	r22, r28
     416:	6f 5e       	subi	r22, 0xEF	; 239
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     41e:	99 85       	ldd	r25, Y+9	; 0x09
     420:	92 30       	cpi	r25, 0x02	; 2
     422:	88 f0       	brcs	.+34     	; 0x446 <__mulsf3+0x60>
     424:	89 89       	ldd	r24, Y+17	; 0x11
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	c8 f0       	brcs	.+50     	; 0x45c <__mulsf3+0x76>
     42a:	94 30       	cpi	r25, 0x04	; 4
     42c:	19 f4       	brne	.+6      	; 0x434 <__mulsf3+0x4e>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	51 f4       	brne	.+20     	; 0x446 <__mulsf3+0x60>
     432:	04 c0       	rjmp	.+8      	; 0x43c <__mulsf3+0x56>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	29 f4       	brne	.+10     	; 0x442 <__mulsf3+0x5c>
     438:	92 30       	cpi	r25, 0x02	; 2
     43a:	81 f4       	brne	.+32     	; 0x45c <__mulsf3+0x76>
     43c:	8f e8       	ldi	r24, 0x8F	; 143
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	c6 c0       	rjmp	.+396    	; 0x5ce <__mulsf3+0x1e8>
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	49 f4       	brne	.+18     	; 0x458 <__mulsf3+0x72>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	9a 85       	ldd	r25, Y+10	; 0x0a
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	98 13       	cpse	r25, r24
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	2a 87       	std	Y+10, r18	; 0x0a
     452:	ce 01       	movw	r24, r28
     454:	09 96       	adiw	r24, 0x09	; 9
     456:	bb c0       	rjmp	.+374    	; 0x5ce <__mulsf3+0x1e8>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	49 f4       	brne	.+18     	; 0x46e <__mulsf3+0x88>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	9a 85       	ldd	r25, Y+10	; 0x0a
     460:	8a 89       	ldd	r24, Y+18	; 0x12
     462:	98 13       	cpse	r25, r24
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	2a 8b       	std	Y+18, r18	; 0x12
     468:	ce 01       	movw	r24, r28
     46a:	41 96       	adiw	r24, 0x11	; 17
     46c:	b0 c0       	rjmp	.+352    	; 0x5ce <__mulsf3+0x1e8>
     46e:	2d 84       	ldd	r2, Y+13	; 0x0d
     470:	3e 84       	ldd	r3, Y+14	; 0x0e
     472:	4f 84       	ldd	r4, Y+15	; 0x0f
     474:	58 88       	ldd	r5, Y+16	; 0x10
     476:	6d 88       	ldd	r6, Y+21	; 0x15
     478:	7e 88       	ldd	r7, Y+22	; 0x16
     47a:	8f 88       	ldd	r8, Y+23	; 0x17
     47c:	98 8c       	ldd	r9, Y+24	; 0x18
     47e:	ee 24       	eor	r14, r14
     480:	ff 24       	eor	r15, r15
     482:	87 01       	movw	r16, r14
     484:	aa 24       	eor	r10, r10
     486:	bb 24       	eor	r11, r11
     488:	65 01       	movw	r12, r10
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	c1 01       	movw	r24, r2
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	90 70       	andi	r25, 0x00	; 0
     49c:	89 2b       	or	r24, r25
     49e:	e9 f0       	breq	.+58     	; 0x4da <__mulsf3+0xf4>
     4a0:	e6 0c       	add	r14, r6
     4a2:	f7 1c       	adc	r15, r7
     4a4:	08 1d       	adc	r16, r8
     4a6:	19 1d       	adc	r17, r9
     4a8:	9a 01       	movw	r18, r20
     4aa:	ab 01       	movw	r20, r22
     4ac:	2a 0d       	add	r18, r10
     4ae:	3b 1d       	adc	r19, r11
     4b0:	4c 1d       	adc	r20, r12
     4b2:	5d 1d       	adc	r21, r13
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e6 14       	cp	r14, r6
     4be:	f7 04       	cpc	r15, r7
     4c0:	08 05       	cpc	r16, r8
     4c2:	19 05       	cpc	r17, r9
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__mulsf3+0xe8>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	ba 01       	movw	r22, r20
     4d0:	a9 01       	movw	r20, r18
     4d2:	48 0f       	add	r20, r24
     4d4:	59 1f       	adc	r21, r25
     4d6:	6a 1f       	adc	r22, r26
     4d8:	7b 1f       	adc	r23, r27
     4da:	aa 0c       	add	r10, r10
     4dc:	bb 1c       	adc	r11, r11
     4de:	cc 1c       	adc	r12, r12
     4e0:	dd 1c       	adc	r13, r13
     4e2:	97 fe       	sbrs	r9, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__mulsf3+0x110>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	a8 2a       	or	r10, r24
     4f0:	b9 2a       	or	r11, r25
     4f2:	ca 2a       	or	r12, r26
     4f4:	db 2a       	or	r13, r27
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	e0 32       	cpi	r30, 0x20	; 32
     4fa:	f1 05       	cpc	r31, r1
     4fc:	49 f0       	breq	.+18     	; 0x510 <__mulsf3+0x12a>
     4fe:	66 0c       	add	r6, r6
     500:	77 1c       	adc	r7, r7
     502:	88 1c       	adc	r8, r8
     504:	99 1c       	adc	r9, r9
     506:	56 94       	lsr	r5
     508:	47 94       	ror	r4
     50a:	37 94       	ror	r3
     50c:	27 94       	ror	r2
     50e:	c3 cf       	rjmp	.-122    	; 0x496 <__mulsf3+0xb0>
     510:	fa 85       	ldd	r31, Y+10	; 0x0a
     512:	ea 89       	ldd	r30, Y+18	; 0x12
     514:	2b 89       	ldd	r18, Y+19	; 0x13
     516:	3c 89       	ldd	r19, Y+20	; 0x14
     518:	8b 85       	ldd	r24, Y+11	; 0x0b
     51a:	9c 85       	ldd	r25, Y+12	; 0x0c
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	2e 5f       	subi	r18, 0xFE	; 254
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	17 c0       	rjmp	.+46     	; 0x554 <__mulsf3+0x16e>
     526:	ca 01       	movw	r24, r20
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	61 f0       	breq	.+24     	; 0x548 <__mulsf3+0x162>
     530:	16 95       	lsr	r17
     532:	07 95       	ror	r16
     534:	f7 94       	ror	r15
     536:	e7 94       	ror	r14
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b0 e8       	ldi	r27, 0x80	; 128
     540:	e8 2a       	or	r14, r24
     542:	f9 2a       	or	r15, r25
     544:	0a 2b       	or	r16, r26
     546:	1b 2b       	or	r17, r27
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	57 95       	ror	r21
     54e:	47 95       	ror	r20
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	77 fd       	sbrc	r23, 7
     556:	e7 cf       	rjmp	.-50     	; 0x526 <__mulsf3+0x140>
     558:	0c c0       	rjmp	.+24     	; 0x572 <__mulsf3+0x18c>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	66 1f       	adc	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	17 fd       	sbrc	r17, 7
     564:	41 60       	ori	r20, 0x01	; 1
     566:	ee 0c       	add	r14, r14
     568:	ff 1c       	adc	r15, r15
     56a:	00 1f       	adc	r16, r16
     56c:	11 1f       	adc	r17, r17
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	40 30       	cpi	r20, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	59 07       	cpc	r21, r25
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	69 07       	cpc	r22, r25
     57c:	90 e4       	ldi	r25, 0x40	; 64
     57e:	79 07       	cpc	r23, r25
     580:	60 f3       	brcs	.-40     	; 0x55a <__mulsf3+0x174>
     582:	2b 8f       	std	Y+27, r18	; 0x1b
     584:	3c 8f       	std	Y+28, r19	; 0x1c
     586:	db 01       	movw	r26, r22
     588:	ca 01       	movw	r24, r20
     58a:	8f 77       	andi	r24, 0x7F	; 127
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	a0 70       	andi	r26, 0x00	; 0
     590:	b0 70       	andi	r27, 0x00	; 0
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	91 05       	cpc	r25, r1
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	61 f4       	brne	.+24     	; 0x5b4 <__mulsf3+0x1ce>
     59c:	47 fd       	sbrc	r20, 7
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <__mulsf3+0x1ce>
     5a0:	e1 14       	cp	r14, r1
     5a2:	f1 04       	cpc	r15, r1
     5a4:	01 05       	cpc	r16, r1
     5a6:	11 05       	cpc	r17, r1
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <__mulsf3+0x1ce>
     5aa:	40 5c       	subi	r20, 0xC0	; 192
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	6f 4f       	sbci	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	40 78       	andi	r20, 0x80	; 128
     5b4:	1a 8e       	std	Y+26, r1	; 0x1a
     5b6:	fe 17       	cp	r31, r30
     5b8:	11 f0       	breq	.+4      	; 0x5be <__mulsf3+0x1d8>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	8a 8f       	std	Y+26, r24	; 0x1a
     5be:	4d 8f       	std	Y+29, r20	; 0x1d
     5c0:	5e 8f       	std	Y+30, r21	; 0x1e
     5c2:	6f 8f       	std	Y+31, r22	; 0x1f
     5c4:	78 a3       	std	Y+32, r23	; 0x20
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	89 8f       	std	Y+25, r24	; 0x19
     5ca:	ce 01       	movw	r24, r28
     5cc:	49 96       	adiw	r24, 0x19	; 25
     5ce:	0e 94 c7 04 	call	0x98e	; 0x98e <__pack_f>
     5d2:	a0 96       	adiw	r28, 0x20	; 32
     5d4:	e2 e1       	ldi	r30, 0x12	; 18
     5d6:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

000005da <__nesf2>:
     5da:	a8 e1       	ldi	r26, 0x18	; 24
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e3 ef       	ldi	r30, 0xF3	; 243
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     5e6:	69 83       	std	Y+1, r22	; 0x01
     5e8:	7a 83       	std	Y+2, r23	; 0x02
     5ea:	8b 83       	std	Y+3, r24	; 0x03
     5ec:	9c 83       	std	Y+4, r25	; 0x04
     5ee:	2d 83       	std	Y+5, r18	; 0x05
     5f0:	3e 83       	std	Y+6, r19	; 0x06
     5f2:	4f 83       	std	Y+7, r20	; 0x07
     5f4:	58 87       	std	Y+8, r21	; 0x08
     5f6:	89 e0       	ldi	r24, 0x09	; 9
     5f8:	e8 2e       	mov	r14, r24
     5fa:	f1 2c       	mov	r15, r1
     5fc:	ec 0e       	add	r14, r28
     5fe:	fd 1e       	adc	r15, r29
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	b7 01       	movw	r22, r14
     606:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     60a:	8e 01       	movw	r16, r28
     60c:	0f 5e       	subi	r16, 0xEF	; 239
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	ce 01       	movw	r24, r28
     612:	05 96       	adiw	r24, 0x05	; 5
     614:	b8 01       	movw	r22, r16
     616:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	82 30       	cpi	r24, 0x02	; 2
     61e:	40 f0       	brcs	.+16     	; 0x630 <__nesf2+0x56>
     620:	89 89       	ldd	r24, Y+17	; 0x11
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	28 f0       	brcs	.+10     	; 0x630 <__nesf2+0x56>
     626:	c7 01       	movw	r24, r14
     628:	b8 01       	movw	r22, r16
     62a:	0e 94 14 06 	call	0xc28	; 0xc28 <__fpcmp_parts_f>
     62e:	01 c0       	rjmp	.+2      	; 0x632 <__nesf2+0x58>
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	68 96       	adiw	r28, 0x18	; 24
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

0000063a <__ltsf2>:
     63a:	a8 e1       	ldi	r26, 0x18	; 24
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0x18>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	89 e0       	ldi	r24, 0x09	; 9
     658:	e8 2e       	mov	r14, r24
     65a:	f1 2c       	mov	r15, r1
     65c:	ec 0e       	add	r14, r28
     65e:	fd 1e       	adc	r15, r29
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	b7 01       	movw	r22, r14
     666:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     66a:	8e 01       	movw	r16, r28
     66c:	0f 5e       	subi	r16, 0xEF	; 239
     66e:	1f 4f       	sbci	r17, 0xFF	; 255
     670:	ce 01       	movw	r24, r28
     672:	05 96       	adiw	r24, 0x05	; 5
     674:	b8 01       	movw	r22, r16
     676:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     67a:	89 85       	ldd	r24, Y+9	; 0x09
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	40 f0       	brcs	.+16     	; 0x690 <__ltsf2+0x56>
     680:	89 89       	ldd	r24, Y+17	; 0x11
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	28 f0       	brcs	.+10     	; 0x690 <__ltsf2+0x56>
     686:	c7 01       	movw	r24, r14
     688:	b8 01       	movw	r22, r16
     68a:	0e 94 14 06 	call	0xc28	; 0xc28 <__fpcmp_parts_f>
     68e:	01 c0       	rjmp	.+2      	; 0x692 <__ltsf2+0x58>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	68 96       	adiw	r28, 0x18	; 24
     694:	e6 e0       	ldi	r30, 0x06	; 6
     696:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0x18>

0000069a <__floatsisf>:
     69a:	a8 e0       	ldi	r26, 0x08	; 8
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__prologue_saves__+0x12>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	da 01       	movw	r26, r20
     6b0:	c9 01       	movw	r24, r18
     6b2:	88 27       	eor	r24, r24
     6b4:	b7 fd       	sbrc	r27, 7
     6b6:	83 95       	inc	r24
     6b8:	99 27       	eor	r25, r25
     6ba:	aa 27       	eor	r26, r26
     6bc:	bb 27       	eor	r27, r27
     6be:	b8 2e       	mov	r11, r24
     6c0:	21 15       	cp	r18, r1
     6c2:	31 05       	cpc	r19, r1
     6c4:	41 05       	cpc	r20, r1
     6c6:	51 05       	cpc	r21, r1
     6c8:	19 f4       	brne	.+6      	; 0x6d0 <__floatsisf+0x36>
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	3a c0       	rjmp	.+116    	; 0x744 <__floatsisf+0xaa>
     6d0:	88 23       	and	r24, r24
     6d2:	a9 f0       	breq	.+42     	; 0x6fe <__floatsisf+0x64>
     6d4:	20 30       	cpi	r18, 0x00	; 0
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	38 07       	cpc	r19, r24
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	48 07       	cpc	r20, r24
     6de:	80 e8       	ldi	r24, 0x80	; 128
     6e0:	58 07       	cpc	r21, r24
     6e2:	29 f4       	brne	.+10     	; 0x6ee <__floatsisf+0x54>
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	9f ec       	ldi	r25, 0xCF	; 207
     6ec:	30 c0       	rjmp	.+96     	; 0x74e <__floatsisf+0xb4>
     6ee:	ee 24       	eor	r14, r14
     6f0:	ff 24       	eor	r15, r15
     6f2:	87 01       	movw	r16, r14
     6f4:	e2 1a       	sub	r14, r18
     6f6:	f3 0a       	sbc	r15, r19
     6f8:	04 0b       	sbc	r16, r20
     6fa:	15 0b       	sbc	r17, r21
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <__floatsisf+0x68>
     6fe:	79 01       	movw	r14, r18
     700:	8a 01       	movw	r16, r20
     702:	8e e1       	ldi	r24, 0x1E	; 30
     704:	c8 2e       	mov	r12, r24
     706:	d1 2c       	mov	r13, r1
     708:	dc 82       	std	Y+4, r13	; 0x04
     70a:	cb 82       	std	Y+3, r12	; 0x03
     70c:	ed 82       	std	Y+5, r14	; 0x05
     70e:	fe 82       	std	Y+6, r15	; 0x06
     710:	0f 83       	std	Y+7, r16	; 0x07
     712:	18 87       	std	Y+8, r17	; 0x08
     714:	c8 01       	movw	r24, r16
     716:	b7 01       	movw	r22, r14
     718:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__clzsi2>
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	18 16       	cp	r1, r24
     720:	19 06       	cpc	r1, r25
     722:	84 f4       	brge	.+32     	; 0x744 <__floatsisf+0xaa>
     724:	08 2e       	mov	r0, r24
     726:	04 c0       	rjmp	.+8      	; 0x730 <__floatsisf+0x96>
     728:	ee 0c       	add	r14, r14
     72a:	ff 1c       	adc	r15, r15
     72c:	00 1f       	adc	r16, r16
     72e:	11 1f       	adc	r17, r17
     730:	0a 94       	dec	r0
     732:	d2 f7       	brpl	.-12     	; 0x728 <__floatsisf+0x8e>
     734:	ed 82       	std	Y+5, r14	; 0x05
     736:	fe 82       	std	Y+6, r15	; 0x06
     738:	0f 83       	std	Y+7, r16	; 0x07
     73a:	18 87       	std	Y+8, r17	; 0x08
     73c:	c8 1a       	sub	r12, r24
     73e:	d9 0a       	sbc	r13, r25
     740:	dc 82       	std	Y+4, r13	; 0x04
     742:	cb 82       	std	Y+3, r12	; 0x03
     744:	ba 82       	std	Y+2, r11	; 0x02
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	0e 94 c7 04 	call	0x98e	; 0x98e <__pack_f>
     74e:	28 96       	adiw	r28, 0x08	; 8
     750:	e9 e0       	ldi	r30, 0x09	; 9
     752:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__epilogue_restores__+0x12>

00000756 <__fixsfsi>:
     756:	ac e0       	ldi	r26, 0x0C	; 12
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e1 eb       	ldi	r30, 0xB1	; 177
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__+0x20>
     762:	69 83       	std	Y+1, r22	; 0x01
     764:	7a 83       	std	Y+2, r23	; 0x02
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	ce 01       	movw	r24, r28
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	be 01       	movw	r22, r28
     770:	6b 5f       	subi	r22, 0xFB	; 251
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 9c 05 	call	0xb38	; 0xb38 <__unpack_f>
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	61 f1       	breq	.+88     	; 0x7d6 <__fixsfsi+0x80>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	50 f1       	brcs	.+84     	; 0x7d6 <__fixsfsi+0x80>
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	21 f4       	brne	.+8      	; 0x78e <__fixsfsi+0x38>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	88 23       	and	r24, r24
     78a:	51 f1       	breq	.+84     	; 0x7e0 <__fixsfsi+0x8a>
     78c:	2e c0       	rjmp	.+92     	; 0x7ea <__fixsfsi+0x94>
     78e:	2f 81       	ldd	r18, Y+7	; 0x07
     790:	38 85       	ldd	r19, Y+8	; 0x08
     792:	37 fd       	sbrc	r19, 7
     794:	20 c0       	rjmp	.+64     	; 0x7d6 <__fixsfsi+0x80>
     796:	6e 81       	ldd	r22, Y+6	; 0x06
     798:	2f 31       	cpi	r18, 0x1F	; 31
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <__fixsfsi+0x4e>
     79e:	66 23       	and	r22, r22
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <__fixsfsi+0x8a>
     7a2:	23 c0       	rjmp	.+70     	; 0x7ea <__fixsfsi+0x94>
     7a4:	8e e1       	ldi	r24, 0x1E	; 30
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	82 1b       	sub	r24, r18
     7aa:	93 0b       	sbc	r25, r19
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__fixsfsi+0x68>
     7b6:	56 95       	lsr	r21
     7b8:	47 95       	ror	r20
     7ba:	37 95       	ror	r19
     7bc:	27 95       	ror	r18
     7be:	8a 95       	dec	r24
     7c0:	d2 f7       	brpl	.-12     	; 0x7b6 <__fixsfsi+0x60>
     7c2:	66 23       	and	r22, r22
     7c4:	b1 f0       	breq	.+44     	; 0x7f2 <__fixsfsi+0x9c>
     7c6:	50 95       	com	r21
     7c8:	40 95       	com	r20
     7ca:	30 95       	com	r19
     7cc:	21 95       	neg	r18
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	4f 4f       	sbci	r20, 0xFF	; 255
     7d2:	5f 4f       	sbci	r21, 0xFF	; 255
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <__fixsfsi+0x9c>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f ef       	ldi	r20, 0xFF	; 255
     7e6:	5f e7       	ldi	r21, 0x7F	; 127
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fixsfsi+0x9c>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e8       	ldi	r21, 0x80	; 128
     7f2:	b9 01       	movw	r22, r18
     7f4:	ca 01       	movw	r24, r20
     7f6:	2c 96       	adiw	r28, 0x0c	; 12
     7f8:	e2 e0       	ldi	r30, 0x02	; 2
     7fa:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__+0x20>

000007fe <__floatunsisf>:
     7fe:	a8 e0       	ldi	r26, 0x08	; 8
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__prologue_saves__+0x10>
     80a:	7b 01       	movw	r14, r22
     80c:	8c 01       	movw	r16, r24
     80e:	61 15       	cp	r22, r1
     810:	71 05       	cpc	r23, r1
     812:	81 05       	cpc	r24, r1
     814:	91 05       	cpc	r25, r1
     816:	19 f4       	brne	.+6      	; 0x81e <__floatunsisf+0x20>
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	60 c0       	rjmp	.+192    	; 0x8de <__stack+0x7f>
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	89 83       	std	Y+1, r24	; 0x01
     822:	8e e1       	ldi	r24, 0x1E	; 30
     824:	c8 2e       	mov	r12, r24
     826:	d1 2c       	mov	r13, r1
     828:	dc 82       	std	Y+4, r13	; 0x04
     82a:	cb 82       	std	Y+3, r12	; 0x03
     82c:	ed 82       	std	Y+5, r14	; 0x05
     82e:	fe 82       	std	Y+6, r15	; 0x06
     830:	0f 83       	std	Y+7, r16	; 0x07
     832:	18 87       	std	Y+8, r17	; 0x08
     834:	c8 01       	movw	r24, r16
     836:	b7 01       	movw	r22, r14
     838:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__clzsi2>
     83c:	fc 01       	movw	r30, r24
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	f7 ff       	sbrs	r31, 7
     842:	3b c0       	rjmp	.+118    	; 0x8ba <__stack+0x5b>
     844:	22 27       	eor	r18, r18
     846:	33 27       	eor	r19, r19
     848:	2e 1b       	sub	r18, r30
     84a:	3f 0b       	sbc	r19, r31
     84c:	57 01       	movw	r10, r14
     84e:	68 01       	movw	r12, r16
     850:	02 2e       	mov	r0, r18
     852:	04 c0       	rjmp	.+8      	; 0x85c <__floatunsisf+0x5e>
     854:	d6 94       	lsr	r13
     856:	c7 94       	ror	r12
     858:	b7 94       	ror	r11
     85a:	a7 94       	ror	r10
     85c:	0a 94       	dec	r0
     85e:	d2 f7       	brpl	.-12     	; 0x854 <__floatunsisf+0x56>
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	a0 e0       	ldi	r26, 0x00	; 0
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	aa 1f       	adc	r26, r26
     878:	bb 1f       	adc	r27, r27
     87a:	2a 95       	dec	r18
     87c:	d2 f7       	brpl	.-12     	; 0x872 <__stack+0x13>
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	a1 09       	sbc	r26, r1
     882:	b1 09       	sbc	r27, r1
     884:	8e 21       	and	r24, r14
     886:	9f 21       	and	r25, r15
     888:	a0 23       	and	r26, r16
     88a:	b1 23       	and	r27, r17
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	21 f0       	breq	.+8      	; 0x89c <__stack+0x3d>
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	4a 29       	or	r20, r10
     89e:	5b 29       	or	r21, r11
     8a0:	6c 29       	or	r22, r12
     8a2:	7d 29       	or	r23, r13
     8a4:	4d 83       	std	Y+5, r20	; 0x05
     8a6:	5e 83       	std	Y+6, r21	; 0x06
     8a8:	6f 83       	std	Y+7, r22	; 0x07
     8aa:	78 87       	std	Y+8, r23	; 0x08
     8ac:	8e e1       	ldi	r24, 0x1E	; 30
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	8e 1b       	sub	r24, r30
     8b2:	9f 0b       	sbc	r25, r31
     8b4:	9c 83       	std	Y+4, r25	; 0x04
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	12 c0       	rjmp	.+36     	; 0x8de <__stack+0x7f>
     8ba:	30 97       	sbiw	r30, 0x00	; 0
     8bc:	81 f0       	breq	.+32     	; 0x8de <__stack+0x7f>
     8be:	0e 2e       	mov	r0, r30
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	ee 0c       	add	r14, r14
     8c4:	ff 1c       	adc	r15, r15
     8c6:	00 1f       	adc	r16, r16
     8c8:	11 1f       	adc	r17, r17
     8ca:	0a 94       	dec	r0
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	ed 82       	std	Y+5, r14	; 0x05
     8d0:	fe 82       	std	Y+6, r15	; 0x06
     8d2:	0f 83       	std	Y+7, r16	; 0x07
     8d4:	18 87       	std	Y+8, r17	; 0x08
     8d6:	ce 1a       	sub	r12, r30
     8d8:	df 0a       	sbc	r13, r31
     8da:	dc 82       	std	Y+4, r13	; 0x04
     8dc:	cb 82       	std	Y+3, r12	; 0x03
     8de:	1a 82       	std	Y+2, r1	; 0x02
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	0e 94 c7 04 	call	0x98e	; 0x98e <__pack_f>
     8e8:	28 96       	adiw	r28, 0x08	; 8
     8ea:	ea e0       	ldi	r30, 0x0A	; 10
     8ec:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__epilogue_restores__+0x10>

000008f0 <__clzsi2>:
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	7b 01       	movw	r14, r22
     8fa:	8c 01       	movw	r16, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	e8 16       	cp	r14, r24
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	f8 06       	cpc	r15, r24
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	08 07       	cpc	r16, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	18 07       	cpc	r17, r24
     90c:	88 f4       	brcc	.+34     	; 0x930 <__clzsi2+0x40>
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	e8 16       	cp	r14, r24
     912:	f1 04       	cpc	r15, r1
     914:	01 05       	cpc	r16, r1
     916:	11 05       	cpc	r17, r1
     918:	31 f0       	breq	.+12     	; 0x926 <__clzsi2+0x36>
     91a:	28 f0       	brcs	.+10     	; 0x926 <__clzsi2+0x36>
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	a0 e0       	ldi	r26, 0x00	; 0
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	17 c0       	rjmp	.+46     	; 0x954 <__clzsi2+0x64>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	12 c0       	rjmp	.+36     	; 0x954 <__clzsi2+0x64>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	e8 16       	cp	r14, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	f8 06       	cpc	r15, r24
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	08 07       	cpc	r16, r24
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	18 07       	cpc	r17, r24
     940:	28 f0       	brcs	.+10     	; 0x94c <__clzsi2+0x5c>
     942:	88 e1       	ldi	r24, 0x18	; 24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	04 c0       	rjmp	.+8      	; 0x954 <__clzsi2+0x64>
     94c:	80 e1       	ldi	r24, 0x10	; 16
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	20 e2       	ldi	r18, 0x20	; 32
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	28 1b       	sub	r18, r24
     95e:	39 0b       	sbc	r19, r25
     960:	4a 0b       	sbc	r20, r26
     962:	5b 0b       	sbc	r21, r27
     964:	04 c0       	rjmp	.+8      	; 0x96e <__clzsi2+0x7e>
     966:	16 95       	lsr	r17
     968:	07 95       	ror	r16
     96a:	f7 94       	ror	r15
     96c:	e7 94       	ror	r14
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__clzsi2+0x76>
     972:	f7 01       	movw	r30, r14
     974:	e9 56       	subi	r30, 0x69	; 105
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	80 81       	ld	r24, Z
     97a:	28 1b       	sub	r18, r24
     97c:	31 09       	sbc	r19, r1
     97e:	41 09       	sbc	r20, r1
     980:	51 09       	sbc	r21, r1
     982:	c9 01       	movw	r24, r18
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret

0000098e <__pack_f>:
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	fc 01       	movw	r30, r24
     99a:	e4 80       	ldd	r14, Z+4	; 0x04
     99c:	f5 80       	ldd	r15, Z+5	; 0x05
     99e:	06 81       	ldd	r16, Z+6	; 0x06
     9a0:	17 81       	ldd	r17, Z+7	; 0x07
     9a2:	d1 80       	ldd	r13, Z+1	; 0x01
     9a4:	80 81       	ld	r24, Z
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	48 f4       	brcc	.+18     	; 0x9bc <__pack_f+0x2e>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e1       	ldi	r26, 0x10	; 16
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	e8 2a       	or	r14, r24
     9b4:	f9 2a       	or	r15, r25
     9b6:	0a 2b       	or	r16, r26
     9b8:	1b 2b       	or	r17, r27
     9ba:	a5 c0       	rjmp	.+330    	; 0xb06 <__pack_f+0x178>
     9bc:	84 30       	cpi	r24, 0x04	; 4
     9be:	09 f4       	brne	.+2      	; 0x9c2 <__pack_f+0x34>
     9c0:	9f c0       	rjmp	.+318    	; 0xb00 <__pack_f+0x172>
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	21 f4       	brne	.+8      	; 0x9ce <__pack_f+0x40>
     9c6:	ee 24       	eor	r14, r14
     9c8:	ff 24       	eor	r15, r15
     9ca:	87 01       	movw	r16, r14
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <__pack_f+0x4a>
     9ce:	e1 14       	cp	r14, r1
     9d0:	f1 04       	cpc	r15, r1
     9d2:	01 05       	cpc	r16, r1
     9d4:	11 05       	cpc	r17, r1
     9d6:	19 f4       	brne	.+6      	; 0x9de <__pack_f+0x50>
     9d8:	e0 e0       	ldi	r30, 0x00	; 0
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	96 c0       	rjmp	.+300    	; 0xb0a <__pack_f+0x17c>
     9de:	62 81       	ldd	r22, Z+2	; 0x02
     9e0:	73 81       	ldd	r23, Z+3	; 0x03
     9e2:	9f ef       	ldi	r25, 0xFF	; 255
     9e4:	62 38       	cpi	r22, 0x82	; 130
     9e6:	79 07       	cpc	r23, r25
     9e8:	0c f0       	brlt	.+2      	; 0x9ec <__pack_f+0x5e>
     9ea:	5b c0       	rjmp	.+182    	; 0xaa2 <__pack_f+0x114>
     9ec:	22 e8       	ldi	r18, 0x82	; 130
     9ee:	3f ef       	ldi	r19, 0xFF	; 255
     9f0:	26 1b       	sub	r18, r22
     9f2:	37 0b       	sbc	r19, r23
     9f4:	2a 31       	cpi	r18, 0x1A	; 26
     9f6:	31 05       	cpc	r19, r1
     9f8:	2c f0       	brlt	.+10     	; 0xa04 <__pack_f+0x76>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	2a c0       	rjmp	.+84     	; 0xa58 <__pack_f+0xca>
     a04:	b8 01       	movw	r22, r16
     a06:	a7 01       	movw	r20, r14
     a08:	02 2e       	mov	r0, r18
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <__pack_f+0x86>
     a0c:	76 95       	lsr	r23
     a0e:	67 95       	ror	r22
     a10:	57 95       	ror	r21
     a12:	47 95       	ror	r20
     a14:	0a 94       	dec	r0
     a16:	d2 f7       	brpl	.-12     	; 0xa0c <__pack_f+0x7e>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__pack_f+0x9c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__pack_f+0x94>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__pack_f+0xbe>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	9a 01       	movw	r18, r20
     a4e:	ab 01       	movw	r20, r22
     a50:	28 2b       	or	r18, r24
     a52:	39 2b       	or	r19, r25
     a54:	4a 2b       	or	r20, r26
     a56:	5b 2b       	or	r21, r27
     a58:	da 01       	movw	r26, r20
     a5a:	c9 01       	movw	r24, r18
     a5c:	8f 77       	andi	r24, 0x7F	; 127
     a5e:	90 70       	andi	r25, 0x00	; 0
     a60:	a0 70       	andi	r26, 0x00	; 0
     a62:	b0 70       	andi	r27, 0x00	; 0
     a64:	80 34       	cpi	r24, 0x40	; 64
     a66:	91 05       	cpc	r25, r1
     a68:	a1 05       	cpc	r26, r1
     a6a:	b1 05       	cpc	r27, r1
     a6c:	39 f4       	brne	.+14     	; 0xa7c <__pack_f+0xee>
     a6e:	27 ff       	sbrs	r18, 7
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <__pack_f+0xf6>
     a72:	20 5c       	subi	r18, 0xC0	; 192
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
     a76:	4f 4f       	sbci	r20, 0xFF	; 255
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__pack_f+0xf6>
     a7c:	21 5c       	subi	r18, 0xC1	; 193
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	4f 4f       	sbci	r20, 0xFF	; 255
     a82:	5f 4f       	sbci	r21, 0xFF	; 255
     a84:	e0 e0       	ldi	r30, 0x00	; 0
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	20 30       	cpi	r18, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	3a 07       	cpc	r19, r26
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	4a 07       	cpc	r20, r26
     a92:	a0 e4       	ldi	r26, 0x40	; 64
     a94:	5a 07       	cpc	r21, r26
     a96:	10 f0       	brcs	.+4      	; 0xa9c <__pack_f+0x10e>
     a98:	e1 e0       	ldi	r30, 0x01	; 1
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	79 01       	movw	r14, r18
     a9e:	8a 01       	movw	r16, r20
     aa0:	27 c0       	rjmp	.+78     	; 0xaf0 <__pack_f+0x162>
     aa2:	60 38       	cpi	r22, 0x80	; 128
     aa4:	71 05       	cpc	r23, r1
     aa6:	64 f5       	brge	.+88     	; 0xb00 <__pack_f+0x172>
     aa8:	fb 01       	movw	r30, r22
     aaa:	e1 58       	subi	r30, 0x81	; 129
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	d8 01       	movw	r26, r16
     ab0:	c7 01       	movw	r24, r14
     ab2:	8f 77       	andi	r24, 0x7F	; 127
     ab4:	90 70       	andi	r25, 0x00	; 0
     ab6:	a0 70       	andi	r26, 0x00	; 0
     ab8:	b0 70       	andi	r27, 0x00	; 0
     aba:	80 34       	cpi	r24, 0x40	; 64
     abc:	91 05       	cpc	r25, r1
     abe:	a1 05       	cpc	r26, r1
     ac0:	b1 05       	cpc	r27, r1
     ac2:	39 f4       	brne	.+14     	; 0xad2 <__pack_f+0x144>
     ac4:	e7 fe       	sbrs	r14, 7
     ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__pack_f+0x154>
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e0       	ldi	r26, 0x00	; 0
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__pack_f+0x14c>
     ad2:	8f e3       	ldi	r24, 0x3F	; 63
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e8 0e       	add	r14, r24
     adc:	f9 1e       	adc	r15, r25
     ade:	0a 1f       	adc	r16, r26
     ae0:	1b 1f       	adc	r17, r27
     ae2:	17 ff       	sbrs	r17, 7
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__pack_f+0x162>
     ae6:	16 95       	lsr	r17
     ae8:	07 95       	ror	r16
     aea:	f7 94       	ror	r15
     aec:	e7 94       	ror	r14
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	16 95       	lsr	r17
     af4:	07 95       	ror	r16
     af6:	f7 94       	ror	r15
     af8:	e7 94       	ror	r14
     afa:	8a 95       	dec	r24
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__pack_f+0x164>
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <__pack_f+0x17c>
     b00:	ee 24       	eor	r14, r14
     b02:	ff 24       	eor	r15, r15
     b04:	87 01       	movw	r16, r14
     b06:	ef ef       	ldi	r30, 0xFF	; 255
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	6e 2f       	mov	r22, r30
     b0c:	67 95       	ror	r22
     b0e:	66 27       	eor	r22, r22
     b10:	67 95       	ror	r22
     b12:	90 2f       	mov	r25, r16
     b14:	9f 77       	andi	r25, 0x7F	; 127
     b16:	d7 94       	ror	r13
     b18:	dd 24       	eor	r13, r13
     b1a:	d7 94       	ror	r13
     b1c:	8e 2f       	mov	r24, r30
     b1e:	86 95       	lsr	r24
     b20:	49 2f       	mov	r20, r25
     b22:	46 2b       	or	r20, r22
     b24:	58 2f       	mov	r21, r24
     b26:	5d 29       	or	r21, r13
     b28:	b7 01       	movw	r22, r14
     b2a:	ca 01       	movw	r24, r20
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	08 95       	ret

00000b38 <__unpack_f>:
     b38:	fc 01       	movw	r30, r24
     b3a:	db 01       	movw	r26, r22
     b3c:	40 81       	ld	r20, Z
     b3e:	51 81       	ldd	r21, Z+1	; 0x01
     b40:	22 81       	ldd	r18, Z+2	; 0x02
     b42:	62 2f       	mov	r22, r18
     b44:	6f 77       	andi	r22, 0x7F	; 127
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	22 1f       	adc	r18, r18
     b4a:	22 27       	eor	r18, r18
     b4c:	22 1f       	adc	r18, r18
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	89 2f       	mov	r24, r25
     b52:	88 0f       	add	r24, r24
     b54:	82 2b       	or	r24, r18
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	99 1f       	adc	r25, r25
     b5c:	99 27       	eor	r25, r25
     b5e:	99 1f       	adc	r25, r25
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	9c 93       	st	X, r25
     b64:	11 97       	sbiw	r26, 0x01	; 1
     b66:	21 15       	cp	r18, r1
     b68:	31 05       	cpc	r19, r1
     b6a:	a9 f5       	brne	.+106    	; 0xbd6 <__unpack_f+0x9e>
     b6c:	41 15       	cp	r20, r1
     b6e:	51 05       	cpc	r21, r1
     b70:	61 05       	cpc	r22, r1
     b72:	71 05       	cpc	r23, r1
     b74:	11 f4       	brne	.+4      	; 0xb7a <__unpack_f+0x42>
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	37 c0       	rjmp	.+110    	; 0xbe8 <__unpack_f+0xb0>
     b7a:	82 e8       	ldi	r24, 0x82	; 130
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	13 96       	adiw	r26, 0x03	; 3
     b80:	9c 93       	st	X, r25
     b82:	8e 93       	st	-X, r24
     b84:	12 97       	sbiw	r26, 0x02	; 2
     b86:	9a 01       	movw	r18, r20
     b88:	ab 01       	movw	r20, r22
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	22 0f       	add	r18, r18
     b8e:	33 1f       	adc	r19, r19
     b90:	44 1f       	adc	r20, r20
     b92:	55 1f       	adc	r21, r21
     b94:	6a 95       	dec	r22
     b96:	d1 f7       	brne	.-12     	; 0xb8c <__unpack_f+0x54>
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	8c 93       	st	X, r24
     b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <__unpack_f+0x80>
     b9e:	22 0f       	add	r18, r18
     ba0:	33 1f       	adc	r19, r19
     ba2:	44 1f       	adc	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	13 97       	sbiw	r26, 0x03	; 3
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	13 96       	adiw	r26, 0x03	; 3
     bb2:	9c 93       	st	X, r25
     bb4:	8e 93       	st	-X, r24
     bb6:	12 97       	sbiw	r26, 0x02	; 2
     bb8:	20 30       	cpi	r18, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	38 07       	cpc	r19, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	48 07       	cpc	r20, r24
     bc2:	80 e4       	ldi	r24, 0x40	; 64
     bc4:	58 07       	cpc	r21, r24
     bc6:	58 f3       	brcs	.-42     	; 0xb9e <__unpack_f+0x66>
     bc8:	14 96       	adiw	r26, 0x04	; 4
     bca:	2d 93       	st	X+, r18
     bcc:	3d 93       	st	X+, r19
     bce:	4d 93       	st	X+, r20
     bd0:	5c 93       	st	X, r21
     bd2:	17 97       	sbiw	r26, 0x07	; 7
     bd4:	08 95       	ret
     bd6:	2f 3f       	cpi	r18, 0xFF	; 255
     bd8:	31 05       	cpc	r19, r1
     bda:	79 f4       	brne	.+30     	; 0xbfa <__unpack_f+0xc2>
     bdc:	41 15       	cp	r20, r1
     bde:	51 05       	cpc	r21, r1
     be0:	61 05       	cpc	r22, r1
     be2:	71 05       	cpc	r23, r1
     be4:	19 f4       	brne	.+6      	; 0xbec <__unpack_f+0xb4>
     be6:	84 e0       	ldi	r24, 0x04	; 4
     be8:	8c 93       	st	X, r24
     bea:	08 95       	ret
     bec:	64 ff       	sbrs	r22, 4
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <__unpack_f+0xbe>
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	8c 93       	st	X, r24
     bf4:	12 c0       	rjmp	.+36     	; 0xc1a <__unpack_f+0xe2>
     bf6:	1c 92       	st	X, r1
     bf8:	10 c0       	rjmp	.+32     	; 0xc1a <__unpack_f+0xe2>
     bfa:	2f 57       	subi	r18, 0x7F	; 127
     bfc:	30 40       	sbci	r19, 0x00	; 0
     bfe:	13 96       	adiw	r26, 0x03	; 3
     c00:	3c 93       	st	X, r19
     c02:	2e 93       	st	-X, r18
     c04:	12 97       	sbiw	r26, 0x02	; 2
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	8c 93       	st	X, r24
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	44 0f       	add	r20, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	66 1f       	adc	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	8a 95       	dec	r24
     c16:	d1 f7       	brne	.-12     	; 0xc0c <__unpack_f+0xd4>
     c18:	70 64       	ori	r23, 0x40	; 64
     c1a:	14 96       	adiw	r26, 0x04	; 4
     c1c:	4d 93       	st	X+, r20
     c1e:	5d 93       	st	X+, r21
     c20:	6d 93       	st	X+, r22
     c22:	7c 93       	st	X, r23
     c24:	17 97       	sbiw	r26, 0x07	; 7
     c26:	08 95       	ret

00000c28 <__fpcmp_parts_f>:
     c28:	1f 93       	push	r17
     c2a:	dc 01       	movw	r26, r24
     c2c:	fb 01       	movw	r30, r22
     c2e:	9c 91       	ld	r25, X
     c30:	92 30       	cpi	r25, 0x02	; 2
     c32:	08 f4       	brcc	.+2      	; 0xc36 <__fpcmp_parts_f+0xe>
     c34:	47 c0       	rjmp	.+142    	; 0xcc4 <__fpcmp_parts_f+0x9c>
     c36:	80 81       	ld	r24, Z
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <__fpcmp_parts_f+0x16>
     c3c:	43 c0       	rjmp	.+134    	; 0xcc4 <__fpcmp_parts_f+0x9c>
     c3e:	94 30       	cpi	r25, 0x04	; 4
     c40:	51 f4       	brne	.+20     	; 0xc56 <__fpcmp_parts_f+0x2e>
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	1c 91       	ld	r17, X
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	99 f5       	brne	.+102    	; 0xcb0 <__fpcmp_parts_f+0x88>
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	68 2f       	mov	r22, r24
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	61 1b       	sub	r22, r17
     c52:	71 09       	sbc	r23, r1
     c54:	3f c0       	rjmp	.+126    	; 0xcd4 <__fpcmp_parts_f+0xac>
     c56:	84 30       	cpi	r24, 0x04	; 4
     c58:	21 f0       	breq	.+8      	; 0xc62 <__fpcmp_parts_f+0x3a>
     c5a:	92 30       	cpi	r25, 0x02	; 2
     c5c:	31 f4       	brne	.+12     	; 0xc6a <__fpcmp_parts_f+0x42>
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	b9 f1       	breq	.+110    	; 0xcd0 <__fpcmp_parts_f+0xa8>
     c62:	81 81       	ldd	r24, Z+1	; 0x01
     c64:	88 23       	and	r24, r24
     c66:	89 f1       	breq	.+98     	; 0xcca <__fpcmp_parts_f+0xa2>
     c68:	2d c0       	rjmp	.+90     	; 0xcc4 <__fpcmp_parts_f+0x9c>
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	1c 91       	ld	r17, X
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	f1 f0       	breq	.+60     	; 0xcb0 <__fpcmp_parts_f+0x88>
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	18 17       	cp	r17, r24
     c78:	d9 f4       	brne	.+54     	; 0xcb0 <__fpcmp_parts_f+0x88>
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	2d 91       	ld	r18, X+
     c7e:	3c 91       	ld	r19, X
     c80:	13 97       	sbiw	r26, 0x03	; 3
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	82 17       	cp	r24, r18
     c88:	93 07       	cpc	r25, r19
     c8a:	94 f0       	brlt	.+36     	; 0xcb0 <__fpcmp_parts_f+0x88>
     c8c:	28 17       	cp	r18, r24
     c8e:	39 07       	cpc	r19, r25
     c90:	bc f0       	brlt	.+46     	; 0xcc0 <__fpcmp_parts_f+0x98>
     c92:	14 96       	adiw	r26, 0x04	; 4
     c94:	8d 91       	ld	r24, X+
     c96:	9d 91       	ld	r25, X+
     c98:	0d 90       	ld	r0, X+
     c9a:	bc 91       	ld	r27, X
     c9c:	a0 2d       	mov	r26, r0
     c9e:	24 81       	ldd	r18, Z+4	; 0x04
     ca0:	35 81       	ldd	r19, Z+5	; 0x05
     ca2:	46 81       	ldd	r20, Z+6	; 0x06
     ca4:	57 81       	ldd	r21, Z+7	; 0x07
     ca6:	28 17       	cp	r18, r24
     ca8:	39 07       	cpc	r19, r25
     caa:	4a 07       	cpc	r20, r26
     cac:	5b 07       	cpc	r21, r27
     cae:	18 f4       	brcc	.+6      	; 0xcb6 <__fpcmp_parts_f+0x8e>
     cb0:	11 23       	and	r17, r17
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <__fpcmp_parts_f+0x9c>
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <__fpcmp_parts_f+0xa2>
     cb6:	82 17       	cp	r24, r18
     cb8:	93 07       	cpc	r25, r19
     cba:	a4 07       	cpc	r26, r20
     cbc:	b5 07       	cpc	r27, r21
     cbe:	40 f4       	brcc	.+16     	; 0xcd0 <__fpcmp_parts_f+0xa8>
     cc0:	11 23       	and	r17, r17
     cc2:	19 f0       	breq	.+6      	; 0xcca <__fpcmp_parts_f+0xa2>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <__fpcmp_parts_f+0xac>
     cca:	6f ef       	ldi	r22, 0xFF	; 255
     ccc:	7f ef       	ldi	r23, 0xFF	; 255
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <__fpcmp_parts_f+0xac>
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	cb 01       	movw	r24, r22
     cd6:	1f 91       	pop	r17
     cd8:	08 95       	ret

00000cda <UART_Init>:
#include "UART_interface.h"
#include "UART_register.h"
#include "../TMR1/TMR1_interface.h"

void UART_Init(void){
	UDR = 0;
     cda:	1c b8       	out	0x0c, r1	; 12
	UCSRA = 0;
     cdc:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0;
     cde:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0;
     ce0:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0;
     ce2:	19 b8       	out	0x09, r1	; 9
	UBRRH = 0;
     ce4:	10 bc       	out	0x20, r1	; 32

	//UCSRA |= (1<<U2X);
	UCSRB |= (1<<RXEN)|(1<<TXEN);
     ce6:	8a b1       	in	r24, 0x0a	; 10
     ce8:	88 61       	ori	r24, 0x18	; 24
     cea:	8a b9       	out	0x0a, r24	; 10
	UBRRL = 207;
     cec:	8f ec       	ldi	r24, 0xCF	; 207
     cee:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1<<URSEl)|(1<<UCSZ1)|(1<<UCSZ0);
     cf0:	80 b5       	in	r24, 0x20	; 32
     cf2:	86 68       	ori	r24, 0x86	; 134
     cf4:	80 bd       	out	0x20, r24	; 32
}
     cf6:	08 95       	ret

00000cf8 <UART_DeInit>:

void UART_DeInit(void){
	UDR = 0;
     cf8:	1c b8       	out	0x0c, r1	; 12
	UCSRA = 0;
     cfa:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0;
     cfc:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0;
     cfe:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0;
     d00:	19 b8       	out	0x09, r1	; 9
	UBRRH = 0;
     d02:	10 bc       	out	0x20, r1	; 32
}
     d04:	08 95       	ret

00000d06 <UART_SendChar_Polling>:

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
     d06:	5d 9b       	sbis	0x0b, 5	; 11
     d08:	fe cf       	rjmp	.-4      	; 0xd06 <UART_SendChar_Polling>
	UDR = UART_Send_Char;
     d0a:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
     d0c:	5d 9a       	sbi	0x0b, 5	; 11
}
     d0e:	08 95       	ret

00000d10 <UART_RecieveChar_Polling>:

u8 UART_RecieveChar_Polling(void){
	while(!(UCSRA & (1<<RXC)));
     d10:	5f 9b       	sbis	0x0b, 7	; 11
     d12:	fe cf       	rjmp	.-4      	; 0xd10 <UART_RecieveChar_Polling>
	UCSRA |= (1<<RXC);
     d14:	5f 9a       	sbi	0x0b, 7	; 11
	return UDR;
     d16:	8c b1       	in	r24, 0x0c	; 12
}
     d18:	08 95       	ret

00000d1a <UART_SendNumber_Polling>:

void UART_SendNumber_Polling(s32 UART_Send_Number){
     d1a:	5f 92       	push	r5
     d1c:	6f 92       	push	r6
     d1e:	7f 92       	push	r7
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	5b 01       	movw	r10, r22
     d36:	6c 01       	movw	r12, r24
	s32 numberHolder=0;
	u8 digitsCounter=0;
	if(UART_Send_Number==0){
     d38:	61 15       	cp	r22, r1
     d3a:	71 05       	cpc	r23, r1
     d3c:	81 05       	cpc	r24, r1
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <UART_SendNumber_Polling+0x2a>
     d42:	4c c0       	rjmp	.+152    	; 0xddc <UART_SendNumber_Polling+0xc2>
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
     d44:	97 fd       	sbrc	r25, 7
     d46:	5d c0       	rjmp	.+186    	; 0xe02 <UART_SendNumber_Polling+0xe8>
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
	UCSRA |= (1<<UDRE);
     d48:	66 24       	eor	r6, r6
     d4a:	77 24       	eor	r7, r7
     d4c:	43 01       	movw	r8, r6
     d4e:	55 24       	eor	r5, r5
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
			numberHolder*=10;
     d50:	c4 01       	movw	r24, r8
     d52:	b3 01       	movw	r22, r6
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
     d60:	7b 01       	movw	r14, r22
     d62:	8c 01       	movw	r16, r24
			numberHolder+=UART_Send_Number%10;
     d64:	c6 01       	movw	r24, r12
     d66:	b5 01       	movw	r22, r10
     d68:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     d6c:	3b 01       	movw	r6, r22
     d6e:	4c 01       	movw	r8, r24
     d70:	6e 0c       	add	r6, r14
     d72:	7f 1c       	adc	r7, r15
     d74:	80 1e       	adc	r8, r16
     d76:	91 1e       	adc	r9, r17
			UART_Send_Number/=10;
     d78:	c6 01       	movw	r24, r12
     d7a:	b5 01       	movw	r22, r10
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     d88:	c9 01       	movw	r24, r18
     d8a:	da 01       	movw	r26, r20
     d8c:	5c 01       	movw	r10, r24
     d8e:	6d 01       	movw	r12, r26
			digitsCounter++;
     d90:	53 94       	inc	r5
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
     d92:	a1 14       	cp	r10, r1
     d94:	b1 04       	cpc	r11, r1
     d96:	c1 04       	cpc	r12, r1
     d98:	d1 04       	cpc	r13, r1
     d9a:	d1 f6       	brne	.-76     	; 0xd50 <UART_SendNumber_Polling+0x36>
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
     d9c:	55 20       	and	r5, r5
     d9e:	19 f1       	breq	.+70     	; 0xde6 <UART_SendNumber_Polling+0xcc>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
     da0:	5d 9b       	sbis	0x0b, 5	; 11
     da2:	fe cf       	rjmp	.-4      	; 0xda0 <UART_SendNumber_Polling+0x86>
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
     da4:	c4 01       	movw	r24, r8
     da6:	b3 01       	movw	r22, r6
     da8:	2a e0       	ldi	r18, 0x0A	; 10
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     db4:	60 5d       	subi	r22, 0xD0	; 208
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
     db6:	6c b9       	out	0x0c, r22	; 12
	UCSRA |= (1<<UDRE);
     db8:	5d 9a       	sbi	0x0b, 5	; 11
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
			digitsCounter--;
     dba:	5a 94       	dec	r5
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
     dbc:	a1 f0       	breq	.+40     	; 0xde6 <UART_SendNumber_Polling+0xcc>
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
     dbe:	c4 01       	movw	r24, r8
     dc0:	b3 01       	movw	r22, r6
     dc2:	2a e0       	ldi	r18, 0x0A	; 10
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     dce:	c9 01       	movw	r24, r18
     dd0:	da 01       	movw	r26, r20
     dd2:	3c 01       	movw	r6, r24
     dd4:	4d 01       	movw	r8, r26
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
     dd6:	5d 9b       	sbis	0x0b, 5	; 11
     dd8:	e3 cf       	rjmp	.-58     	; 0xda0 <UART_SendNumber_Polling+0x86>
     dda:	e4 cf       	rjmp	.-56     	; 0xda4 <UART_SendNumber_Polling+0x8a>
     ddc:	5d 9b       	sbis	0x0b, 5	; 11
     dde:	fe cf       	rjmp	.-4      	; 0xddc <UART_SendNumber_Polling+0xc2>
	UDR = UART_Send_Char;
     de0:	80 e3       	ldi	r24, 0x30	; 48
     de2:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
     de4:	5d 9a       	sbi	0x0b, 5	; 11
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
			digitsCounter--;
		}
	}
}
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	9f 90       	pop	r9
     df8:	8f 90       	pop	r8
     dfa:	7f 90       	pop	r7
     dfc:	6f 90       	pop	r6
     dfe:	5f 90       	pop	r5
     e00:	08 95       	ret
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
     e02:	5d 9b       	sbis	0x0b, 5	; 11
     e04:	fe cf       	rjmp	.-4      	; 0xe02 <UART_SendNumber_Polling+0xe8>
	if(UART_Send_Number==0){
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
     e06:	d0 94       	com	r13
     e08:	c0 94       	com	r12
     e0a:	b0 94       	com	r11
     e0c:	a0 94       	com	r10
     e0e:	a1 1c       	adc	r10, r1
     e10:	b1 1c       	adc	r11, r1
     e12:	c1 1c       	adc	r12, r1
     e14:	d1 1c       	adc	r13, r1
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
     e16:	8d e2       	ldi	r24, 0x2D	; 45
     e18:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
     e1a:	5d 9a       	sbi	0x0b, 5	; 11
     e1c:	95 cf       	rjmp	.-214    	; 0xd48 <UART_SendNumber_Polling+0x2e>

00000e1e <UART_SendChar_Interrupt>:

u8 TX_Char;
u8 RX_Char;

void UART_SendChar_Interrupt(u8 UART_Send_Char){
	UCSRB |= (1<<TXCIE);
     e1e:	56 9a       	sbi	0x0a, 6	; 10
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);
     e20:	9f b7       	in	r25, 0x3f	; 63
     e22:	90 68       	ori	r25, 0x80	; 128
     e24:	9f bf       	out	0x3f, r25	; 63
	TX_Char = UART_Send_Char;
     e26:	80 93 bd 01 	sts	0x01BD, r24
}
     e2a:	08 95       	ret

00000e2c <UART_RecieveChar_Interrupt>:

void UART_RecieveChar_Interrupt(void){
	UCSRB |= (1<<RXCIE);
     e2c:	57 9a       	sbi	0x0a, 7	; 10
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);
     e2e:	8f b7       	in	r24, 0x3f	; 63
     e30:	80 68       	ori	r24, 0x80	; 128
     e32:	8f bf       	out	0x3f, r24	; 63
}
     e34:	08 95       	ret

00000e36 <UART_CallBackTx>:

ptr_2func UART_CallBackedTx = NULL;
ptr_2func UART_CallBackedRx = NULL;

void UART_CallBackTx(ptr_2func ISR_Func){
	UART_CallBackedTx = ISR_Func;
     e36:	90 93 a9 01 	sts	0x01A9, r25
     e3a:	80 93 a8 01 	sts	0x01A8, r24
}
     e3e:	08 95       	ret

00000e40 <UART_CallBackRx>:

void UART_CallBackRx(ptr_2func ISR_Func){
	UART_CallBackedRx = ISR_Func;
     e40:	90 93 ab 01 	sts	0x01AB, r25
     e44:	80 93 aa 01 	sts	0x01AA, r24
}
     e48:	08 95       	ret

00000e4a <__vector_14>:

void __vector_14 (void) {
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
	if (UART_CallBackedTx != NULL){
     e6c:	e0 91 a8 01 	lds	r30, 0x01A8
     e70:	f0 91 a9 01 	lds	r31, 0x01A9
     e74:	30 97       	sbiw	r30, 0x00	; 0
     e76:	09 f0       	breq	.+2      	; 0xe7a <__vector_14+0x30>
		UART_CallBackedTx();
     e78:	09 95       	icall
	}
	UDR = TX_Char;
     e7a:	80 91 bd 01 	lds	r24, 0x01BD
     e7e:	8c b9       	out	0x0c, r24	; 12
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_13>:

void __vector_13 (void) {
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
	RX_Char = UDR;
     ec4:	8c b1       	in	r24, 0x0c	; 12
     ec6:	80 93 b0 01 	sts	0x01B0, r24
	if (UART_CallBackedRx != NULL){
     eca:	e0 91 aa 01 	lds	r30, 0x01AA
     ece:	f0 91 ab 01 	lds	r31, 0x01AB
     ed2:	30 97       	sbiw	r30, 0x00	; 0
     ed4:	09 f0       	breq	.+2      	; 0xed8 <__vector_13+0x36>
		UART_CallBackedRx();
     ed6:	09 95       	icall
	}
}
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <UART_SendNumber_floatingPoint_Polling>:
			digitsCounter--;
		}
	}
}

void UART_SendNumber_floatingPoint_Polling(f32 UART_Send_Number){
     efa:	5f 92       	push	r5
     efc:	6f 92       	push	r6
     efe:	7f 92       	push	r7
     f00:	8f 92       	push	r8
     f02:	9f 92       	push	r9
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	28 97       	sbiw	r28, 0x08	; 8
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	6d 83       	std	Y+5, r22	; 0x05
     f2a:	7e 83       	std	Y+6, r23	; 0x06
     f2c:	8f 83       	std	Y+7, r24	; 0x07
     f2e:	98 87       	std	Y+8, r25	; 0x08
	s32 tmp_UART_Send_Number=(s32)UART_Send_Number;
     f30:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
     f34:	69 83       	std	Y+1, r22	; 0x01
     f36:	7a 83       	std	Y+2, r23	; 0x02
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	9c 83       	std	Y+4, r25	; 0x04
}

void UART_SendNumber_Polling(s32 UART_Send_Number){
	s32 numberHolder=0;
	u8 digitsCounter=0;
	if(UART_Send_Number==0){
     f3c:	61 15       	cp	r22, r1
     f3e:	71 05       	cpc	r23, r1
     f40:	81 05       	cpc	r24, r1
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <UART_SendNumber_floatingPoint_Polling+0x4e>
     f46:	50 c0       	rjmp	.+160    	; 0xfe8 <UART_SendNumber_floatingPoint_Polling+0xee>
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	ab 81       	ldd	r26, Y+3	; 0x03
     f4e:	bc 81       	ldd	r27, Y+4	; 0x04
     f50:	b7 fd       	sbrc	r27, 7
     f52:	cb c0       	rjmp	.+406    	; 0x10ea <UART_SendNumber_floatingPoint_Polling+0x1f0>
     f54:	3c 01       	movw	r6, r24
     f56:	4d 01       	movw	r8, r26
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
	UCSRA |= (1<<UDRE);
     f58:	aa 24       	eor	r10, r10
     f5a:	bb 24       	eor	r11, r11
     f5c:	65 01       	movw	r12, r10
     f5e:	55 24       	eor	r5, r5
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
			numberHolder*=10;
     f60:	c6 01       	movw	r24, r12
     f62:	b5 01       	movw	r22, r10
     f64:	2a e0       	ldi	r18, 0x0A	; 10
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
     f70:	7b 01       	movw	r14, r22
     f72:	8c 01       	movw	r16, r24
			numberHolder+=UART_Send_Number%10;
     f74:	c4 01       	movw	r24, r8
     f76:	b3 01       	movw	r22, r6
     f78:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     f7c:	5b 01       	movw	r10, r22
     f7e:	6c 01       	movw	r12, r24
     f80:	ae 0c       	add	r10, r14
     f82:	bf 1c       	adc	r11, r15
     f84:	c0 1e       	adc	r12, r16
     f86:	d1 1e       	adc	r13, r17
			UART_Send_Number/=10;
     f88:	c4 01       	movw	r24, r8
     f8a:	b3 01       	movw	r22, r6
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     f98:	c9 01       	movw	r24, r18
     f9a:	da 01       	movw	r26, r20
     f9c:	3c 01       	movw	r6, r24
     f9e:	4d 01       	movw	r8, r26
			digitsCounter++;
     fa0:	53 94       	inc	r5
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
     fa2:	61 14       	cp	r6, r1
     fa4:	71 04       	cpc	r7, r1
     fa6:	81 04       	cpc	r8, r1
     fa8:	91 04       	cpc	r9, r1
     faa:	d1 f6       	brne	.-76     	; 0xf60 <UART_SendNumber_floatingPoint_Polling+0x66>
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
     fac:	55 20       	and	r5, r5
     fae:	09 f1       	breq	.+66     	; 0xff2 <UART_SendNumber_floatingPoint_Polling+0xf8>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
     fb0:	5d 9b       	sbis	0x0b, 5	; 11
     fb2:	fe cf       	rjmp	.-4      	; 0xfb0 <UART_SendNumber_floatingPoint_Polling+0xb6>
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
     fb4:	c6 01       	movw	r24, r12
     fb6:	b5 01       	movw	r22, r10
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     fc4:	60 5d       	subi	r22, 0xD0	; 208
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
     fc6:	6c b9       	out	0x0c, r22	; 12
	UCSRA |= (1<<UDRE);
     fc8:	5d 9a       	sbi	0x0b, 5	; 11
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
			digitsCounter--;
     fca:	5a 94       	dec	r5
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
     fcc:	91 f0       	breq	.+36     	; 0xff2 <UART_SendNumber_floatingPoint_Polling+0xf8>
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
     fce:	c6 01       	movw	r24, r12
     fd0:	b5 01       	movw	r22, r10
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
     fde:	c9 01       	movw	r24, r18
     fe0:	da 01       	movw	r26, r20
     fe2:	5c 01       	movw	r10, r24
     fe4:	6d 01       	movw	r12, r26
     fe6:	e4 cf       	rjmp	.-56     	; 0xfb0 <UART_SendNumber_floatingPoint_Polling+0xb6>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
     fe8:	5d 9b       	sbis	0x0b, 5	; 11
     fea:	fe cf       	rjmp	.-4      	; 0xfe8 <UART_SendNumber_floatingPoint_Polling+0xee>
	UDR = UART_Send_Char;
     fec:	80 e3       	ldi	r24, 0x30	; 48
     fee:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
     ff0:	5d 9a       	sbi	0x0b, 5	; 11

void UART_SendNumber_floatingPoint_Polling(f32 UART_Send_Number){
	s32 tmp_UART_Send_Number=(s32)UART_Send_Number;

	UART_SendNumber_Polling(tmp_UART_Send_Number);
	UART_Send_Number=(f32)(UART_Send_Number-tmp_UART_Send_Number);
     ff2:	69 81       	ldd	r22, Y+1	; 0x01
     ff4:	7a 81       	ldd	r23, Y+2	; 0x02
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	0e 94 4d 03 	call	0x69a	; 0x69a <__floatsisf>
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	6d 81       	ldd	r22, Y+5	; 0x05
    1004:	7e 81       	ldd	r23, Y+6	; 0x06
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	98 85       	ldd	r25, Y+8	; 0x08
    100a:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    100e:	5b 01       	movw	r10, r22
    1010:	6c 01       	movw	r12, r24
	if(UART_Send_Number<0){
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	0e 94 1d 03 	call	0x63a	; 0x63a <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	0c f4       	brge	.+2      	; 0x1024 <UART_SendNumber_floatingPoint_Polling+0x12a>
    1022:	9e c0       	rjmp	.+316    	; 0x1160 <UART_SendNumber_floatingPoint_Polling+0x266>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    1024:	5d 9b       	sbis	0x0b, 5	; 11
    1026:	fe cf       	rjmp	.-4      	; 0x1024 <UART_SendNumber_floatingPoint_Polling+0x12a>
	UDR = UART_Send_Char;
    1028:	8e e2       	ldi	r24, 0x2E	; 46
    102a:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    102c:	5d 9a       	sbi	0x0b, 5	; 11
	UART_Send_Number=(f32)(UART_Send_Number-tmp_UART_Send_Number);
	if(UART_Send_Number<0){
		UART_Send_Number=0-UART_Send_Number;
	}
	UART_SendChar_Polling('.');
	UART_SendNumber_Polling(UART_Send_Number*100);
    102e:	c6 01       	movw	r24, r12
    1030:	b5 01       	movw	r22, r10
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	48 ec       	ldi	r20, 0xC8	; 200
    1038:	52 e4       	ldi	r21, 0x42	; 66
    103a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    103e:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    1042:	5b 01       	movw	r10, r22
    1044:	6c 01       	movw	r12, r24
}

void UART_SendNumber_Polling(s32 UART_Send_Number){
	s32 numberHolder=0;
	u8 digitsCounter=0;
	if(UART_Send_Number==0){
    1046:	61 15       	cp	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	81 05       	cpc	r24, r1
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <UART_SendNumber_floatingPoint_Polling+0x158>
    1050:	5e c0       	rjmp	.+188    	; 0x110e <UART_SendNumber_floatingPoint_Polling+0x214>
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
    1052:	97 fd       	sbrc	r25, 7
    1054:	77 c0       	rjmp	.+238    	; 0x1144 <UART_SendNumber_floatingPoint_Polling+0x24a>
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
	UCSRA |= (1<<UDRE);
    1056:	66 24       	eor	r6, r6
    1058:	77 24       	eor	r7, r7
    105a:	43 01       	movw	r8, r6
    105c:	55 24       	eor	r5, r5
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
			numberHolder*=10;
    105e:	c4 01       	movw	r24, r8
    1060:	b3 01       	movw	r22, r6
    1062:	2a e0       	ldi	r18, 0x0A	; 10
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
			numberHolder+=UART_Send_Number%10;
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    107a:	3b 01       	movw	r6, r22
    107c:	4c 01       	movw	r8, r24
    107e:	6e 0c       	add	r6, r14
    1080:	7f 1c       	adc	r7, r15
    1082:	80 1e       	adc	r8, r16
    1084:	91 1e       	adc	r9, r17
			UART_Send_Number/=10;
    1086:	c6 01       	movw	r24, r12
    1088:	b5 01       	movw	r22, r10
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    1096:	c9 01       	movw	r24, r18
    1098:	da 01       	movw	r26, r20
    109a:	5c 01       	movw	r10, r24
    109c:	6d 01       	movw	r12, r26
			digitsCounter++;
    109e:	53 94       	inc	r5
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
			UART_SendChar_Polling('-');
		}
		while(UART_Send_Number){
    10a0:	a1 14       	cp	r10, r1
    10a2:	b1 04       	cpc	r11, r1
    10a4:	c1 04       	cpc	r12, r1
    10a6:	d1 04       	cpc	r13, r1
    10a8:	d1 f6       	brne	.-76     	; 0x105e <UART_SendNumber_floatingPoint_Polling+0x164>
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
    10aa:	55 20       	and	r5, r5
    10ac:	a9 f1       	breq	.+106    	; 0x1118 <UART_SendNumber_floatingPoint_Polling+0x21e>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    10ae:	5d 9b       	sbis	0x0b, 5	; 11
    10b0:	fe cf       	rjmp	.-4      	; 0x10ae <UART_SendNumber_floatingPoint_Polling+0x1b4>
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
    10b2:	c4 01       	movw	r24, r8
    10b4:	b3 01       	movw	r22, r6
    10b6:	2a e0       	ldi	r18, 0x0A	; 10
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    10c2:	60 5d       	subi	r22, 0xD0	; 208
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
    10c4:	6c b9       	out	0x0c, r22	; 12
	UCSRA |= (1<<UDRE);
    10c6:	5d 9a       	sbi	0x0b, 5	; 11
			digitsCounter++;
		}
		while(digitsCounter){
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
			digitsCounter--;
    10c8:	5a 94       	dec	r5
			numberHolder*=10;
			numberHolder+=UART_Send_Number%10;
			UART_Send_Number/=10;
			digitsCounter++;
		}
		while(digitsCounter){
    10ca:	31 f1       	breq	.+76     	; 0x1118 <UART_SendNumber_floatingPoint_Polling+0x21e>
			UART_SendChar_Polling((numberHolder%10)+48);
			numberHolder/=10;
    10cc:	c4 01       	movw	r24, r8
    10ce:	b3 01       	movw	r22, r6
    10d0:	2a e0       	ldi	r18, 0x0A	; 10
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    10dc:	c9 01       	movw	r24, r18
    10de:	da 01       	movw	r26, r20
    10e0:	3c 01       	movw	r6, r24
    10e2:	4d 01       	movw	r8, r26
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    10e4:	5d 9b       	sbis	0x0b, 5	; 11
    10e6:	e3 cf       	rjmp	.-58     	; 0x10ae <UART_SendNumber_floatingPoint_Polling+0x1b4>
    10e8:	e4 cf       	rjmp	.-56     	; 0x10b2 <UART_SendNumber_floatingPoint_Polling+0x1b8>
    10ea:	5d 9b       	sbis	0x0b, 5	; 11
    10ec:	fe cf       	rjmp	.-4      	; 0x10ea <UART_SendNumber_floatingPoint_Polling+0x1f0>
	if(UART_Send_Number==0){
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
    10ee:	69 80       	ldd	r6, Y+1	; 0x01
    10f0:	7a 80       	ldd	r7, Y+2	; 0x02
    10f2:	8b 80       	ldd	r8, Y+3	; 0x03
    10f4:	9c 80       	ldd	r9, Y+4	; 0x04
    10f6:	90 94       	com	r9
    10f8:	80 94       	com	r8
    10fa:	70 94       	com	r7
    10fc:	60 94       	com	r6
    10fe:	61 1c       	adc	r6, r1
    1100:	71 1c       	adc	r7, r1
    1102:	81 1c       	adc	r8, r1
    1104:	91 1c       	adc	r9, r1
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
    1106:	8d e2       	ldi	r24, 0x2D	; 45
    1108:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    110a:	5d 9a       	sbi	0x0b, 5	; 11
    110c:	25 cf       	rjmp	.-438    	; 0xf58 <UART_SendNumber_floatingPoint_Polling+0x5e>
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    110e:	5d 9b       	sbis	0x0b, 5	; 11
    1110:	fe cf       	rjmp	.-4      	; 0x110e <UART_SendNumber_floatingPoint_Polling+0x214>
	UDR = UART_Send_Char;
    1112:	80 e3       	ldi	r24, 0x30	; 48
    1114:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    1116:	5d 9a       	sbi	0x0b, 5	; 11
	if(UART_Send_Number<0){
		UART_Send_Number=0-UART_Send_Number;
	}
	UART_SendChar_Polling('.');
	UART_SendNumber_Polling(UART_Send_Number*100);
}
    1118:	28 96       	adiw	r28, 0x08	; 8
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	9f 90       	pop	r9
    113a:	8f 90       	pop	r8
    113c:	7f 90       	pop	r7
    113e:	6f 90       	pop	r6
    1140:	5f 90       	pop	r5
    1142:	08 95       	ret
	UBRRL = 0;
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
    1144:	5d 9b       	sbis	0x0b, 5	; 11
    1146:	fe cf       	rjmp	.-4      	; 0x1144 <UART_SendNumber_floatingPoint_Polling+0x24a>
	if(UART_Send_Number==0){
		UART_SendChar_Polling('0');
	}
	else {
		if(UART_Send_Number<0){
			UART_Send_Number=0-UART_Send_Number;
    1148:	d0 94       	com	r13
    114a:	c0 94       	com	r12
    114c:	b0 94       	com	r11
    114e:	a0 94       	com	r10
    1150:	a1 1c       	adc	r10, r1
    1152:	b1 1c       	adc	r11, r1
    1154:	c1 1c       	adc	r12, r1
    1156:	d1 1c       	adc	r13, r1
	UBRRH = 0;
}

void UART_SendChar_Polling(u8 UART_Send_Char){
	while(!(UCSRA & (1<<UDRE)));
	UDR = UART_Send_Char;
    1158:	8d e2       	ldi	r24, 0x2D	; 45
    115a:	8c b9       	out	0x0c, r24	; 12
	UCSRA |= (1<<UDRE);
    115c:	5d 9a       	sbi	0x0b, 5	; 11
    115e:	7b cf       	rjmp	.-266    	; 0x1056 <UART_SendNumber_floatingPoint_Polling+0x15c>
	s32 tmp_UART_Send_Number=(s32)UART_Send_Number;

	UART_SendNumber_Polling(tmp_UART_Send_Number);
	UART_Send_Number=(f32)(UART_Send_Number-tmp_UART_Send_Number);
	if(UART_Send_Number<0){
		UART_Send_Number=0-UART_Send_Number;
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a6 01       	movw	r20, r12
    116a:	95 01       	movw	r18, r10
    116c:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    1170:	5b 01       	movw	r10, r22
    1172:	6c 01       	movw	r12, r24
    1174:	57 cf       	rjmp	.-338    	; 0x1024 <UART_SendNumber_floatingPoint_Polling+0x12a>

00001176 <TMR1_Init_CTC>:
#include "TMR1_register.h"
#include "TMR1_config.h"

void TMR1_Init_CTC(void){

	TCCR1A = ZERO;
    1176:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    1178:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    117a:	1d bc       	out	0x2d, r1	; 45
    117c:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    117e:	1b bc       	out	0x2b, r1	; 43
    1180:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    1182:	19 bc       	out	0x29, r1	; 41
    1184:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    1186:	17 bc       	out	0x27, r1	; 39
    1188:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<TICIE1)|(1<<OCIE1A)|(1<<OCIE1B)|(1<<TOIE1));
    118a:	89 b7       	in	r24, 0x39	; 57
    118c:	83 7c       	andi	r24, 0xC3	; 195
    118e:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<ICF1)|(1<<OCF1A)|(1<<OCF1B)|(1<<TOV1));
    1190:	88 b7       	in	r24, 0x38	; 56
    1192:	83 7c       	andi	r24, 0xC3	; 195
    1194:	88 bf       	out	0x38, r24	; 56

	DDRD |= (1<<5);
    1196:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1B |= TMR1_WGM_CTC_TCCR1B;												//Setting the timer to CTC mode.
    1198:	8e b5       	in	r24, 0x2e	; 46
    119a:	88 60       	ori	r24, 0x08	; 8
    119c:	8e bd       	out	0x2e, r24	; 46
																				//The options are set in TMR1_config.h file.
	TIMSK |= TMR1_INTERRUPT_CTC;												//Interrupt on compare A match to operate on CTC mode.
    119e:	89 b7       	in	r24, 0x39	; 57
    11a0:	80 61       	ori	r24, 0x10	; 16
    11a2:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
    11a4:	8f b7       	in	r24, 0x3f	; 63
    11a6:	80 68       	ori	r24, 0x80	; 128
    11a8:	8f bf       	out	0x3f, r24	; 63
}
    11aa:	08 95       	ret

000011ac <TMR1_Start_CTC>:

void TMR1_Start_CTC(u16 Time_ms){
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
	TCNT1 = ZERO;
    11b0:	1d bc       	out	0x2d, r1	; 45
    11b2:	1c bc       	out	0x2c, r1	; 44
	OCR1A |= (((u32)(Time_ms*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_CTC));		//This equation change the required time in ms to the required OCR register counts.
    11b4:	0a b5       	in	r16, 0x2a	; 42
    11b6:	1b b5       	in	r17, 0x2b	; 43
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	20 e4       	ldi	r18, 0x40	; 64
    11c2:	3f e1       	ldi	r19, 0x1F	; 31
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    11cc:	2a e0       	ldi	r18, 0x0A	; 10
    11ce:	96 95       	lsr	r25
    11d0:	87 95       	ror	r24
    11d2:	77 95       	ror	r23
    11d4:	67 95       	ror	r22
    11d6:	2a 95       	dec	r18
    11d8:	d1 f7       	brne	.-12     	; 0x11ce <TMR1_Start_CTC+0x22>
    11da:	06 2b       	or	r16, r22
    11dc:	17 2b       	or	r17, r23
    11de:	1b bd       	out	0x2b, r17	; 43
    11e0:	0a bd       	out	0x2a, r16	; 42
																				//Prescaler is set to X .. So Tick Time is: X/8MHz (uc frequency).
																				//Tick time is now 1024/8M = 128us.
																				//So number of counts needed is: Required Time(in seconds)/Tick time.
																				//Maximum number of OCR counts is 65535 which corresponds to maximum of 8.38 sec.
	TCCR1B |= TMR1_CLOCK_SELECT_CTC;
    11e2:	8e b5       	in	r24, 0x2e	; 46
    11e4:	85 60       	ori	r24, 0x05	; 5
    11e6:	8e bd       	out	0x2e, r24	; 46
}
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <TMR1_Read_Current_Count_Value_CTC>:
	while(time_us>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000000)));	//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
	TMR1_Stop();
}

u16 TMR1_Read_Current_Count_Value_CTC(void){
	return TCNT1;
    11ee:	2c b5       	in	r18, 0x2c	; 44
    11f0:	3d b5       	in	r19, 0x2d	; 45
}
    11f2:	c9 01       	movw	r24, r18
    11f4:	08 95       	ret

000011f6 <TMR1_Read_Current_Time_MS_CTC>:

u16 TMR1_Read_Current_Time_MS_CTC(void){
	u16 timeMs = ((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000);
    11f6:	6c b5       	in	r22, 0x2c	; 44
    11f8:	7d b5       	in	r23, 0x2d	; 45
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	3a e0       	ldi	r19, 0x0A	; 10
    1200:	66 0f       	add	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	3a 95       	dec	r19
    120a:	d1 f7       	brne	.-12     	; 0x1200 <TMR1_Read_Current_Time_MS_CTC+0xa>
    120c:	20 e4       	ldi	r18, 0x40	; 64
    120e:	3f e1       	ldi	r19, 0x1F	; 31
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    1218:	c9 01       	movw	r24, r18
	return timeMs;
}
    121a:	08 95       	ret

0000121c <TMR1_Stop>:

void TMR1_Stop(void){															//Works for all timer modes.
	TCCR1B &= ~(0x07);															//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    121c:	8e b5       	in	r24, 0x2e	; 46
    121e:	88 7f       	andi	r24, 0xF8	; 248
    1220:	8e bd       	out	0x2e, r24	; 46
}
    1222:	08 95       	ret

00001224 <TMR1_Init_PhaseCorrect_PWM>:

void TMR1_Init_PhaseCorrect_PWM(void){

	TCCR1A = ZERO;
    1224:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    1226:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    1228:	1d bc       	out	0x2d, r1	; 45
    122a:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    122c:	1b bc       	out	0x2b, r1	; 43
    122e:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    1230:	19 bc       	out	0x29, r1	; 41
    1232:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    1234:	17 bc       	out	0x27, r1	; 39
    1236:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    1238:	89 b7       	in	r24, 0x39	; 57
    123a:	83 7c       	andi	r24, 0xC3	; 195
    123c:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    123e:	88 b7       	in	r24, 0x38	; 56
    1240:	83 7c       	andi	r24, 0xC3	; 195
    1242:	88 bf       	out	0x38, r24	; 56

	DDRD |= (1<<5);
    1244:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A |= (TMR1_WGM_PHASECORRECT_PWM_ICR1_TCCR1A | TMR1_COM_CLEAR_OC1A); 	//Setting the WGM to Phase Correct mode, and the COM to non-inverting mode.
    1246:	8f b5       	in	r24, 0x2f	; 47
    1248:	82 68       	ori	r24, 0x82	; 130
    124a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= TMR1_WGM_PHASECORRECT_PWM_ICR1_TCCR1B;							//The options are set in TMR1_config.h file.
    124c:	8e b5       	in	r24, 0x2e	; 46
    124e:	80 61       	ori	r24, 0x10	; 16
    1250:	8e bd       	out	0x2e, r24	; 46
	ICR1 |= 0xFFFF;
    1252:	86 b5       	in	r24, 0x26	; 38
    1254:	97 b5       	in	r25, 0x27	; 39
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	9f ef       	ldi	r25, 0xFF	; 255
    125a:	97 bd       	out	0x27, r25	; 39
    125c:	86 bd       	out	0x26, r24	; 38
	//TIMSK |= TMR1_INTERRUPT_CONFIG_PWM;										//Interrupt on compare A match.
	//SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
}
    125e:	08 95       	ret

00001260 <TMR1_Start_PhaseCorrect_PWM>:

void TMR1_Start_PhaseCorrect_PWM(u16 Period_ms, u16 dutyCyclePercentage){
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms/2)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	20 e4       	ldi	r18, 0x40	; 64
    1274:	3f e1       	ldi	r19, 0x1F	; 31
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    127e:	77 bd       	out	0x27, r23	; 39
    1280:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 										//Set the OCR1A register value to be compared with TCNT.
    1282:	86 b5       	in	r24, 0x26	; 38
    1284:	97 b5       	in	r25, 0x27	; 39
    1286:	9c 01       	movw	r18, r24
    1288:	02 9f       	mul	r16, r18
    128a:	c0 01       	movw	r24, r0
    128c:	03 9f       	mul	r16, r19
    128e:	90 0d       	add	r25, r0
    1290:	12 9f       	mul	r17, r18
    1292:	90 0d       	add	r25, r0
    1294:	11 24       	eor	r1, r1
    1296:	64 e6       	ldi	r22, 0x64	; 100
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    129e:	7b bd       	out	0x2b, r23	; 43
    12a0:	6a bd       	out	0x2a, r22	; 42

	TCCR1B |= TMR1_CLOCK_SELECT_PWM;
    12a2:	8e b5       	in	r24, 0x2e	; 46
    12a4:	81 60       	ori	r24, 0x01	; 1
    12a6:	8e bd       	out	0x2e, r24	; 46
}
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <TMR1_Change_PhaseCorrect_PWM_DutyCycle_Period>:

void TMR1_Change_PhaseCorrect_PWM_DutyCycle_Period(u16 Period_ms, u16 dutyCyclePercentage){
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms/2)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	a0 e0       	ldi	r26, 0x00	; 0
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	20 e4       	ldi	r18, 0x40	; 64
    12c2:	3f e1       	ldi	r19, 0x1F	; 31
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    12cc:	77 bd       	out	0x27, r23	; 39
    12ce:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 										//Set the OCR1A register value to be compared with TCNT.
    12d0:	86 b5       	in	r24, 0x26	; 38
    12d2:	97 b5       	in	r25, 0x27	; 39
    12d4:	9c 01       	movw	r18, r24
    12d6:	02 9f       	mul	r16, r18
    12d8:	c0 01       	movw	r24, r0
    12da:	03 9f       	mul	r16, r19
    12dc:	90 0d       	add	r25, r0
    12de:	12 9f       	mul	r17, r18
    12e0:	90 0d       	add	r25, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	64 e6       	ldi	r22, 0x64	; 100
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    12ec:	7b bd       	out	0x2b, r23	; 43
    12ee:	6a bd       	out	0x2a, r22	; 42
	TCNT1 = 0;
    12f0:	1d bc       	out	0x2d, r1	; 45
    12f2:	1c bc       	out	0x2c, r1	; 44
}
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <TMR1_Change_PhaseCorrect_PWM_DutyCycle>:

void TMR1_Change_PhaseCorrect_PWM_DutyCycle(u16 dutyCyclePercentage){
	OCR1A = (dutyCyclePercentage*ICR1)/100;
    12fa:	26 b5       	in	r18, 0x26	; 38
    12fc:	37 b5       	in	r19, 0x27	; 39
    12fe:	ac 01       	movw	r20, r24
    1300:	42 9f       	mul	r20, r18
    1302:	c0 01       	movw	r24, r0
    1304:	43 9f       	mul	r20, r19
    1306:	90 0d       	add	r25, r0
    1308:	52 9f       	mul	r21, r18
    130a:	90 0d       	add	r25, r0
    130c:	11 24       	eor	r1, r1
    130e:	64 e6       	ldi	r22, 0x64	; 100
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    1316:	7b bd       	out	0x2b, r23	; 43
    1318:	6a bd       	out	0x2a, r22	; 42
}
    131a:	08 95       	ret

0000131c <TMR1_Change_PhaseCorrect_PWM_Period>:

void TMR1_Change_PhaseCorrect_PWM_Period(u16 Period_ms){
	ICR1 = (((u32)((Period_ms/2)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the new TOP value (period) of the timer.
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	20 e4       	ldi	r18, 0x40	; 64
    132a:	3f e1       	ldi	r19, 0x1F	; 31
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    1334:	77 bd       	out	0x27, r23	; 39
    1336:	66 bd       	out	0x26, r22	; 38
	TCNT1 = ZERO;
    1338:	1d bc       	out	0x2d, r1	; 45
    133a:	1c bc       	out	0x2c, r1	; 44
}
    133c:	08 95       	ret

0000133e <TMR1_Init_Fast_PWM>:

void TMR1_Init_Fast_PWM(void){
	TCCR1A = ZERO;
    133e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    1340:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    1342:	1d bc       	out	0x2d, r1	; 45
    1344:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    1346:	1b bc       	out	0x2b, r1	; 43
    1348:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    134a:	19 bc       	out	0x29, r1	; 41
    134c:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    134e:	17 bc       	out	0x27, r1	; 39
    1350:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    1352:	89 b7       	in	r24, 0x39	; 57
    1354:	83 7c       	andi	r24, 0xC3	; 195
    1356:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    1358:	88 b7       	in	r24, 0x38	; 56
    135a:	83 7c       	andi	r24, 0xC3	; 195
    135c:	88 bf       	out	0x38, r24	; 56

	DDRD |= (1<<5);
    135e:	8d 9a       	sbi	0x11, 5	; 17
	TCCR1A |= (TMR1_WGM_FAST_PWM_ICR1_TCCR1A | TMR1_COM_CLEAR_OC1A); 			//Setting the WGM to Phase Correct mode, and the COM to non-inverting mode.
    1360:	8f b5       	in	r24, 0x2f	; 47
    1362:	82 68       	ori	r24, 0x82	; 130
    1364:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= TMR1_WGM_FAST_PWM_ICR1_TCCR1B;									//The options are set in TMR1_config.h file.
    1366:	8e b5       	in	r24, 0x2e	; 46
    1368:	88 61       	ori	r24, 0x18	; 24
    136a:	8e bd       	out	0x2e, r24	; 46
	ICR1 |= 0xFFFF;
    136c:	86 b5       	in	r24, 0x26	; 38
    136e:	97 b5       	in	r25, 0x27	; 39
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	97 bd       	out	0x27, r25	; 39
    1376:	86 bd       	out	0x26, r24	; 38
}
    1378:	08 95       	ret

0000137a <TMR1_Start_Fast_PWM>:

void TMR1_Start_Fast_PWM(u16 Period_ms, u16 dutyCyclePercentage){
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	20 e4       	ldi	r18, 0x40	; 64
    138a:	3f e1       	ldi	r19, 0x1F	; 31
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    1394:	77 bd       	out	0x27, r23	; 39
    1396:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 									//Set the OCR1A register value to be compared with TCNT.
    1398:	86 b5       	in	r24, 0x26	; 38
    139a:	97 b5       	in	r25, 0x27	; 39
    139c:	9c 01       	movw	r18, r24
    139e:	02 9f       	mul	r16, r18
    13a0:	c0 01       	movw	r24, r0
    13a2:	03 9f       	mul	r16, r19
    13a4:	90 0d       	add	r25, r0
    13a6:	12 9f       	mul	r17, r18
    13a8:	90 0d       	add	r25, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	64 e6       	ldi	r22, 0x64	; 100
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    13b4:	7b bd       	out	0x2b, r23	; 43
    13b6:	6a bd       	out	0x2a, r22	; 42

	TCCR1B |= TMR1_CLOCK_SELECT_PWM;
    13b8:	8e b5       	in	r24, 0x2e	; 46
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8e bd       	out	0x2e, r24	; 46
}
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <TMR1_Change_Fast_PWM_DutyCycle_Period>:

void TMR1_Change_Fast_PWM_DutyCycle_Period(u16 Period_ms, u16 dutyCyclePercentage){
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	8b 01       	movw	r16, r22
	ICR1 = (((u32)((Period_ms)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the TOP value (period) of the timer.
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	20 e4       	ldi	r18, 0x40	; 64
    13d4:	3f e1       	ldi	r19, 0x1F	; 31
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    13de:	77 bd       	out	0x27, r23	; 39
    13e0:	66 bd       	out	0x26, r22	; 38
	OCR1A = (dutyCyclePercentage*ICR1)/100; 									//Set the OCR1A register value to be compared with TCNT.
    13e2:	86 b5       	in	r24, 0x26	; 38
    13e4:	97 b5       	in	r25, 0x27	; 39
    13e6:	9c 01       	movw	r18, r24
    13e8:	02 9f       	mul	r16, r18
    13ea:	c0 01       	movw	r24, r0
    13ec:	03 9f       	mul	r16, r19
    13ee:	90 0d       	add	r25, r0
    13f0:	12 9f       	mul	r17, r18
    13f2:	90 0d       	add	r25, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	64 e6       	ldi	r22, 0x64	; 100
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    13fe:	7b bd       	out	0x2b, r23	; 43
    1400:	6a bd       	out	0x2a, r22	; 42
	TCNT1 = 0;
    1402:	1d bc       	out	0x2d, r1	; 45
    1404:	1c bc       	out	0x2c, r1	; 44
}
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <TMR1_Change_Fast_PWM_DutyCycle>:

void TMR1_Change_Fast_PWM_DutyCycle(u16 dutyCyclePercentage){
	OCR1A = (dutyCyclePercentage*ICR1)/100;
    140c:	26 b5       	in	r18, 0x26	; 38
    140e:	37 b5       	in	r19, 0x27	; 39
    1410:	ac 01       	movw	r20, r24
    1412:	42 9f       	mul	r20, r18
    1414:	c0 01       	movw	r24, r0
    1416:	43 9f       	mul	r20, r19
    1418:	90 0d       	add	r25, r0
    141a:	52 9f       	mul	r21, r18
    141c:	90 0d       	add	r25, r0
    141e:	11 24       	eor	r1, r1
    1420:	64 e6       	ldi	r22, 0x64	; 100
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    1428:	7b bd       	out	0x2b, r23	; 43
    142a:	6a bd       	out	0x2a, r22	; 42
}
    142c:	08 95       	ret

0000142e <TMR1_Change_Fast_PWM_Period>:

void TMR1_Change_Fast_PWM_Period(u16 Period_ms){
	ICR1 = (((u32)((Period_ms)*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_PWM)); 	//Set the new TOP value (period) of the timer.
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	20 e4       	ldi	r18, 0x40	; 64
    1438:	3f e1       	ldi	r19, 0x1F	; 31
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    1442:	77 bd       	out	0x27, r23	; 39
    1444:	66 bd       	out	0x26, r22	; 38
	TCNT1 = ZERO;
    1446:	1d bc       	out	0x2d, r1	; 45
    1448:	1c bc       	out	0x2c, r1	; 44
}
    144a:	08 95       	ret

0000144c <TMR1_Init_ICU>:

volatile u8 ICUFlag;

void TMR1_Init_ICU(void){
	TCCR1A = ZERO;
    144c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ZERO;
    144e:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = ZERO;
    1450:	1d bc       	out	0x2d, r1	; 45
    1452:	1c bc       	out	0x2c, r1	; 44
	OCR1A = ZERO;
    1454:	1b bc       	out	0x2b, r1	; 43
    1456:	1a bc       	out	0x2a, r1	; 42
	OCR1B = ZERO;
    1458:	19 bc       	out	0x29, r1	; 41
    145a:	18 bc       	out	0x28, r1	; 40
	ICR1 = ZERO;
    145c:	17 bc       	out	0x27, r1	; 39
    145e:	16 bc       	out	0x26, r1	; 38
	TIMSK &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    1460:	89 b7       	in	r24, 0x39	; 57
    1462:	83 7c       	andi	r24, 0xC3	; 195
    1464:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~((1<<5)|(1<<4)|(1<<3)|(1<<2));
    1466:	88 b7       	in	r24, 0x38	; 56
    1468:	83 7c       	andi	r24, 0xC3	; 195
    146a:	88 bf       	out	0x38, r24	; 56

	DDRD &= ~(1<<6);
    146c:	8e 98       	cbi	0x11, 6	; 17
	TCCR1B |= TMR1_WGM_CTC_TCCR1B | (1<<ICES1);									//Setting the timer to CTC mode (any dummy mode other than WGM = 8/10/12/14).
    146e:	8e b5       	in	r24, 0x2e	; 46
    1470:	88 64       	ori	r24, 0x48	; 72
    1472:	8e bd       	out	0x2e, r24	; 46
																				//The options are set in TMR1_config.h file.
	TIMSK |= TMR1_INTERRUPT_ICU;												//Interrupt on Input capture register (ICR) when an event is captured on Input capture pin (ICP1).
    1474:	89 b7       	in	r24, 0x39	; 57
    1476:	80 62       	ori	r24, 0x20	; 32
    1478:	89 bf       	out	0x39, r24	; 57
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
    147a:	8f b7       	in	r24, 0x3f	; 63
    147c:	80 68       	ori	r24, 0x80	; 128
    147e:	8f bf       	out	0x3f, r24	; 63
	ICUFlag=0;
    1480:	10 92 c2 01 	sts	0x01C2, r1
}
    1484:	08 95       	ret

00001486 <TMR1_Start_ICU>:

void TMR1_Start_ICU(void){
	OCR1A |= 0xFFFF;															//CTC mode with maximum value for OCR1A.
    1486:	8a b5       	in	r24, 0x2a	; 42
    1488:	9b b5       	in	r25, 0x2b	; 43
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	9f ef       	ldi	r25, 0xFF	; 255
    148e:	9b bd       	out	0x2b, r25	; 43
    1490:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= TMR1_CLOCK_SELECT_ICU;											//Setting clock to start timer counting.
    1492:	8e b5       	in	r24, 0x2e	; 46
    1494:	85 60       	ori	r24, 0x05	; 5
    1496:	8e bd       	out	0x2e, r24	; 46
}
    1498:	08 95       	ret

0000149a <TMR1_Callback_CTC>:

ptr_2func TMR1_CallBacked_CTC = NULL;
ptr_2func TMR1_CallBacked_ICU = NULL;

void TMR1_Callback_CTC(ptr_2func ISR_Func){										//Callback function to be done when the counter reaches the required time (Time_ms).
	TMR1_CallBacked_CTC = ISR_Func;
    149a:	90 93 ad 01 	sts	0x01AD, r25
    149e:	80 93 ac 01 	sts	0x01AC, r24
}
    14a2:	08 95       	ret

000014a4 <TMR1_Callback_ICU>:

void TMR1_Callback_ICU(ptr_2func ISR_Func){										//Callback function to be done when the counter reaches the required time (Time_ms).
	TMR1_CallBacked_ICU = ISR_Func;
    14a4:	90 93 af 01 	sts	0x01AF, r25
    14a8:	80 93 ae 01 	sts	0x01AE, r24
}
    14ac:	08 95       	ret

000014ae <__vector_7>:

void __vector_7 (void){
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
	if(TMR1_CallBacked_CTC != NULL){
    14d0:	e0 91 ac 01 	lds	r30, 0x01AC
    14d4:	f0 91 ad 01 	lds	r31, 0x01AD
    14d8:	30 97       	sbiw	r30, 0x00	; 0
    14da:	09 f0       	breq	.+2      	; 0x14de <__vector_7+0x30>
		TMR1_CallBacked_CTC();													//Do the callback function when the required time is reached.
    14dc:	09 95       	icall
	}
}
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <__vector_6>:

void __vector_6 (void){
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	ef 92       	push	r14
    150c:	ff 92       	push	r15
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
	if(ICUFlag==0){
    152a:	80 91 c2 01 	lds	r24, 0x01C2
    152e:	88 23       	and	r24, r24
    1530:	e9 f0       	breq	.+58     	; 0x156c <__vector_6+0x6c>
		ICUFlag=1;
		TCCR1B ^= (1<<ICES1);
		TCNT1=0;
	}
	else if(ICUFlag==1){
    1532:	80 91 c2 01 	lds	r24, 0x01C2
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	19 f1       	breq	.+70     	; 0x1580 <__vector_6+0x80>
		tOn=ICR1;
		ICUFlag=2;
		TCCR1B ^= (1<<ICES1);
		TCNT1=0;
	}
	else if(ICUFlag==2){
    153a:	80 91 c2 01 	lds	r24, 0x01C2
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	39 f1       	breq	.+78     	; 0x1590 <__vector_6+0x90>

		if(TMR1_CallBacked_ICU != NULL){
			TMR1_CallBacked_ICU();												//Do the callback function when the tOn then the tOff are both calculated.
		}
	}
}
    1542:	ff 91       	pop	r31
    1544:	ef 91       	pop	r30
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	7f 91       	pop	r23
    1550:	6f 91       	pop	r22
    1552:	5f 91       	pop	r21
    1554:	4f 91       	pop	r20
    1556:	3f 91       	pop	r19
    1558:	2f 91       	pop	r18
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti
	}
}

void __vector_6 (void){
	if(ICUFlag==0){
		ICUFlag=1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
		TCCR1B ^= (1<<ICES1);
		TCNT1=0;
	}
	else if(ICUFlag==1){
		tOn=ICR1;
		ICUFlag=2;
    156e:	80 93 c2 01 	sts	0x01C2, r24
		TCCR1B ^= (1<<ICES1);
    1572:	8e b5       	in	r24, 0x2e	; 46
    1574:	90 e4       	ldi	r25, 0x40	; 64
    1576:	89 27       	eor	r24, r25
    1578:	8e bd       	out	0x2e, r24	; 46
		TCNT1=0;
    157a:	1d bc       	out	0x2d, r1	; 45
    157c:	1c bc       	out	0x2c, r1	; 44
    157e:	e1 cf       	rjmp	.-62     	; 0x1542 <__vector_6+0x42>
		ICUFlag=1;
		TCCR1B ^= (1<<ICES1);
		TCNT1=0;
	}
	else if(ICUFlag==1){
		tOn=ICR1;
    1580:	86 b5       	in	r24, 0x26	; 38
    1582:	97 b5       	in	r25, 0x27	; 39
    1584:	90 93 ba 01 	sts	0x01BA, r25
    1588:	80 93 b9 01 	sts	0x01B9, r24
		ICUFlag=2;
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	ef cf       	rjmp	.-34     	; 0x156e <__vector_6+0x6e>
		TCCR1B ^= (1<<ICES1);
		TCNT1=0;
	}
	else if(ICUFlag==2){
		tOff=ICR1;
    1590:	86 b5       	in	r24, 0x26	; 38
    1592:	97 b5       	in	r25, 0x27	; 39
    1594:	90 93 bc 01 	sts	0x01BC, r25
    1598:	80 93 bb 01 	sts	0x01BB, r24
		TCNT1=0;
    159c:	1d bc       	out	0x2d, r1	; 45
    159e:	1c bc       	out	0x2c, r1	; 44
		SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);									//Global interrupt flag enabled.
    15a0:	8f b7       	in	r24, 0x3f	; 63
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8f bf       	out	0x3f, r24	; 63
		ICUFlag=0;
    15a6:	10 92 c2 01 	sts	0x01C2, r1
		TCCR1B |= (1<<ICES1);
    15aa:	8e b5       	in	r24, 0x2e	; 46
    15ac:	80 64       	ori	r24, 0x40	; 64
    15ae:	8e bd       	out	0x2e, r24	; 46
																				//tOn and tOff are the number of counts of TCNT1 register when when an event occurs on the icp1 pin.
		period = (u32)tOn+(u32)tOff;											//The period is the summation of number of counts, if we want to get the real period time, we multiply the summation of number of counts by tick time.
    15b0:	80 91 b9 01 	lds	r24, 0x01B9
    15b4:	90 91 ba 01 	lds	r25, 0x01BA
    15b8:	e0 90 bb 01 	lds	r14, 0x01BB
    15bc:	f0 90 bc 01 	lds	r15, 0x01BC
    15c0:	00 e0       	ldi	r16, 0x00	; 0
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 0e       	add	r14, r24
    15ca:	f9 1e       	adc	r15, r25
    15cc:	0a 1f       	adc	r16, r26
    15ce:	1b 1f       	adc	r17, r27
    15d0:	e0 92 be 01 	sts	0x01BE, r14
    15d4:	f0 92 bf 01 	sts	0x01BF, r15
    15d8:	00 93 c0 01 	sts	0x01C0, r16
    15dc:	10 93 c1 01 	sts	0x01C1, r17
		freq = F_CPU/((u32)((period)*TMR1_PRESCALER_ICU));								//The most minimum prescaler this mode can have is 8.
    15e0:	a8 01       	movw	r20, r16
    15e2:	97 01       	movw	r18, r14
    15e4:	7a e0       	ldi	r23, 0x0A	; 10
    15e6:	22 0f       	add	r18, r18
    15e8:	33 1f       	adc	r19, r19
    15ea:	44 1f       	adc	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	7a 95       	dec	r23
    15f0:	d1 f7       	brne	.-12     	; 0x15e6 <__vector_6+0xe6>
    15f2:	60 e4       	ldi	r22, 0x40	; 64
    15f4:	72 e4       	ldi	r23, 0x42	; 66
    15f6:	8f e0       	ldi	r24, 0x0F	; 15
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    15fe:	20 93 b5 01 	sts	0x01B5, r18
    1602:	30 93 b6 01 	sts	0x01B6, r19
    1606:	40 93 b7 01 	sts	0x01B7, r20
    160a:	50 93 b8 01 	sts	0x01B8, r21
		dutyCycle = (u32)tOn*100/period;
    160e:	60 91 b9 01 	lds	r22, 0x01B9
    1612:	70 91 ba 01 	lds	r23, 0x01BA
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	24 e6       	ldi	r18, 0x64	; 100
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    1626:	a8 01       	movw	r20, r16
    1628:	97 01       	movw	r18, r14
    162a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    162e:	20 93 b1 01 	sts	0x01B1, r18
    1632:	30 93 b2 01 	sts	0x01B2, r19
    1636:	40 93 b3 01 	sts	0x01B3, r20
    163a:	50 93 b4 01 	sts	0x01B4, r21

		if(TMR1_CallBacked_ICU != NULL){
    163e:	e0 91 ae 01 	lds	r30, 0x01AE
    1642:	f0 91 af 01 	lds	r31, 0x01AF
    1646:	30 97       	sbiw	r30, 0x00	; 0
    1648:	09 f4       	brne	.+2      	; 0x164c <__vector_6+0x14c>
    164a:	7b cf       	rjmp	.-266    	; 0x1542 <__vector_6+0x42>
			TMR1_CallBacked_ICU();												//Do the callback function when the tOn then the tOff are both calculated.
    164c:	09 95       	icall
    164e:	79 cf       	rjmp	.-270    	; 0x1542 <__vector_6+0x42>

00001650 <TMR1_Delay_ms>:
																				//So number of counts needed is: Required Time(in seconds)/Tick time.
																				//Maximum number of OCR counts is 65535 which corresponds to maximum of 8.38 sec.
	TCCR1B |= TMR1_CLOCK_SELECT_CTC;
}

void TMR1_Delay_ms(u16 time_ms){
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
	TIMSK |= TMR1_INTERRUPT_CTC;												//Interrupt on compare A match to operate on CTC mode.
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
}

void TMR1_Start_CTC(u16 Time_ms){
	TCNT1 = ZERO;
    1658:	1d bc       	out	0x2d, r1	; 45
    165a:	1c bc       	out	0x2c, r1	; 44
	OCR1A |= (((u32)(Time_ms*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_CTC));		//This equation change the required time in ms to the required OCR register counts.
    165c:	2a b5       	in	r18, 0x2a	; 42
    165e:	3b b5       	in	r19, 0x2b	; 43
    1660:	2e 63       	ori	r18, 0x3E	; 62
    1662:	3a 6f       	ori	r19, 0xFA	; 250
    1664:	3b bd       	out	0x2b, r19	; 43
    1666:	2a bd       	out	0x2a, r18	; 42
																				//Prescaler is set to X .. So Tick Time is: X/8MHz (uc frequency).
																				//Tick time is now 1024/8M = 128us.
																				//So number of counts needed is: Required Time(in seconds)/Tick time.
																				//Maximum number of OCR counts is 65535 which corresponds to maximum of 8.38 sec.
	TCCR1B |= TMR1_CLOCK_SELECT_CTC;
    1668:	2e b5       	in	r18, 0x2e	; 46
    166a:	25 60       	ori	r18, 0x05	; 5
    166c:	2e bd       	out	0x2e, r18	; 46
    166e:	7c 01       	movw	r14, r24
    1670:	00 e0       	ldi	r16, 0x00	; 0
    1672:	10 e0       	ldi	r17, 0x00	; 0
}

void TMR1_Delay_ms(u16 time_ms){
	TMR1_Start_CTC(8200);
	while(time_ms>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000)));		//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
    1674:	6c b5       	in	r22, 0x2c	; 44
    1676:	7d b5       	in	r23, 0x2d	; 45
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	ea e0       	ldi	r30, 0x0A	; 10
    167e:	66 0f       	add	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	88 1f       	adc	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	ea 95       	dec	r30
    1688:	d1 f7       	brne	.-12     	; 0x167e <TMR1_Delay_ms+0x2e>
    168a:	20 e4       	ldi	r18, 0x40	; 64
    168c:	3f e1       	ldi	r19, 0x1F	; 31
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    1696:	2e 15       	cp	r18, r14
    1698:	3f 05       	cpc	r19, r15
    169a:	40 07       	cpc	r20, r16
    169c:	51 07       	cpc	r21, r17
    169e:	50 f3       	brcs	.-44     	; 0x1674 <TMR1_Delay_ms+0x24>
	u16 timeMs = ((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000);
	return timeMs;
}

void TMR1_Stop(void){															//Works for all timer modes.
	TCCR1B &= ~(0x07);															//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    16a0:	8e b5       	in	r24, 0x2e	; 46
    16a2:	88 7f       	andi	r24, 0xF8	; 248
    16a4:	8e bd       	out	0x2e, r24	; 46

void TMR1_Delay_ms(u16 time_ms){
	TMR1_Start_CTC(8200);
	while(time_ms>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000)));		//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
	TMR1_Stop();
}
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	08 95       	ret

000016b0 <TMR1_Delay_us>:
	TIMSK |= TMR1_INTERRUPT_CTC;												//Interrupt on compare A match to operate on CTC mode.
	SREG |= (1<<GLOBAL_INTERRUPT_ENABLE);										//Global interrupt flag enabled.
}

void TMR1_Start_CTC(u16 Time_ms){
	TCNT1 = ZERO;
    16b0:	1d bc       	out	0x2d, r1	; 45
    16b2:	1c bc       	out	0x2c, r1	; 44
	OCR1A |= (((u32)(Time_ms*(PROCESSOR_FREQ/1000)))/(TMR1_PRESCALER_CTC));		//This equation change the required time in ms to the required OCR register counts.
    16b4:	2a b5       	in	r18, 0x2a	; 42
    16b6:	3b b5       	in	r19, 0x2b	; 43
    16b8:	2e 63       	ori	r18, 0x3E	; 62
    16ba:	3a 6f       	ori	r19, 0xFA	; 250
    16bc:	3b bd       	out	0x2b, r19	; 43
    16be:	2a bd       	out	0x2a, r18	; 42
																				//Prescaler is set to X .. So Tick Time is: X/8MHz (uc frequency).
																				//Tick time is now 1024/8M = 128us.
																				//So number of counts needed is: Required Time(in seconds)/Tick time.
																				//Maximum number of OCR counts is 65535 which corresponds to maximum of 8.38 sec.
	TCCR1B |= TMR1_CLOCK_SELECT_CTC;
    16c0:	2e b5       	in	r18, 0x2e	; 46
    16c2:	25 60       	ori	r18, 0x05	; 5
    16c4:	2e bd       	out	0x2e, r18	; 46
    16c6:	9c 01       	movw	r18, r24
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
	TMR1_Stop();
}

void TMR1_Delay_us(u16 time_us){
	TMR1_Start_CTC(8200);
	while(time_us>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000000)));	//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
    16cc:	8c b5       	in	r24, 0x2c	; 44
    16ce:	9d b5       	in	r25, 0x2d	; 45
    16d0:	a0 e0       	ldi	r26, 0x00	; 0
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	f7 e0       	ldi	r31, 0x07	; 7
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	aa 1f       	adc	r26, r26
    16dc:	bb 1f       	adc	r27, r27
    16de:	fa 95       	dec	r31
    16e0:	d1 f7       	brne	.-12     	; 0x16d6 <TMR1_Delay_us+0x26>
    16e2:	82 17       	cp	r24, r18
    16e4:	93 07       	cpc	r25, r19
    16e6:	a4 07       	cpc	r26, r20
    16e8:	b5 07       	cpc	r27, r21
    16ea:	80 f3       	brcs	.-32     	; 0x16cc <TMR1_Delay_us+0x1c>
	u16 timeMs = ((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000);
	return timeMs;
}

void TMR1_Stop(void){															//Works for all timer modes.
	TCCR1B &= ~(0x07);															//Set the clock select bits of the timer to no clock source (timer/counter stopped).
    16ec:	8e b5       	in	r24, 0x2e	; 46
    16ee:	88 7f       	andi	r24, 0xF8	; 248
    16f0:	8e bd       	out	0x2e, r24	; 46

void TMR1_Delay_us(u16 time_us){
	TMR1_Start_CTC(8200);
	while(time_us>(((u32)TCNT1*TMR1_PRESCALER_CTC)/(PROCESSOR_FREQ/1000000)));	//The condition checks if the required time is equal the current time. This equation gives the current time from the TCNT1.
	TMR1_Stop();
}
    16f2:	08 95       	ret

000016f4 <DIO_INIT>:
#include "DIO_register.h"

STD_ERROR DIO_INIT (void) {
	STD_ERROR LOC_ERRORSTATE = OK;

	DDRA = ZERO;
    16f4:	1a ba       	out	0x1a, r1	; 26
	DDRB = ZERO;
    16f6:	17 ba       	out	0x17, r1	; 23
	DDRC = ZERO;
    16f8:	14 ba       	out	0x14, r1	; 20
	DDRD = ZERO;
    16fa:	11 ba       	out	0x11, r1	; 17
	PORTA = ZERO;
    16fc:	1b ba       	out	0x1b, r1	; 27
	PORTB = ZERO;
    16fe:	18 ba       	out	0x18, r1	; 24
	PORTC = ZERO;
    1700:	15 ba       	out	0x15, r1	; 21
	PORTD = ZERO;
    1702:	12 ba       	out	0x12, r1	; 18
	PINA = ZERO;
    1704:	19 ba       	out	0x19, r1	; 25
	PINB = ZERO;
    1706:	16 ba       	out	0x16, r1	; 22
	PINC = ZERO;
    1708:	13 ba       	out	0x13, r1	; 19
	PIND = ZERO;
    170a:	10 ba       	out	0x10, r1	; 16

	return (LOC_ERRORSTATE);
}
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	08 95       	ret

00001710 <DIO_SetPinDir>:

STD_ERROR DIO_SetPinDir (u8 PORT_, u8 P_, u8 DIO_PIN_DIR_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	91 f1       	breq	.+100    	; 0x1778 <DIO_SetPinDir+0x68>
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	c0 f0       	brcs	.+48     	; 0x1748 <DIO_SetPinDir+0x38>
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	d1 f0       	breq	.+52     	; 0x1750 <DIO_SetPinDir+0x40>
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	b1 f4       	brne	.+44     	; 0x174c <DIO_SetPinDir+0x3c>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;

	case PORT_D:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1720:	68 30       	cpi	r22, 0x08	; 8
    1722:	a0 f4       	brcc	.+40     	; 0x174c <DIO_SetPinDir+0x3c>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    1724:	41 30       	cpi	r20, 0x01	; 1
    1726:	09 f4       	brne	.+2      	; 0x172a <DIO_SetPinDir+0x1a>
    1728:	65 c0       	rjmp	.+202    	; 0x17f4 <DIO_SetPinDir+0xe4>
				DDRD |= (1<<P_);
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    172a:	44 23       	and	r20, r20
    172c:	79 f4       	brne	.+30     	; 0x174c <DIO_SetPinDir+0x3c>
				DDRD &= ~(1<<P_);
    172e:	21 b3       	in	r18, 0x11	; 17
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_SetPinDir+0x2a>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	6a 95       	dec	r22
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_SetPinDir+0x26>
    173e:	80 95       	com	r24
    1740:	82 23       	and	r24, r18
    1742:	81 bb       	out	0x11, r24	; 17
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	08 95       	ret
}

STD_ERROR DIO_SetPinDir (u8 PORT_, u8 P_, u8 DIO_PIN_DIR_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	49 f1       	breq	.+82     	; 0x179e <DIO_SetPinDir+0x8e>
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
				DDRD |= (1<<P_);
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
				DDRD &= ~(1<<P_);
    174c:	81 e0       	ldi	r24, 0x01	; 1
		LOC_ERRORSTATE = NOT_OK;
		break;
	}

	return (LOC_ERRORSTATE);
}
    174e:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;

	case PORT_C:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1750:	68 30       	cpi	r22, 0x08	; 8
    1752:	e0 f7       	brcc	.-8      	; 0x174c <DIO_SetPinDir+0x3c>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    1754:	41 30       	cpi	r20, 0x01	; 1
    1756:	09 f4       	brne	.+2      	; 0x175a <DIO_SetPinDir+0x4a>
    1758:	59 c0       	rjmp	.+178    	; 0x180c <DIO_SetPinDir+0xfc>
				DDRC |= (1<<P_);
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    175a:	44 23       	and	r20, r20
    175c:	b9 f7       	brne	.-18     	; 0x174c <DIO_SetPinDir+0x3c>
				DDRC &= ~(1<<P_);
    175e:	24 b3       	in	r18, 0x14	; 20
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_SetPinDir+0x5a>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	6a 95       	dec	r22
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_SetPinDir+0x56>
    176e:	80 95       	com	r24
    1770:	82 23       	and	r24, r18
    1772:	84 bb       	out	0x14, r24	; 20
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;

	case PORT_B:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1778:	68 30       	cpi	r22, 0x08	; 8
    177a:	40 f7       	brcc	.-48     	; 0x174c <DIO_SetPinDir+0x3c>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    177c:	41 30       	cpi	r20, 0x01	; 1
    177e:	11 f1       	breq	.+68     	; 0x17c4 <DIO_SetPinDir+0xb4>
				DDRB |= (1<<P_);
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    1780:	44 23       	and	r20, r20
    1782:	21 f7       	brne	.-56     	; 0x174c <DIO_SetPinDir+0x3c>
				DDRB &= ~(1<<P_);
    1784:	27 b3       	in	r18, 0x17	; 23
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_SetPinDir+0x80>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	6a 95       	dec	r22
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_SetPinDir+0x7c>
    1794:	80 95       	com	r24
    1796:	82 23       	and	r24, r18
    1798:	87 bb       	out	0x17, r24	; 23
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	08 95       	ret
STD_ERROR DIO_SetPinDir (u8 PORT_, u8 P_, u8 DIO_PIN_DIR_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
	case PORT_A:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    179e:	68 30       	cpi	r22, 0x08	; 8
    17a0:	a8 f6       	brcc	.-86     	; 0x174c <DIO_SetPinDir+0x3c>
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
    17a2:	41 30       	cpi	r20, 0x01	; 1
    17a4:	d9 f0       	breq	.+54     	; 0x17dc <DIO_SetPinDir+0xcc>
				DDRA |= (1<<P_);
			}
			else if (DIO_PIN_DIR_ == DIO_PIN_DIR_INPUT){
    17a6:	44 23       	and	r20, r20
    17a8:	89 f6       	brne	.-94     	; 0x174c <DIO_SetPinDir+0x3c>
				DDRA &= ~(1<<P_);
    17aa:	2a b3       	in	r18, 0x1a	; 26
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_SetPinDir+0xa6>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	6a 95       	dec	r22
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <DIO_SetPinDir+0xa2>
    17ba:	80 95       	com	r24
    17bc:	82 23       	and	r24, r18
    17be:	8a bb       	out	0x1a, r24	; 26
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	08 95       	ret
		break;

	case PORT_B:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
				DDRB |= (1<<P_);
    17c4:	27 b3       	in	r18, 0x17	; 23
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_SetPinDir+0xc0>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	6a 95       	dec	r22
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_SetPinDir+0xbc>
    17d4:	28 2b       	or	r18, r24
    17d6:	27 bb       	out	0x17, r18	; 23
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	08 95       	ret

	switch(PORT_) {
	case PORT_A:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
				DDRA |= (1<<P_);
    17dc:	2a b3       	in	r18, 0x1a	; 26
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_SetPinDir+0xd8>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	6a 95       	dec	r22
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_SetPinDir+0xd4>
    17ec:	28 2b       	or	r18, r24
    17ee:	2a bb       	out	0x1a, r18	; 26
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	08 95       	ret
		break;

	case PORT_D:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
				DDRD |= (1<<P_);
    17f4:	21 b3       	in	r18, 0x11	; 17
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_SetPinDir+0xf0>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	6a 95       	dec	r22
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_SetPinDir+0xec>
    1804:	28 2b       	or	r18, r24
    1806:	21 bb       	out	0x11, r18	; 17
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	08 95       	ret
		break;

	case PORT_C:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
			if(DIO_PIN_DIR_ == DIO_PIN_DIR_OUTPUT){
				DDRC |= (1<<P_);
    180c:	24 b3       	in	r18, 0x14	; 20
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_SetPinDir+0x108>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	6a 95       	dec	r22
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_SetPinDir+0x104>
    181c:	28 2b       	or	r18, r24
    181e:	24 bb       	out	0x14, r18	; 20
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	08 95       	ret

00001824 <DIO_SetPortDir>:

STD_ERROR DIO_SetPortDir(u8 PORT_, u8 DIO_PORT_DIR_) {

	STD_ERROR LOC_ERROR = OK;

	switch (PORT_) {
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	f1 f0       	breq	.+60     	; 0x1864 <DIO_SetPortDir+0x40>
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	70 f0       	brcs	.+28     	; 0x1848 <DIO_SetPortDir+0x24>
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	81 f0       	breq	.+32     	; 0x1850 <DIO_SetPortDir+0x2c>
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	61 f4       	brne	.+24     	; 0x184c <DIO_SetPortDir+0x28>
		}
			break;

	case PORT_D:

		switch (DIO_PORT_DIR_) {
    1834:	6f 30       	cpi	r22, 0x0F	; 15
    1836:	09 f4       	brne	.+2      	; 0x183a <DIO_SetPortDir+0x16>
    1838:	48 c0       	rjmp	.+144    	; 0x18ca <DIO_SetPortDir+0xa6>
    183a:	60 31       	cpi	r22, 0x10	; 16
    183c:	98 f5       	brcc	.+102    	; 0x18a4 <DIO_SetPortDir+0x80>
    183e:	66 23       	and	r22, r22
    1840:	29 f4       	brne	.+10     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRD = DIO_PORT_DIR_FULL_INPUT;
    1842:	11 ba       	out	0x11, r1	; 17
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret

STD_ERROR DIO_SetPortDir(u8 PORT_, u8 DIO_PORT_DIR_) {

	STD_ERROR LOC_ERROR = OK;

	switch (PORT_) {
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	a9 f0       	breq	.+42     	; 0x1876 <DIO_SetPortDir+0x52>
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
			break;
    184c:	81 e0       	ldi	r24, 0x01	; 1
		default:
			LOC_ERROR = NOT_OK;
			break;
	}
	return (LOC_ERROR);
}
    184e:	08 95       	ret
		}
			break;

	case PORT_C:

		switch (DIO_PORT_DIR_) {
    1850:	6f 30       	cpi	r22, 0x0F	; 15
    1852:	09 f4       	brne	.+2      	; 0x1856 <DIO_SetPortDir+0x32>
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <DIO_SetPortDir+0xb0>
    1856:	60 31       	cpi	r22, 0x10	; 16
    1858:	f0 f4       	brcc	.+60     	; 0x1896 <DIO_SetPortDir+0x72>
    185a:	66 23       	and	r22, r22
    185c:	b9 f7       	brne	.-18     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRC = DIO_PORT_DIR_FULL_INPUT;
    185e:	14 ba       	out	0x14, r1	; 20
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	08 95       	ret
		}
			break;

	case PORT_B:

		switch (DIO_PORT_DIR_) {
    1864:	6f 30       	cpi	r22, 0x0F	; 15
    1866:	d9 f1       	breq	.+118    	; 0x18de <DIO_SetPortDir+0xba>
    1868:	60 31       	cpi	r22, 0x10	; 16
    186a:	70 f4       	brcc	.+28     	; 0x1888 <DIO_SetPortDir+0x64>
    186c:	66 23       	and	r22, r22
    186e:	71 f7       	brne	.-36     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRB = DIO_PORT_DIR_FULL_INPUT;
    1870:	17 ba       	out	0x17, r1	; 23
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	08 95       	ret
	STD_ERROR LOC_ERROR = OK;

	switch (PORT_) {
	case PORT_A:

		switch (DIO_PORT_DIR_) {
    1876:	6f 30       	cpi	r22, 0x0F	; 15
    1878:	19 f1       	breq	.+70     	; 0x18c0 <DIO_SetPortDir+0x9c>
    187a:	60 31       	cpi	r22, 0x10	; 16
    187c:	d0 f4       	brcc	.+52     	; 0x18b2 <DIO_SetPortDir+0x8e>
    187e:	66 23       	and	r22, r22
    1880:	29 f7       	brne	.-54     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRA = DIO_PORT_DIR_FULL_INPUT;
    1882:	1a ba       	out	0x1a, r1	; 26
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	08 95       	ret
		}
			break;

	case PORT_B:

		switch (DIO_PORT_DIR_) {
    1888:	60 3f       	cpi	r22, 0xF0	; 240
    188a:	c1 f1       	breq	.+112    	; 0x18fc <DIO_SetPortDir+0xd8>
    188c:	6f 3f       	cpi	r22, 0xFF	; 255
    188e:	f1 f6       	brne	.-68     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRB = DIO_PORT_DIR_FULL_INPUT;
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRB = DIO_PORT_DIR_FULL_OUTPUT;
    1890:	67 bb       	out	0x17, r22	; 23
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	08 95       	ret
		}
			break;

	case PORT_C:

		switch (DIO_PORT_DIR_) {
    1896:	60 3f       	cpi	r22, 0xF0	; 240
    1898:	61 f1       	breq	.+88     	; 0x18f2 <DIO_SetPortDir+0xce>
    189a:	6f 3f       	cpi	r22, 0xFF	; 255
    189c:	b9 f6       	brne	.-82     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRC = DIO_PORT_DIR_FULL_INPUT;
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRC = DIO_PORT_DIR_FULL_OUTPUT;
    189e:	64 bb       	out	0x14, r22	; 20
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	08 95       	ret
		}
			break;

	case PORT_D:

		switch (DIO_PORT_DIR_) {
    18a4:	60 3f       	cpi	r22, 0xF0	; 240
    18a6:	01 f1       	breq	.+64     	; 0x18e8 <DIO_SetPortDir+0xc4>
    18a8:	6f 3f       	cpi	r22, 0xFF	; 255
    18aa:	81 f6       	brne	.-96     	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRD = DIO_PORT_DIR_FULL_INPUT;
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRD = DIO_PORT_DIR_FULL_OUTPUT;
    18ac:	61 bb       	out	0x11, r22	; 17
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	08 95       	ret
	STD_ERROR LOC_ERROR = OK;

	switch (PORT_) {
	case PORT_A:

		switch (DIO_PORT_DIR_) {
    18b2:	60 3f       	cpi	r22, 0xF0	; 240
    18b4:	41 f1       	breq	.+80     	; 0x1906 <DIO_SetPortDir+0xe2>
    18b6:	6f 3f       	cpi	r22, 0xFF	; 255
    18b8:	49 f6       	brne	.-110    	; 0x184c <DIO_SetPortDir+0x28>
		case DIO_PORT_DIR_FULL_INPUT:
			DDRA = DIO_PORT_DIR_FULL_INPUT;
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRA = DIO_PORT_DIR_FULL_OUTPUT;
    18ba:	6a bb       	out	0x1a, r22	; 26
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	08 95       	ret
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRA |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    18c0:	8a b3       	in	r24, 0x1a	; 26
    18c2:	8f 60       	ori	r24, 0x0F	; 15
    18c4:	8a bb       	out	0x1a, r24	; 26
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRD = DIO_PORT_DIR_FULL_OUTPUT;
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    18ca:	81 b3       	in	r24, 0x11	; 17
    18cc:	8f 60       	ori	r24, 0x0F	; 15
    18ce:	81 bb       	out	0x11, r24	; 17
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	08 95       	ret
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRC = DIO_PORT_DIR_FULL_OUTPUT;
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRC |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    18d4:	84 b3       	in	r24, 0x14	; 20
    18d6:	8f 60       	ori	r24, 0x0F	; 15
    18d8:	84 bb       	out	0x14, r24	; 20
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	08 95       	ret
			break;
		case DIO_PORT_DIR_FULL_OUTPUT:
			DDRB = DIO_PORT_DIR_FULL_OUTPUT;
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRB |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
    18de:	87 b3       	in	r24, 0x17	; 23
    18e0:	8f 60       	ori	r24, 0x0F	; 15
    18e2:	87 bb       	out	0x17, r24	; 23
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	08 95       	ret
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRD |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    18e8:	81 b3       	in	r24, 0x11	; 17
    18ea:	80 6f       	ori	r24, 0xF0	; 240
    18ec:	81 bb       	out	0x11, r24	; 17
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRC |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRC |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    18f2:	84 b3       	in	r24, 0x14	; 20
    18f4:	80 6f       	ori	r24, 0xF0	; 240
    18f6:	84 bb       	out	0x14, r24	; 20
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	08 95       	ret
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRB |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRB |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    18fc:	87 b3       	in	r24, 0x17	; 23
    18fe:	80 6f       	ori	r24, 0xF0	; 240
    1900:	87 bb       	out	0x17, r24	; 23
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	08 95       	ret
			break;
		case DIO_PORT_DIR_FIRST_HALF_OUTPUT:
			DDRA |= DIO_PORT_DIR_FIRST_HALF_OUTPUT;
			break;
		case DIO_PORT_DIR_SECOND_HALF_OUTPUT:
			DDRA |= DIO_PORT_DIR_SECOND_HALF_OUTPUT;
    1906:	8a b3       	in	r24, 0x1a	; 26
    1908:	80 6f       	ori	r24, 0xF0	; 240
    190a:	8a bb       	out	0x1a, r24	; 26
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	08 95       	ret

00001910 <DIO_SetPinValue>:
}

STD_ERROR DIO_SetPinValue(u8 PORT_, u8 P_, u8 DIO_PIN_VALUE_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1910:	82 30       	cpi	r24, 0x02	; 2
    1912:	91 f1       	breq	.+100    	; 0x1978 <DIO_SetPinValue+0x68>
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	c0 f0       	brcs	.+48     	; 0x1948 <DIO_SetPinValue+0x38>
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	d1 f0       	breq	.+52     	; 0x1950 <DIO_SetPinValue+0x40>
    191c:	84 30       	cpi	r24, 0x04	; 4
    191e:	b1 f4       	brne	.+44     	; 0x194c <DIO_SetPinValue+0x3c>
				LOC_ERRORSTATE = NOT_OK;
			}
			break;

		case PORT_D:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1920:	68 30       	cpi	r22, 0x08	; 8
    1922:	a0 f4       	brcc	.+40     	; 0x194c <DIO_SetPinValue+0x3c>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    1924:	41 30       	cpi	r20, 0x01	; 1
    1926:	09 f4       	brne	.+2      	; 0x192a <DIO_SetPinValue+0x1a>
    1928:	65 c0       	rjmp	.+202    	; 0x19f4 <DIO_SetPinValue+0xe4>
					PORTD |= (1<<P_);
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    192a:	44 23       	and	r20, r20
    192c:	79 f4       	brne	.+30     	; 0x194c <DIO_SetPinValue+0x3c>
					PORTD &= ~(1<<P_);
    192e:	22 b3       	in	r18, 0x12	; 18
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_SetPinValue+0x2a>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	6a 95       	dec	r22
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_SetPinValue+0x26>
    193e:	80 95       	com	r24
    1940:	82 23       	and	r24, r18
    1942:	82 bb       	out	0x12, r24	; 18
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	08 95       	ret
}

STD_ERROR DIO_SetPinValue(u8 PORT_, u8 P_, u8 DIO_PIN_VALUE_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	49 f1       	breq	.+82     	; 0x199e <DIO_SetPinValue+0x8e>
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
					PORTD |= (1<<P_);
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
					PORTD &= ~(1<<P_);
    194c:	81 e0       	ldi	r24, 0x01	; 1
			LOC_ERRORSTATE = NOT_OK;
			break;
		}

		return (LOC_ERRORSTATE);
}
    194e:	08 95       	ret
				LOC_ERRORSTATE = NOT_OK;
			}
			break;

		case PORT_C:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1950:	68 30       	cpi	r22, 0x08	; 8
    1952:	e0 f7       	brcc	.-8      	; 0x194c <DIO_SetPinValue+0x3c>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    1954:	41 30       	cpi	r20, 0x01	; 1
    1956:	09 f4       	brne	.+2      	; 0x195a <DIO_SetPinValue+0x4a>
    1958:	59 c0       	rjmp	.+178    	; 0x1a0c <DIO_SetPinValue+0xfc>
					PORTC |= (1<<P_);
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    195a:	44 23       	and	r20, r20
    195c:	b9 f7       	brne	.-18     	; 0x194c <DIO_SetPinValue+0x3c>
					PORTC &= ~(1<<P_);
    195e:	25 b3       	in	r18, 0x15	; 21
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_SetPinValue+0x5a>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	6a 95       	dec	r22
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_SetPinValue+0x56>
    196e:	80 95       	com	r24
    1970:	82 23       	and	r24, r18
    1972:	85 bb       	out	0x15, r24	; 21
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	08 95       	ret
				LOC_ERRORSTATE = NOT_OK;
			}
			break;

		case PORT_B:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1978:	68 30       	cpi	r22, 0x08	; 8
    197a:	40 f7       	brcc	.-48     	; 0x194c <DIO_SetPinValue+0x3c>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    197c:	41 30       	cpi	r20, 0x01	; 1
    197e:	11 f1       	breq	.+68     	; 0x19c4 <DIO_SetPinValue+0xb4>
					PORTB |= (1<<P_);
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    1980:	44 23       	and	r20, r20
    1982:	21 f7       	brne	.-56     	; 0x194c <DIO_SetPinValue+0x3c>
					PORTB &= ~(1<<P_);
    1984:	28 b3       	in	r18, 0x18	; 24
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_SetPinValue+0x80>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	6a 95       	dec	r22
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_SetPinValue+0x7c>
    1994:	80 95       	com	r24
    1996:	82 23       	and	r24, r18
    1998:	88 bb       	out	0x18, r24	; 24
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	08 95       	ret
STD_ERROR DIO_SetPinValue(u8 PORT_, u8 P_, u8 DIO_PIN_VALUE_) {
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
		case PORT_A:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
    199e:	68 30       	cpi	r22, 0x08	; 8
    19a0:	a8 f6       	brcc	.-86     	; 0x194c <DIO_SetPinValue+0x3c>
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
    19a2:	41 30       	cpi	r20, 0x01	; 1
    19a4:	d9 f0       	breq	.+54     	; 0x19dc <DIO_SetPinValue+0xcc>
					PORTA |= (1<<P_);
				}
				else if (DIO_PIN_VALUE_ == DIO_PIN_VALUE_LOW){
    19a6:	44 23       	and	r20, r20
    19a8:	89 f6       	brne	.-94     	; 0x194c <DIO_SetPinValue+0x3c>
					PORTA &= ~(1<<P_);
    19aa:	2b b3       	in	r18, 0x1b	; 27
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_SetPinValue+0xa6>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	6a 95       	dec	r22
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_SetPinValue+0xa2>
    19ba:	80 95       	com	r24
    19bc:	82 23       	and	r24, r18
    19be:	8b bb       	out	0x1b, r24	; 27
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	08 95       	ret
			break;

		case PORT_B:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
					PORTB |= (1<<P_);
    19c4:	28 b3       	in	r18, 0x18	; 24
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_SetPinValue+0xc0>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	6a 95       	dec	r22
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_SetPinValue+0xbc>
    19d4:	28 2b       	or	r18, r24
    19d6:	28 bb       	out	0x18, r18	; 24
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	08 95       	ret

	switch(PORT_) {
		case PORT_A:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
					PORTA |= (1<<P_);
    19dc:	2b b3       	in	r18, 0x1b	; 27
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_SetPinValue+0xd8>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	6a 95       	dec	r22
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_SetPinValue+0xd4>
    19ec:	28 2b       	or	r18, r24
    19ee:	2b bb       	out	0x1b, r18	; 27
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	08 95       	ret
			break;

		case PORT_D:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
					PORTD |= (1<<P_);
    19f4:	22 b3       	in	r18, 0x12	; 18
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_SetPinValue+0xf0>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	6a 95       	dec	r22
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_SetPinValue+0xec>
    1a04:	28 2b       	or	r18, r24
    1a06:	22 bb       	out	0x12, r18	; 18
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	08 95       	ret
			break;

		case PORT_C:
			if(P_ <= DIO_MAX_PIN_PER_PORT) {
				if(DIO_PIN_VALUE_ == DIO_PIN_VALUE_HIGH){
					PORTC |= (1<<P_);
    1a0c:	25 b3       	in	r18, 0x15	; 21
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_SetPinValue+0x108>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	6a 95       	dec	r22
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_SetPinValue+0x104>
    1a1c:	28 2b       	or	r18, r24
    1a1e:	25 bb       	out	0x15, r18	; 21
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	08 95       	ret

00001a24 <DIO_SetPortValue>:
}

STD_ERROR DIO_SetPortValue(u8 PORT_, u8 DIO_PORT_VALUE_, u8 FLAG_DefaultOrSetFromUser) {
	STD_ERROR LOC_ERRORSTATE = OK;

	if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_LOW){
    1a24:	44 23       	and	r20, r20
    1a26:	99 f4       	brne	.+38     	; 0x1a4e <DIO_SetPortValue+0x2a>
		switch(PORT_) {
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	59 f1       	breq	.+86     	; 0x1a82 <DIO_SetPortValue+0x5e>
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	d0 f4       	brcc	.+52     	; 0x1a64 <DIO_SetPortValue+0x40>
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	59 f4       	brne	.+22     	; 0x1a4a <DIO_SetPortValue+0x26>

		case PORT_A:
			switch (DIO_PORT_VALUE_) {
    1a34:	6f 30       	cpi	r22, 0x0F	; 15
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <DIO_SetPortValue+0x16>
    1a38:	59 c0       	rjmp	.+178    	; 0x1aec <DIO_SetPortValue+0xc8>
    1a3a:	60 31       	cpi	r22, 0x10	; 16
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <DIO_SetPortValue+0x1c>
    1a3e:	50 c0       	rjmp	.+160    	; 0x1ae0 <DIO_SetPortValue+0xbc>
    1a40:	60 3f       	cpi	r22, 0xF0	; 240
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <DIO_SetPortValue+0x22>
    1a44:	76 c0       	rjmp	.+236    	; 0x1b32 <DIO_SetPortValue+0x10e>
    1a46:	6f 3f       	cpi	r22, 0xFF	; 255
    1a48:	51 f0       	breq	.+20     	; 0x1a5e <DIO_SetPortValue+0x3a>
				PORTC = DIO_PORT_VALUE_;
					break;

			case PORT_D:
				PORTD = DIO_PORT_VALUE_;
					break;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
	else {
		LOC_ERRORSTATE = NOT_OK;
	}

	return (LOC_ERRORSTATE);
}
    1a4c:	08 95       	ret
		default:
			LOC_ERRORSTATE = NOT_OK;
			break;
		}
	}
	else if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_HIGH){
    1a4e:	41 30       	cpi	r20, 0x01	; 1
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <DIO_SetPortValue+0x26>
		if(DIO_PORT_VALUE_>= 0 && DIO_PORT_VALUE_ <=255) {
			switch(PORT_) {
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	f9 f0       	breq	.+62     	; 0x1a94 <DIO_SetPortValue+0x70>
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	58 f5       	brcc	.+86     	; 0x1ab0 <DIO_SetPortValue+0x8c>
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	b1 f7       	brne	.-20     	; 0x1a4a <DIO_SetPortValue+0x26>

			case PORT_A:
				PORTA = DIO_PORT_VALUE_;
    1a5e:	6b bb       	out	0x1b, r22	; 27
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	08 95       	ret

STD_ERROR DIO_SetPortValue(u8 PORT_, u8 DIO_PORT_VALUE_, u8 FLAG_DefaultOrSetFromUser) {
	STD_ERROR LOC_ERRORSTATE = OK;

	if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_LOW){
		switch(PORT_) {
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	c9 f0       	breq	.+50     	; 0x1a9a <DIO_SetPortValue+0x76>
    1a68:	84 30       	cpi	r24, 0x04	; 4
    1a6a:	79 f7       	brne	.-34     	; 0x1a4a <DIO_SetPortValue+0x26>
				break;
			}
				break;

		case PORT_D:
			switch (DIO_PORT_VALUE_) {
    1a6c:	6f 30       	cpi	r22, 0x0F	; 15
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <DIO_SetPortValue+0x4e>
    1a70:	47 c0       	rjmp	.+142    	; 0x1b00 <DIO_SetPortValue+0xdc>
    1a72:	60 31       	cpi	r22, 0x10	; 16
    1a74:	48 f1       	brcs	.+82     	; 0x1ac8 <DIO_SetPortValue+0xa4>
    1a76:	60 3f       	cpi	r22, 0xF0	; 240
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <DIO_SetPortValue+0x58>
    1a7a:	56 c0       	rjmp	.+172    	; 0x1b28 <DIO_SetPortValue+0x104>
    1a7c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a7e:	29 f7       	brne	.-54     	; 0x1a4a <DIO_SetPortValue+0x26>
    1a80:	1b c0       	rjmp	.+54     	; 0x1ab8 <DIO_SetPortValue+0x94>
				break;
			}
				break;

		case PORT_B:
			switch (DIO_PORT_VALUE_) {
    1a82:	6f 30       	cpi	r22, 0x0F	; 15
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <DIO_SetPortValue+0x64>
    1a86:	41 c0       	rjmp	.+130    	; 0x1b0a <DIO_SetPortValue+0xe6>
    1a88:	60 31       	cpi	r22, 0x10	; 16
    1a8a:	20 f1       	brcs	.+72     	; 0x1ad4 <DIO_SetPortValue+0xb0>
    1a8c:	60 3f       	cpi	r22, 0xF0	; 240
    1a8e:	99 f1       	breq	.+102    	; 0x1af6 <DIO_SetPortValue+0xd2>
    1a90:	6f 3f       	cpi	r22, 0xFF	; 255
    1a92:	d9 f6       	brne	.-74     	; 0x1a4a <DIO_SetPortValue+0x26>
			case PORT_A:
				PORTA = DIO_PORT_VALUE_;
					break;

			case PORT_B:
				PORTB = DIO_PORT_VALUE_;
    1a94:	68 bb       	out	0x18, r22	; 24
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	08 95       	ret
				break;
			}
				break;

		case PORT_C:
			switch (DIO_PORT_VALUE_) {
    1a9a:	6f 30       	cpi	r22, 0x0F	; 15
    1a9c:	d9 f1       	breq	.+118    	; 0x1b14 <DIO_SetPortValue+0xf0>
    1a9e:	60 31       	cpi	r22, 0x10	; 16
    1aa0:	70 f0       	brcs	.+28     	; 0x1abe <DIO_SetPortValue+0x9a>
    1aa2:	60 3f       	cpi	r22, 0xF0	; 240
    1aa4:	e1 f1       	breq	.+120    	; 0x1b1e <DIO_SetPortValue+0xfa>
    1aa6:	6f 3f       	cpi	r22, 0xFF	; 255
    1aa8:	81 f6       	brne	.-96     	; 0x1a4a <DIO_SetPortValue+0x26>
			case PORT_B:
				PORTB = DIO_PORT_VALUE_;
					break;

			case PORT_C:
				PORTC = DIO_PORT_VALUE_;
    1aaa:	65 bb       	out	0x15, r22	; 21
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	08 95       	ret
			break;
		}
	}
	else if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_HIGH){
		if(DIO_PORT_VALUE_>= 0 && DIO_PORT_VALUE_ <=255) {
			switch(PORT_) {
    1ab0:	83 30       	cpi	r24, 0x03	; 3
    1ab2:	d9 f3       	breq	.-10     	; 0x1aaa <DIO_SetPortValue+0x86>
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	49 f6       	brne	.-110    	; 0x1a4a <DIO_SetPortValue+0x26>
			case PORT_C:
				PORTC = DIO_PORT_VALUE_;
					break;

			case PORT_D:
				PORTD = DIO_PORT_VALUE_;
    1ab8:	62 bb       	out	0x12, r22	; 18
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	08 95       	ret
				break;
			}
				break;

		case PORT_C:
			switch (DIO_PORT_VALUE_) {
    1abe:	66 23       	and	r22, r22
    1ac0:	21 f6       	brne	.-120    	; 0x1a4a <DIO_SetPortValue+0x26>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTC = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTC = DIO_PORT_VALUE_FULL_LOW;
    1ac2:	15 ba       	out	0x15, r1	; 21
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	08 95       	ret
				break;
			}
				break;

		case PORT_D:
			switch (DIO_PORT_VALUE_) {
    1ac8:	66 23       	and	r22, r22
    1aca:	09 f0       	breq	.+2      	; 0x1ace <DIO_SetPortValue+0xaa>
    1acc:	be cf       	rjmp	.-132    	; 0x1a4a <DIO_SetPortValue+0x26>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTD = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTD = DIO_PORT_VALUE_FULL_LOW;
    1ace:	12 ba       	out	0x12, r1	; 18
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	08 95       	ret
				break;
			}
				break;

		case PORT_B:
			switch (DIO_PORT_VALUE_) {
    1ad4:	66 23       	and	r22, r22
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <DIO_SetPortValue+0xb6>
    1ad8:	b8 cf       	rjmp	.-144    	; 0x1a4a <DIO_SetPortValue+0x26>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTB = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTB = DIO_PORT_VALUE_FULL_LOW;
    1ada:	18 ba       	out	0x18, r1	; 24
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	08 95       	ret

	if(FLAG_DefaultOrSetFromUser == FLAG_DefaultOrSetFromUser_LOW){
		switch(PORT_) {

		case PORT_A:
			switch (DIO_PORT_VALUE_) {
    1ae0:	66 23       	and	r22, r22
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <DIO_SetPortValue+0xc2>
    1ae4:	b2 cf       	rjmp	.-156    	; 0x1a4a <DIO_SetPortValue+0x26>

			case DIO_PORT_VALUE_FULL_HIGH:
				PORTA = DIO_PORT_VALUE_FULL_HIGH;
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTA = DIO_PORT_VALUE_FULL_LOW;
    1ae6:	1b ba       	out	0x1b, r1	; 27
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTA |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1aec:	8b b3       	in	r24, 0x1b	; 27
    1aee:	8f 60       	ori	r24, 0x0F	; 15
    1af0:	8b bb       	out	0x1b, r24	; 27
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTB |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTB |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1af6:	88 b3       	in	r24, 0x18	; 24
    1af8:	80 6f       	ori	r24, 0xF0	; 240
    1afa:	88 bb       	out	0x18, r24	; 24
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTD = DIO_PORT_VALUE_FULL_LOW;
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTD |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1b00:	82 b3       	in	r24, 0x12	; 18
    1b02:	8f 60       	ori	r24, 0x0F	; 15
    1b04:	82 bb       	out	0x12, r24	; 18
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTB = DIO_PORT_VALUE_FULL_LOW;
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTB |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1b0a:	88 b3       	in	r24, 0x18	; 24
    1b0c:	8f 60       	ori	r24, 0x0F	; 15
    1b0e:	88 bb       	out	0x18, r24	; 24
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FULL_LOW:
				PORTC = DIO_PORT_VALUE_FULL_LOW;
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTC |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
    1b14:	85 b3       	in	r24, 0x15	; 21
    1b16:	8f 60       	ori	r24, 0x0F	; 15
    1b18:	85 bb       	out	0x15, r24	; 21
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	08 95       	ret
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTC |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1b1e:	85 b3       	in	r24, 0x15	; 21
    1b20:	80 6f       	ori	r24, 0xF0	; 240
    1b22:	85 bb       	out	0x15, r24	; 21
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTD |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTD |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1b28:	82 b3       	in	r24, 0x12	; 18
    1b2a:	80 6f       	ori	r24, 0xF0	; 240
    1b2c:	82 bb       	out	0x12, r24	; 18
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	08 95       	ret
				break;
			case DIO_PORT_VALUE_FIRST_HALF_HIGH:
				PORTA |= DIO_PORT_VALUE_FIRST_HALF_HIGH;
				break;
			case DIO_PORT_VALUE_SECOND_HALF_HIGH:
				PORTA |= DIO_PORT_VALUE_SECOND_HALF_HIGH;
    1b32:	8b b3       	in	r24, 0x1b	; 27
    1b34:	80 6f       	ori	r24, 0xF0	; 240
    1b36:	8b bb       	out	0x1b, r24	; 27
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret

00001b3c <DIO_GetPinValue>:

	return (LOC_ERRORSTATE);
}


STD_ERROR DIO_GetPinValue(u8 PORT_, u8 P_, u8 *Pin_Value) {
    1b3c:	fa 01       	movw	r30, r20

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	21 f1       	breq	.+72     	; 0x1b8a <DIO_GetPinValue+0x4e>
    1b42:	83 30       	cpi	r24, 0x03	; 3
    1b44:	d0 f0       	brcs	.+52     	; 0x1b7a <DIO_GetPinValue+0x3e>
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	e1 f0       	breq	.+56     	; 0x1b82 <DIO_GetPinValue+0x46>
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	c1 f4       	brne	.+48     	; 0x1b7e <DIO_GetPinValue+0x42>
		else {
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b4e:	68 30       	cpi	r22, 0x08	; 8
    1b50:	b0 f4       	brcc	.+44     	; 0x1b7e <DIO_GetPinValue+0x42>
			*Pin_Value = (((PIND)&(1<<P_)) >> (P_));
    1b52:	20 b3       	in	r18, 0x10	; 16
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	06 2e       	mov	r0, r22
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_GetPinValue+0x24>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_GetPinValue+0x20>
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	82 23       	and	r24, r18
    1b68:	93 23       	and	r25, r19
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_GetPinValue+0x34>
    1b6c:	95 95       	asr	r25
    1b6e:	87 95       	ror	r24
    1b70:	6a 95       	dec	r22
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <DIO_GetPinValue+0x30>
    1b74:	80 83       	st	Z, r24
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	08 95       	ret

STD_ERROR DIO_GetPinValue(u8 PORT_, u8 P_, u8 *Pin_Value) {

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	51 f0       	breq	.+20     	; 0x1b92 <DIO_GetPinValue+0x56>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
			*Pin_Value = (((PIND)&(1<<P_)) >> (P_));
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
	default:
		LOC_ERRORSTATE = NOT_OK;
		break;
	}
	return (LOC_ERRORSTATE);
}
    1b80:	08 95       	ret
		else {
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_C:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b82:	68 30       	cpi	r22, 0x08	; 8
    1b84:	e0 f7       	brcc	.-8      	; 0x1b7e <DIO_GetPinValue+0x42>
			*Pin_Value = (((PINC)&(1<<P_)) >> (P_));
    1b86:	23 b3       	in	r18, 0x13	; 19
    1b88:	e5 cf       	rjmp	.-54     	; 0x1b54 <DIO_GetPinValue+0x18>
		else {
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_B:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b8a:	68 30       	cpi	r22, 0x08	; 8
    1b8c:	c0 f7       	brcc	.-16     	; 0x1b7e <DIO_GetPinValue+0x42>
			*Pin_Value = (((PINB)&(1<<P_)) >> (P_));
    1b8e:	26 b3       	in	r18, 0x16	; 22
    1b90:	e1 cf       	rjmp	.-62     	; 0x1b54 <DIO_GetPinValue+0x18>

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
	case PORT_A:
		if(P_ <= DIO_MAX_PIN_PER_PORT) {
    1b92:	68 30       	cpi	r22, 0x08	; 8
    1b94:	a0 f7       	brcc	.-24     	; 0x1b7e <DIO_GetPinValue+0x42>
			*Pin_Value = (((PINA)&(1<<P_)) >> (P_));
    1b96:	29 b3       	in	r18, 0x19	; 25
    1b98:	dd cf       	rjmp	.-70     	; 0x1b54 <DIO_GetPinValue+0x18>

00001b9a <DIO_GetPortValue>:
		break;
	}
	return (LOC_ERRORSTATE);
}

STD_ERROR DIO_GetPortValue(u8 PORT_, u8 *Pin_Value) {
    1b9a:	fb 01       	movw	r30, r22

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	b1 f0       	breq	.+44     	; 0x1bcc <DIO_GetPortValue+0x32>
    1ba0:	83 30       	cpi	r24, 0x03	; 3
    1ba2:	40 f0       	brcs	.+16     	; 0x1bb4 <DIO_GetPortValue+0x1a>
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	51 f0       	breq	.+20     	; 0x1bbc <DIO_GetPortValue+0x22>
    1ba8:	84 30       	cpi	r24, 0x04	; 4
    1baa:	31 f4       	brne	.+12     	; 0x1bb8 <DIO_GetPortValue+0x1e>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PIND;
    1bac:	80 b3       	in	r24, 0x10	; 16
    1bae:	80 83       	st	Z, r24
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
	default:
		LOC_ERRORSTATE = NOT_OK;
		break;
	}
	return (LOC_ERRORSTATE);
}
    1bb2:	08 95       	ret

STD_ERROR DIO_GetPortValue(u8 PORT_, u8 *Pin_Value) {

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <DIO_GetPortValue+0x2a>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_C:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PINC;
    1bbc:	83 b3       	in	r24, 0x13	; 19
    1bbe:	80 83       	st	Z, r24
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	08 95       	ret
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
	case PORT_A:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PINA;
    1bc4:	89 b3       	in	r24, 0x19	; 25
    1bc6:	80 83       	st	Z, r24
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_B:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Pin_Value = PINB;
    1bcc:	86 b3       	in	r24, 0x16	; 22
    1bce:	80 83       	st	Z, r24
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	08 95       	ret

00001bd4 <DIO_GetPortDir>:
		break;
	}
	return (LOC_ERRORSTATE);
}

STD_ERROR DIO_GetPortDir(u8 PORT_, u8 *Port_Dir){
    1bd4:	fb 01       	movw	r30, r22

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	b1 f0       	breq	.+44     	; 0x1c06 <DIO_GetPortDir+0x32>
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	40 f0       	brcs	.+16     	; 0x1bee <DIO_GetPortDir+0x1a>
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	51 f0       	breq	.+20     	; 0x1bf6 <DIO_GetPortDir+0x22>
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	31 f4       	brne	.+12     	; 0x1bf2 <DIO_GetPortDir+0x1e>
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_D:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRD;
    1be6:	81 b3       	in	r24, 0x11	; 17
    1be8:	80 83       	st	Z, r24
    1bea:	80 e0       	ldi	r24, 0x00	; 0
	default:
		LOC_ERRORSTATE = NOT_OK;
		break;
	}
	return (LOC_ERRORSTATE);
}
    1bec:	08 95       	ret

STD_ERROR DIO_GetPortDir(u8 PORT_, u8 *Port_Dir){

	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <DIO_GetPortDir+0x2a>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_C:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRC;
    1bf6:	84 b3       	in	r24, 0x14	; 20
    1bf8:	80 83       	st	Z, r24
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	08 95       	ret
	STD_ERROR LOC_ERRORSTATE = OK;

	switch(PORT_) {
	case PORT_A:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRA;
    1bfe:	8a b3       	in	r24, 0x1a	; 26
    1c00:	80 83       	st	Z, r24
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	08 95       	ret
			LOC_ERRORSTATE = NOT_OK;
		}
		break;
	case PORT_B:
		if(PORT_ <= DIO_MAX_PORT_NO) {
			*Port_Dir = DDRB;
    1c06:	87 b3       	in	r24, 0x17	; 23
    1c08:	80 83       	st	Z, r24
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	08 95       	ret

00001c0e <LCD_WriteChar>:
	DIO_GetPortValue(LCD_DATA_CONNECTED_PORT, address);

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
}

STD_ERROR LCD_WriteChar (u8 const Copy_LCD_WR_CHAR) {
    1c0e:	1f 93       	push	r17
    1c10:	18 2f       	mov	r17, r24

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){
    1c12:	87 fd       	sbrc	r24, 7
    1c14:	21 c0       	rjmp	.+66     	; 0x1c58 <LCD_WriteChar+0x4a>

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	64 e0       	ldi	r22, 0x04	; 4
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1c20:	84 e0       	ldi	r24, 0x04	; 4
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	62 e0       	ldi	r22, 0x02	; 2
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	61 2f       	mov	r22, r17
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1c3e:	84 e0       	ldi	r24, 0x04	; 4
    1c40:	62 e0       	ldi	r22, 0x02	; 2
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1c48:	84 e0       	ldi	r24, 0x04	; 4
    1c4a:	62 e0       	ldi	r22, 0x02	; 2
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		LOC_ERROR = NOT_OK;
	}
	return LOC_ERROR;
}
    1c54:	1f 91       	pop	r17
    1c56:	08 95       	ret

STD_ERROR LCD_WriteChar (u8 const Copy_LCD_WR_CHAR) {

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){
    1c58:	81 e0       	ldi	r24, 0x01	; 1
	}
	else {
		LOC_ERROR = NOT_OK;
	}
	return LOC_ERROR;
}
    1c5a:	1f 91       	pop	r17
    1c5c:	08 95       	ret

00001c5e <LCD_GetAddress>:

//#else #error "No Mode of Operation is entered."

//#endif

void LCD_GetAddress(u8* address){
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <LCD_GetAddress+0xe>
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	7c 01       	movw	r14, r24
	u8 busyFlagValue;
	u8 tmp_DataPortDirectionHolder;

	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	be 01       	movw	r22, r28
    1c76:	6e 5f       	subi	r22, 0xFE	; 254
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, DIO_PORT_DIR_FULL_INPUT);
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    1c86:	84 e0       	ldi	r24, 0x04	; 4
    1c88:	64 e0       	ldi	r22, 0x04	; 4
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_HIGH);
    1c90:	84 e0       	ldi	r24, 0x04	; 4
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1c9a:	84 e0       	ldi	r24, 0x04	; 4
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	0f 5f       	subi	r16, 0xFF	; 255
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
	do{
		DIO_GetPinValue(LCD_DATA_CONNECTED_PORT, LCD_BUSY_FLAG_BIT, &busyFlagValue);
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	67 e0       	ldi	r22, 0x07	; 7
    1cae:	a8 01       	movw	r20, r16
    1cb0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_GetPinValue>
	}
	while(busyFlagValue);
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	88 23       	and	r24, r24
    1cb8:	c1 f7       	brne	.-16     	; 0x1caa <LCD_GetAddress+0x4c>
	DIO_GetPortValue(LCD_DATA_CONNECTED_PORT, address);
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	b7 01       	movw	r22, r14
    1cbe:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_GetPortValue>

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	6a 81       	ldd	r22, Y+2	; 0x02
    1cc6:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	08 95       	ret

00001cdc <LCD_SendCommand>:

#include "../../MCAL/DIO/DIO_interface.h"
#include "LCD_interface.h"
#include "../../MCAL/TMR1/TMR1_interface.h"

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
    1cdc:	1f 93       	push	r17
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	18 2f       	mov	r17, r24
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	be 01       	movw	r22, r28
    1cee:	6f 5f       	subi	r22, 0xFF	; 255
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    1cf6:	84 e0       	ldi	r24, 0x04	; 4
    1cf8:	64 e0       	ldi	r22, 0x04	; 4
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1d00:	84 e0       	ldi	r24, 0x04	; 4
    1d02:	63 e0       	ldi	r22, 0x03	; 3
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	61 2f       	mov	r22, r17
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1d1e:	84 e0       	ldi	r24, 0x04	; 4
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1d30:	84 e0       	ldi	r24, 0x04	; 4
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    1d3a:	84 ef       	ldi	r24, 0xF4	; 244
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	69 81       	ldd	r22, Y+1	; 0x01
    1d46:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
	return (LOC_ERROR);
}
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	1f 91       	pop	r17
    1d54:	08 95       	ret

00001d56 <LCD_WriteString>:
	TMR1_Delay_us(10);
	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
	TMR1_Delay_us(10);
}

STD_ERROR LCD_WriteString (u8 const * Copy_String) {
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	ec 01       	movw	r28, r24
	STD_ERROR LOC_ERROR = OK;

	while(*Copy_String != '\0') {
    1d5e:	18 81       	ld	r17, Y
    1d60:	11 23       	and	r17, r17
    1d62:	41 f1       	breq	.+80     	; 0x1db4 <LCD_WriteString+0x5e>

STD_ERROR LCD_WriteChar (u8 const Copy_LCD_WR_CHAR) {

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){
    1d64:	17 fd       	sbrc	r17, 7
    1d66:	1e c0       	rjmp	.+60     	; 0x1da4 <LCD_WriteString+0x4e>

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	64 e0       	ldi	r22, 0x04	; 4
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	63 e0       	ldi	r22, 0x03	; 3
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	61 2f       	mov	r22, r17
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	62 e0       	ldi	r22, 0x02	; 2
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1d9a:	84 e0       	ldi	r24, 0x04	; 4
    1d9c:	62 e0       	ldi	r22, 0x02	; 2
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
STD_ERROR LCD_WriteString (u8 const * Copy_String) {
	STD_ERROR LOC_ERROR = OK;

	while(*Copy_String != '\0') {
		LCD_WriteChar(*Copy_String);
		Copy_String++;
    1da4:	21 96       	adiw	r28, 0x01	; 1
		TMR1_Delay_us(100);
    1da6:	84 e6       	ldi	r24, 0x64	; 100
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
}

STD_ERROR LCD_WriteString (u8 const * Copy_String) {
	STD_ERROR LOC_ERROR = OK;

	while(*Copy_String != '\0') {
    1dae:	18 81       	ld	r17, Y
    1db0:	11 23       	and	r17, r17
    1db2:	c1 f6       	brne	.-80     	; 0x1d64 <LCD_WriteString+0xe>
		LCD_WriteChar(*Copy_String);
		Copy_String++;
		TMR1_Delay_us(100);
	}
	return (LOC_ERROR);
}
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	08 95       	ret

00001dbe <LCD_WriteNumber_unsigned>:
		LCD_WriteString("ERROR/RESTART");
	}
	return (LOC_ERROR);
}

STD_ERROR LCD_WriteNumber_unsigned(u32 LCD_NUMBER){
    1dbe:	5f 92       	push	r5
    1dc0:	6f 92       	push	r6
    1dc2:	7f 92       	push	r7
    1dc4:	8f 92       	push	r8
    1dc6:	9f 92       	push	r9
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	5b 01       	movw	r10, r22
    1dda:	6c 01       	movw	r12, r24
	STD_ERROR LOC_ERROR = OK;
	u32 numberHolder=0;
	u8 digitsCounter=0;
	if(LCD_NUMBER==0){
    1ddc:	61 15       	cp	r22, r1
    1dde:	71 05       	cpc	r23, r1
    1de0:	81 05       	cpc	r24, r1
    1de2:	91 05       	cpc	r25, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <LCD_WriteNumber_unsigned+0x2a>
    1de6:	74 c0       	rjmp	.+232    	; 0x1ed0 <LCD_WriteNumber_unsigned+0x112>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1de8:	66 24       	eor	r6, r6
    1dea:	77 24       	eor	r7, r7
    1dec:	43 01       	movw	r8, r6
    1dee:	55 24       	eor	r5, r5
	if(LCD_NUMBER==0){
		LCD_WriteChar('0');
	}
	else {
		while(LCD_NUMBER){
			numberHolder*=10;
    1df0:	c4 01       	movw	r24, r8
    1df2:	b3 01       	movw	r22, r6
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    1e00:	7b 01       	movw	r14, r22
    1e02:	8c 01       	movw	r16, r24
			numberHolder+=LCD_NUMBER%10;
    1e04:	c6 01       	movw	r24, r12
    1e06:	b5 01       	movw	r22, r10
    1e08:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    1e0c:	3b 01       	movw	r6, r22
    1e0e:	4c 01       	movw	r8, r24
    1e10:	6e 0c       	add	r6, r14
    1e12:	7f 1c       	adc	r7, r15
    1e14:	80 1e       	adc	r8, r16
    1e16:	91 1e       	adc	r9, r17
			LCD_NUMBER/=10;
    1e18:	c6 01       	movw	r24, r12
    1e1a:	b5 01       	movw	r22, r10
    1e1c:	2a e0       	ldi	r18, 0x0A	; 10
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    1e28:	c9 01       	movw	r24, r18
    1e2a:	da 01       	movw	r26, r20
    1e2c:	5c 01       	movw	r10, r24
    1e2e:	6d 01       	movw	r12, r26
			digitsCounter++;
    1e30:	53 94       	inc	r5
	u8 digitsCounter=0;
	if(LCD_NUMBER==0){
		LCD_WriteChar('0');
	}
	else {
		while(LCD_NUMBER){
    1e32:	a1 14       	cp	r10, r1
    1e34:	b1 04       	cpc	r11, r1
    1e36:	c1 04       	cpc	r12, r1
    1e38:	d1 04       	cpc	r13, r1
    1e3a:	d1 f6       	brne	.-76     	; 0x1df0 <LCD_WriteNumber_unsigned+0x32>
			numberHolder*=10;
			numberHolder+=LCD_NUMBER%10;
			LCD_NUMBER/=10;
			digitsCounter++;
		}
		while(digitsCounter){
    1e3c:	55 20       	and	r5, r5
    1e3e:	69 f4       	brne	.+26     	; 0x1e5a <LCD_WriteNumber_unsigned+0x9c>
    1e40:	38 c0       	rjmp	.+112    	; 0x1eb2 <LCD_WriteNumber_unsigned+0xf4>
			LCD_WriteChar((numberHolder%10)+48);
			numberHolder/=10;
    1e42:	c4 01       	movw	r24, r8
    1e44:	b3 01       	movw	r22, r6
    1e46:	2a e0       	ldi	r18, 0x0A	; 10
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    1e52:	c9 01       	movw	r24, r18
    1e54:	da 01       	movw	r26, r20
    1e56:	3c 01       	movw	r6, r24
    1e58:	4d 01       	movw	r8, r26
			numberHolder+=LCD_NUMBER%10;
			LCD_NUMBER/=10;
			digitsCounter++;
		}
		while(digitsCounter){
			LCD_WriteChar((numberHolder%10)+48);
    1e5a:	c4 01       	movw	r24, r8
    1e5c:	b3 01       	movw	r22, r6
    1e5e:	2a e0       	ldi	r18, 0x0A	; 10
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    1e6a:	16 2f       	mov	r17, r22
    1e6c:	10 5d       	subi	r17, 0xD0	; 208

STD_ERROR LCD_WriteChar (u8 const Copy_LCD_WR_CHAR) {

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){
    1e6e:	17 fd       	sbrc	r17, 7
    1e70:	1e c0       	rjmp	.+60     	; 0x1eae <LCD_WriteNumber_unsigned+0xf0>

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	64 e0       	ldi	r22, 0x04	; 4
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1e7c:	84 e0       	ldi	r24, 0x04	; 4
    1e7e:	63 e0       	ldi	r22, 0x03	; 3
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	61 2f       	mov	r22, r17
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1e9a:	84 e0       	ldi	r24, 0x04	; 4
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1ea4:	84 e0       	ldi	r24, 0x04	; 4
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
			digitsCounter++;
		}
		while(digitsCounter){
			LCD_WriteChar((numberHolder%10)+48);
			numberHolder/=10;
			digitsCounter--;
    1eae:	5a 94       	dec	r5
			numberHolder*=10;
			numberHolder+=LCD_NUMBER%10;
			LCD_NUMBER/=10;
			digitsCounter++;
		}
		while(digitsCounter){
    1eb0:	41 f6       	brne	.-112    	; 0x1e42 <LCD_WriteNumber_unsigned+0x84>
			numberHolder/=10;
			digitsCounter--;
		}
	}
	return (LOC_ERROR);
}
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	7f 90       	pop	r7
    1eca:	6f 90       	pop	r6
    1ecc:	5f 90       	pop	r5
    1ece:	08 95       	ret

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    1ed0:	84 e0       	ldi	r24, 0x04	; 4
    1ed2:	64 e0       	ldi	r22, 0x04	; 4
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1eda:	84 e0       	ldi	r24, 0x04	; 4
    1edc:	63 e0       	ldi	r22, 0x03	; 3
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	60 e3       	ldi	r22, 0x30	; 48
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1ef8:	84 e0       	ldi	r24, 0x04	; 4
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    1f0c:	d2 cf       	rjmp	.-92     	; 0x1eb2 <LCD_WriteNumber_unsigned+0xf4>

00001f0e <LCD_DeleteChar>:
		LOC_ERROR = NOT_OK;
	}
	return LOC_ERROR;
}

void LCD_DeleteChar (void){
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	8e 01       	movw	r16, r28
    1f20:	0f 5f       	subi	r16, 0xFF	; 255
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	b8 01       	movw	r22, r16
    1f26:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    1f2a:	84 e0       	ldi	r24, 0x04	; 4
    1f2c:	64 e0       	ldi	r22, 0x04	; 4
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1f34:	84 e0       	ldi	r24, 0x04	; 4
    1f36:	63 e0       	ldi	r22, 0x03	; 3
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	62 e0       	ldi	r22, 0x02	; 2
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    1f48:	83 e0       	ldi	r24, 0x03	; 3
    1f4a:	60 e1       	ldi	r22, 0x10	; 16
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1f52:	84 e0       	ldi	r24, 0x04	; 4
    1f54:	62 e0       	ldi	r22, 0x02	; 2
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1f64:	84 e0       	ldi	r24, 0x04	; 4
    1f66:	62 e0       	ldi	r22, 0x02	; 2
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    1f6e:	84 ef       	ldi	r24, 0xF4	; 244
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	69 81       	ldd	r22, Y+1	; 0x01
    1f7a:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    1f7e:	84 e0       	ldi	r24, 0x04	; 4
    1f80:	64 e0       	ldi	r22, 0x04	; 4
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	63 e0       	ldi	r22, 0x03	; 3
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1f92:	84 e0       	ldi	r24, 0x04	; 4
    1f94:	62 e0       	ldi	r22, 0x02	; 2
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1fa6:	84 e0       	ldi	r24, 0x04	; 4
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1fb0:	84 e0       	ldi	r24, 0x04	; 4
    1fb2:	62 e0       	ldi	r22, 0x02	; 2
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>

void LCD_DeleteChar (void){

	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
	LCD_WriteChar(0);
	TMR1_Delay_us(10);
    1fba:	8a e0       	ldi	r24, 0x0A	; 10
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	b8 01       	movw	r22, r16
    1fc6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	64 e0       	ldi	r22, 0x04	; 4
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    1fd4:	84 e0       	ldi	r24, 0x04	; 4
    1fd6:	63 e0       	ldi	r22, 0x03	; 3
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    1fde:	84 e0       	ldi	r24, 0x04	; 4
    1fe0:	62 e0       	ldi	r22, 0x02	; 2
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	60 e1       	ldi	r22, 0x10	; 16
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2004:	84 e0       	ldi	r24, 0x04	; 4
    2006:	62 e0       	ldi	r22, 0x02	; 2
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    200e:	84 ef       	ldi	r24, 0xF4	; 244
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	69 81       	ldd	r22, Y+1	; 0x01
    201a:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>

	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
	LCD_WriteChar(0);
	TMR1_Delay_us(10);
	LCD_SendCommand(LCD_COM_CURSOR_SHIFT_LEFT);
	TMR1_Delay_us(10);
    201e:	8a e0       	ldi	r24, 0x0A	; 10
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
}
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

00002032 <LCD_INIT>:
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
	return (LOC_ERROR);
}

//#if Mode_Of_Oper == Eight_Bit_Mode
STD_ERROR LCD_INIT (void) {
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	STD_ERROR LOC_ERROR = OK;

	TMR1_Init_CTC();
    2040:	0e 94 bb 08 	call	0x1176	; 0x1176 <TMR1_Init_CTC>

	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, DIO_PORT_DIR_FULL_OUTPUT);
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	6f ef       	ldi	r22, 0xFF	; 255
    2048:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
	DIO_SetPinDir(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_DIR_OUTPUT);
    204c:	84 e0       	ldi	r24, 0x04	; 4
    204e:	64 e0       	ldi	r22, 0x04	; 4
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 88 0b 	call	0x1710	; 0x1710 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_DIR_OUTPUT);
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	62 e0       	ldi	r22, 0x02	; 2
    205a:	41 e0       	ldi	r20, 0x01	; 1
    205c:	0e 94 88 0b 	call	0x1710	; 0x1710 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_DIR_OUTPUT);
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 88 0b 	call	0x1710	; 0x1710 <DIO_SetPinDir>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	8e 01       	movw	r16, r28
    206e:	0f 5f       	subi	r16, 0xFF	; 255
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	b8 01       	movw	r22, r16
    2074:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    2078:	84 e0       	ldi	r24, 0x04	; 4
    207a:	64 e0       	ldi	r22, 0x04	; 4
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    2082:	84 e0       	ldi	r24, 0x04	; 4
    2084:	63 e0       	ldi	r22, 0x03	; 3
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    208c:	84 e0       	ldi	r24, 0x04	; 4
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	62 e0       	ldi	r22, 0x02	; 2
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    20b2:	84 e0       	ldi	r24, 0x04	; 4
    20b4:	62 e0       	ldi	r22, 0x02	; 2
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    20bc:	84 ef       	ldi	r24, 0xF4	; 244
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	69 81       	ldd	r22, Y+1	; 0x01
    20c8:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    20cc:	83 e0       	ldi	r24, 0x03	; 3
    20ce:	b8 01       	movw	r22, r16
    20d0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    20d4:	84 e0       	ldi	r24, 0x04	; 4
    20d6:	64 e0       	ldi	r22, 0x04	; 4
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    20de:	84 e0       	ldi	r24, 0x04	; 4
    20e0:	63 e0       	ldi	r22, 0x03	; 3
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	68 e3       	ldi	r22, 0x38	; 56
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    20fc:	84 e0       	ldi	r24, 0x04	; 4
    20fe:	62 e0       	ldi	r22, 0x02	; 2
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    210e:	84 e0       	ldi	r24, 0x04	; 4
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    2118:	84 ef       	ldi	r24, 0xF4	; 244
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    2120:	83 e0       	ldi	r24, 0x03	; 3
    2122:	69 81       	ldd	r22, Y+1	; 0x01
    2124:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    2128:	83 e0       	ldi	r24, 0x03	; 3
    212a:	b8 01       	movw	r22, r16
    212c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    2130:	84 e0       	ldi	r24, 0x04	; 4
    2132:	64 e0       	ldi	r22, 0x04	; 4
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    213a:	84 e0       	ldi	r24, 0x04	; 4
    213c:	63 e0       	ldi	r22, 0x03	; 3
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2144:	84 e0       	ldi	r24, 0x04	; 4
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	6d e0       	ldi	r22, 0x0D	; 13
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    2158:	84 e0       	ldi	r24, 0x04	; 4
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    216a:	84 e0       	ldi	r24, 0x04	; 4
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    2174:	84 ef       	ldi	r24, 0xF4	; 244
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	69 81       	ldd	r22, Y+1	; 0x01
    2180:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	b8 01       	movw	r22, r16
    2188:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	64 e0       	ldi	r22, 0x04	; 4
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	63 e0       	ldi	r22, 0x03	; 3
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    21a0:	84 e0       	ldi	r24, 0x04	; 4
    21a2:	62 e0       	ldi	r22, 0x02	; 2
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	41 e0       	ldi	r20, 0x01	; 1
    21b0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	62 e0       	ldi	r22, 0x02	; 2
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    21c6:	84 e0       	ldi	r24, 0x04	; 4
    21c8:	62 e0       	ldi	r22, 0x02	; 2
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    21d0:	84 ef       	ldi	r24, 0xF4	; 244
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	69 81       	ldd	r22, Y+1	; 0x01
    21dc:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	b8 01       	movw	r22, r16
    21e4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    21e8:	84 e0       	ldi	r24, 0x04	; 4
    21ea:	64 e0       	ldi	r22, 0x04	; 4
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    21f2:	84 e0       	ldi	r24, 0x04	; 4
    21f4:	63 e0       	ldi	r22, 0x03	; 3
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    21fc:	84 e0       	ldi	r24, 0x04	; 4
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    2206:	83 e0       	ldi	r24, 0x03	; 3
    2208:	66 e0       	ldi	r22, 0x06	; 6
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    2210:	84 e0       	ldi	r24, 0x04	; 4
    2212:	62 e0       	ldi	r22, 0x02	; 2
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2222:	84 e0       	ldi	r24, 0x04	; 4
    2224:	62 e0       	ldi	r22, 0x02	; 2
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    222c:	84 ef       	ldi	r24, 0xF4	; 244
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    2234:	83 e0       	ldi	r24, 0x03	; 3
    2236:	69 81       	ldd	r22, Y+1	; 0x01
    2238:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
	LCD_SendCommand(LCD_COM_DISPLAY_ON_CURSOR_BLINK);
	LCD_SendCommand(LCD_COM_CLEAR);
	LCD_SendCommand(LCD_COM_ENTRYMODE);

	return LOC_ERROR;
}
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	08 95       	ret

0000224a <LCD_WriteNumber>:
		}
	}
	return (LOC_ERROR);
}*/

STD_ERROR LCD_WriteNumber(s32 LCD_NUMBER){
    224a:	2f 92       	push	r2
    224c:	3f 92       	push	r3
    224e:	4f 92       	push	r4
    2250:	5f 92       	push	r5
    2252:	6f 92       	push	r6
    2254:	7f 92       	push	r7
    2256:	8f 92       	push	r8
    2258:	9f 92       	push	r9
    225a:	af 92       	push	r10
    225c:	bf 92       	push	r11
    225e:	cf 92       	push	r12
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	7b 01       	movw	r14, r22
    226c:	8c 01       	movw	r16, r24
	STD_ERROR LOC_ERROR = OK;
	if(LCD_NUMBER<2147483648 && LCD_NUMBER>-2147483649){
		u32 numberHolder=(u32)LCD_NUMBER;
		u32 digitsCounter=0;
		if(LCD_NUMBER==0){
    226e:	61 15       	cp	r22, r1
    2270:	71 05       	cpc	r23, r1
    2272:	81 05       	cpc	r24, r1
    2274:	91 05       	cpc	r25, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <LCD_WriteNumber+0x30>
    2278:	a3 c0       	rjmp	.+326    	; 0x23c0 <LCD_WriteNumber+0x176>
			LCD_WriteChar('0');
		}
		else {
			if(LCD_NUMBER<0){
    227a:	97 fd       	sbrc	r25, 7
    227c:	c0 c0       	rjmp	.+384    	; 0x23fe <LCD_WriteNumber+0x1b4>
}*/

STD_ERROR LCD_WriteNumber(s32 LCD_NUMBER){
	STD_ERROR LOC_ERROR = OK;
	if(LCD_NUMBER<2147483648 && LCD_NUMBER>-2147483649){
		u32 numberHolder=(u32)LCD_NUMBER;
    227e:	26 2e       	mov	r2, r22
    2280:	4f 2c       	mov	r4, r15
    2282:	30 2e       	mov	r3, r16
    2284:	51 2e       	mov	r5, r17
				LCD_NUMBER=0-LCD_NUMBER;
				numberHolder=LCD_NUMBER;
				LCD_WriteChar('-');
			}
			while(LCD_NUMBER){
				LCD_NUMBER/=10;
    2286:	c8 01       	movw	r24, r16
    2288:	b7 01       	movw	r22, r14
    228a:	2a e0       	ldi	r18, 0x0A	; 10
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    2296:	c9 01       	movw	r24, r18
    2298:	da 01       	movw	r26, r20
    229a:	3c 01       	movw	r6, r24
    229c:	4d 01       	movw	r8, r26
			if(LCD_NUMBER<0){
				LCD_NUMBER=0-LCD_NUMBER;
				numberHolder=LCD_NUMBER;
				LCD_WriteChar('-');
			}
			while(LCD_NUMBER){
    229e:	61 14       	cp	r6, r1
    22a0:	71 04       	cpc	r7, r1
    22a2:	81 04       	cpc	r8, r1
    22a4:	91 04       	cpc	r9, r1
    22a6:	89 f1       	breq	.+98     	; 0x230a <LCD_WriteNumber+0xc0>
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	a8 2e       	mov	r10, r24
    22ac:	b1 2c       	mov	r11, r1
    22ae:	c1 2c       	mov	r12, r1
    22b0:	d1 2c       	mov	r13, r1
    22b2:	0d c0       	rjmp	.+26     	; 0x22ce <LCD_WriteNumber+0x84>
				LCD_NUMBER/=10;
				if(digitsCounter==0){
					digitsCounter=1;
				}
				else {
					digitsCounter*=10;
    22b4:	ac 01       	movw	r20, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	da 01       	movw	r26, r20
    22ba:	9c 01       	movw	r18, r24
    22bc:	ad 01       	movw	r20, r26
    22be:	59 01       	movw	r10, r18
    22c0:	6a 01       	movw	r12, r20
			if(LCD_NUMBER<0){
				LCD_NUMBER=0-LCD_NUMBER;
				numberHolder=LCD_NUMBER;
				LCD_WriteChar('-');
			}
			while(LCD_NUMBER){
    22c2:	e1 14       	cp	r14, r1
    22c4:	f1 04       	cpc	r15, r1
    22c6:	01 05       	cpc	r16, r1
    22c8:	11 05       	cpc	r17, r1
    22ca:	09 f4       	brne	.+2      	; 0x22ce <LCD_WriteNumber+0x84>
    22cc:	61 c0       	rjmp	.+194    	; 0x2390 <LCD_WriteNumber+0x146>
				LCD_NUMBER/=10;
    22ce:	c4 01       	movw	r24, r8
    22d0:	b3 01       	movw	r22, r6
    22d2:	2a e0       	ldi	r18, 0x0A	; 10
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    22de:	79 01       	movw	r14, r18
    22e0:	8a 01       	movw	r16, r20
    22e2:	37 01       	movw	r6, r14
    22e4:	48 01       	movw	r8, r16
				if(digitsCounter==0){
					digitsCounter=1;
				}
				else {
					digitsCounter*=10;
    22e6:	c6 01       	movw	r24, r12
    22e8:	b5 01       	movw	r22, r10
    22ea:	2a e0       	ldi	r18, 0x0A	; 10
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    22f6:	a1 14       	cp	r10, r1
    22f8:	b1 04       	cpc	r11, r1
    22fa:	c1 04       	cpc	r12, r1
    22fc:	d1 04       	cpc	r13, r1
    22fe:	d1 f6       	brne	.-76     	; 0x22b4 <LCD_WriteNumber+0x6a>
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	da cf       	rjmp	.-76     	; 0x22be <LCD_WriteNumber+0x74>
			if(LCD_NUMBER<0){
				LCD_NUMBER=0-LCD_NUMBER;
				numberHolder=LCD_NUMBER;
				LCD_WriteChar('-');
			}
			while(LCD_NUMBER){
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	a9 2e       	mov	r10, r25
    230e:	b1 2c       	mov	r11, r1
    2310:	c1 2c       	mov	r12, r1
    2312:	d1 2c       	mov	r13, r1
				else {
					digitsCounter*=10;
				}
			}
			while(digitsCounter!=0){
				LCD_WriteChar(((numberHolder/digitsCounter)%10)+48);
    2314:	62 2d       	mov	r22, r2
    2316:	74 2d       	mov	r23, r4
    2318:	83 2d       	mov	r24, r3
    231a:	95 2d       	mov	r25, r5
    231c:	a6 01       	movw	r20, r12
    231e:	95 01       	movw	r18, r10
    2320:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    2324:	ca 01       	movw	r24, r20
    2326:	b9 01       	movw	r22, r18
    2328:	2a e0       	ldi	r18, 0x0A	; 10
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    2334:	16 2f       	mov	r17, r22
    2336:	10 5d       	subi	r17, 0xD0	; 208

STD_ERROR LCD_WriteChar (u8 const Copy_LCD_WR_CHAR) {

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){
    2338:	17 fd       	sbrc	r17, 7
    233a:	1e c0       	rjmp	.+60     	; 0x2378 <LCD_WriteNumber+0x12e>

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    233c:	84 e0       	ldi	r24, 0x04	; 4
    233e:	64 e0       	ldi	r22, 0x04	; 4
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    2346:	84 e0       	ldi	r24, 0x04	; 4
    2348:	63 e0       	ldi	r22, 0x03	; 3
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2350:	84 e0       	ldi	r24, 0x04	; 4
    2352:	62 e0       	ldi	r22, 0x02	; 2
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    235a:	83 e0       	ldi	r24, 0x03	; 3
    235c:	61 2f       	mov	r22, r17
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    236e:	84 e0       	ldi	r24, 0x04	; 4
    2370:	62 e0       	ldi	r22, 0x02	; 2
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
					digitsCounter*=10;
				}
			}
			while(digitsCounter!=0){
				LCD_WriteChar(((numberHolder/digitsCounter)%10)+48);
				digitsCounter/=10;
    2378:	c6 01       	movw	r24, r12
    237a:	b5 01       	movw	r22, r10
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__udivmodsi4>
    2388:	c9 01       	movw	r24, r18
    238a:	da 01       	movw	r26, r20
    238c:	5c 01       	movw	r10, r24
    238e:	6d 01       	movw	r12, r26
				}
				else {
					digitsCounter*=10;
				}
			}
			while(digitsCounter!=0){
    2390:	a1 14       	cp	r10, r1
    2392:	b1 04       	cpc	r11, r1
    2394:	c1 04       	cpc	r12, r1
    2396:	d1 04       	cpc	r13, r1
    2398:	09 f0       	breq	.+2      	; 0x239c <LCD_WriteNumber+0x152>
    239a:	bc cf       	rjmp	.-136    	; 0x2314 <LCD_WriteNumber+0xca>
	else {
		LOC_ERROR = NOT_OK;
		LCD_WriteString("ERROR/RESTART");
	}
	return (LOC_ERROR);
}
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	ff 90       	pop	r15
    23a4:	ef 90       	pop	r14
    23a6:	df 90       	pop	r13
    23a8:	cf 90       	pop	r12
    23aa:	bf 90       	pop	r11
    23ac:	af 90       	pop	r10
    23ae:	9f 90       	pop	r9
    23b0:	8f 90       	pop	r8
    23b2:	7f 90       	pop	r7
    23b4:	6f 90       	pop	r6
    23b6:	5f 90       	pop	r5
    23b8:	4f 90       	pop	r4
    23ba:	3f 90       	pop	r3
    23bc:	2f 90       	pop	r2
    23be:	08 95       	ret

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    23ca:	84 e0       	ldi	r24, 0x04	; 4
    23cc:	63 e0       	ldi	r22, 0x03	; 3
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	62 e0       	ldi	r22, 0x02	; 2
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	60 e3       	ldi	r22, 0x30	; 48
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	62 e0       	ldi	r22, 0x02	; 2
    23ec:	40 e0       	ldi	r20, 0x00	; 0
    23ee:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    23f2:	84 e0       	ldi	r24, 0x04	; 4
    23f4:	62 e0       	ldi	r22, 0x02	; 2
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    23fc:	cf cf       	rjmp	.-98     	; 0x239c <LCD_WriteNumber+0x152>
		if(LCD_NUMBER==0){
			LCD_WriteChar('0');
		}
		else {
			if(LCD_NUMBER<0){
				LCD_NUMBER=0-LCD_NUMBER;
    23fe:	10 95       	com	r17
    2400:	00 95       	com	r16
    2402:	f0 94       	com	r15
    2404:	e0 94       	com	r14
    2406:	e1 1c       	adc	r14, r1
    2408:	f1 1c       	adc	r15, r1
    240a:	01 1d       	adc	r16, r1
    240c:	11 1d       	adc	r17, r1
				numberHolder=LCD_NUMBER;
    240e:	2e 2c       	mov	r2, r14
    2410:	4f 2c       	mov	r4, r15
    2412:	30 2e       	mov	r3, r16
    2414:	51 2e       	mov	r5, r17

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    2416:	84 e0       	ldi	r24, 0x04	; 4
    2418:	64 e0       	ldi	r22, 0x04	; 4
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	63 e0       	ldi	r22, 0x03	; 3
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    242a:	84 e0       	ldi	r24, 0x04	; 4
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	6d e2       	ldi	r22, 0x2D	; 45
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    243e:	84 e0       	ldi	r24, 0x04	; 4
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2448:	84 e0       	ldi	r24, 0x04	; 4
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    2452:	19 cf       	rjmp	.-462    	; 0x2286 <LCD_WriteNumber+0x3c>

00002454 <LCD_WriteNumber_floatingPoint>:
		}
	}
	return (LOC_ERROR);
}

STD_ERROR LCD_WriteNumber_floatingPoint(f32 LCD_NUMBER){
    2454:	5f 92       	push	r5
    2456:	6f 92       	push	r6
    2458:	7f 92       	push	r7
    245a:	8f 92       	push	r8
    245c:	9f 92       	push	r9
    245e:	af 92       	push	r10
    2460:	bf 92       	push	r11
    2462:	cf 92       	push	r12
    2464:	df 92       	push	r13
    2466:	ef 92       	push	r14
    2468:	ff 92       	push	r15
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_WriteNumber_floatingPoint+0x20>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_WriteNumber_floatingPoint+0x22>
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	7b 01       	movw	r14, r22
    247c:	8c 01       	movw	r16, r24
	STD_ERROR LOC_ERROR = OK;
	s32 LCD_NUMBER_INTEGRAL=(s32)LCD_NUMBER;
    247e:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    2482:	5b 01       	movw	r10, r22
    2484:	6c 01       	movw	r12, r24
	u32 fractionalCounter=1;
	u8 zeroFirstFlag=1;

	LCD_NUMBER=(f32)(LCD_NUMBER-LCD_NUMBER_INTEGRAL);					//This makes LCD_NUMBER its fractional part only without the whole number (e.g. 0.23 the integral part has to be 0).
    2486:	0e 94 4d 03 	call	0x69a	; 0x69a <__floatsisf>
    248a:	9b 01       	movw	r18, r22
    248c:	ac 01       	movw	r20, r24
    248e:	c8 01       	movw	r24, r16
    2490:	b7 01       	movw	r22, r14
    2492:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    2496:	69 83       	std	Y+1, r22	; 0x01
    2498:	7a 83       	std	Y+2, r23	; 0x02
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	9c 83       	std	Y+4, r25	; 0x04

	if(LCD_NUMBER<0){
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	0e 94 1d 03 	call	0x63a	; 0x63a <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	0c f4       	brge	.+2      	; 0x24b0 <LCD_WriteNumber_floatingPoint+0x5c>
    24ae:	d4 c0       	rjmp	.+424    	; 0x2658 <LCD_WriteNumber_floatingPoint+0x204>
			LCD_WriteChar('-');											//Only print the negative sign if the integral part of the number is zero, because the negative sign will not be printed later if the integral part is zero and the fractional part is negative (e.g. -0.23).
		}
		LCD_NUMBER=0-LCD_NUMBER;
	}

	LCD_WriteNumber(LCD_NUMBER_INTEGRAL);								//Print the integral part of the number, and if its a negative then it prints the sign.
    24b0:	c6 01       	movw	r24, r12
    24b2:	b5 01       	movw	r22, r10
    24b4:	0e 94 25 11 	call	0x224a	; 0x224a <LCD_WriteNumber>

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    24b8:	84 e0       	ldi	r24, 0x04	; 4
    24ba:	64 e0       	ldi	r22, 0x04	; 4
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    24c2:	84 e0       	ldi	r24, 0x04	; 4
    24c4:	63 e0       	ldi	r22, 0x03	; 3
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    24cc:	84 e0       	ldi	r24, 0x04	; 4
    24ce:	62 e0       	ldi	r22, 0x02	; 2
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	6e e2       	ldi	r22, 0x2E	; 46
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    24e0:	84 e0       	ldi	r24, 0x04	; 4
    24e2:	62 e0       	ldi	r22, 0x02	; 2
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    24ea:	84 e0       	ldi	r24, 0x04	; 4
    24ec:	62 e0       	ldi	r22, 0x02	; 2
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>

	LCD_WriteChar('.');													//Print the decimal point.

	f32 LCD_NUMBER_tmp=LCD_NUMBER;										//This iteration counts the number of digits in the fractional part to print all of it, but as AVR does not support f64, there are some problems in representing the fractional numbers.

	while(LCD_NUMBER_tmp!=(s32)LCD_NUMBER_tmp){							//As long as the integral part of the number is not equal the number (for example 0.23 is not equal 0).
    24f4:	69 81       	ldd	r22, Y+1	; 0x01
    24f6:	7a 81       	ldd	r23, Y+2	; 0x02
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    2500:	0e 94 4d 03 	call	0x69a	; 0x69a <__floatsisf>
    2504:	9b 01       	movw	r18, r22
    2506:	ac 01       	movw	r20, r24
    2508:	69 81       	ldd	r22, Y+1	; 0x01
    250a:	7a 81       	ldd	r23, Y+2	; 0x02
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	0e 94 ed 02 	call	0x5da	; 0x5da <__nesf2>
    2514:	88 23       	and	r24, r24
    2516:	09 f4       	brne	.+2      	; 0x251a <LCD_WriteNumber_floatingPoint+0xc6>
    2518:	b7 c0       	rjmp	.+366    	; 0x2688 <LCD_WriteNumber_floatingPoint+0x234>
    251a:	e9 80       	ldd	r14, Y+1	; 0x01
    251c:	fa 80       	ldd	r15, Y+2	; 0x02
    251e:	0b 81       	ldd	r16, Y+3	; 0x03
    2520:	1c 81       	ldd	r17, Y+4	; 0x04
    2522:	21 e0       	ldi	r18, 0x01	; 1
    2524:	62 2e       	mov	r6, r18
    2526:	71 2c       	mov	r7, r1
    2528:	81 2c       	mov	r8, r1
    252a:	91 2c       	mov	r9, r1
    252c:	55 24       	eor	r5, r5
    252e:	53 94       	inc	r5
    2530:	18 c0       	rjmp	.+48     	; 0x2562 <LCD_WriteNumber_floatingPoint+0x10e>
		LCD_NUMBER_tmp*=10;												//Then next iteration will be 2.3 not equal 2, and the one after it will be 23 equal 23, which satisfy the condition.

		if(zeroFirstFlag){												//This condition checks if the leading digit/digits in the fractional part are zeros, if so print zero (because it will not print it later as zero on the left is not significant).
    2532:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    2536:	5b 01       	movw	r10, r22
    2538:	6c 01       	movw	r12, r24
			}
			else {
				zeroFirstFlag=0;
			}
		}
		fractionalCounter*=10;
    253a:	c4 01       	movw	r24, r8
    253c:	b3 01       	movw	r22, r6
    253e:	2a e0       	ldi	r18, 0x0A	; 10
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	0e 94 b8 14 	call	0x2970	; 0x2970 <__mulsi3>
    254a:	3b 01       	movw	r6, r22
    254c:	4c 01       	movw	r8, r24

	LCD_WriteChar('.');													//Print the decimal point.

	f32 LCD_NUMBER_tmp=LCD_NUMBER;										//This iteration counts the number of digits in the fractional part to print all of it, but as AVR does not support f64, there are some problems in representing the fractional numbers.

	while(LCD_NUMBER_tmp!=(s32)LCD_NUMBER_tmp){							//As long as the integral part of the number is not equal the number (for example 0.23 is not equal 0).
    254e:	c6 01       	movw	r24, r12
    2550:	b5 01       	movw	r22, r10
    2552:	0e 94 4d 03 	call	0x69a	; 0x69a <__floatsisf>
    2556:	a8 01       	movw	r20, r16
    2558:	97 01       	movw	r18, r14
    255a:	0e 94 ed 02 	call	0x5da	; 0x5da <__nesf2>
    255e:	88 23       	and	r24, r24
    2560:	f1 f1       	breq	.+124    	; 0x25de <LCD_WriteNumber_floatingPoint+0x18a>
		LCD_NUMBER_tmp*=10;												//Then next iteration will be 2.3 not equal 2, and the one after it will be 23 equal 23, which satisfy the condition.
    2562:	c8 01       	movw	r24, r16
    2564:	b7 01       	movw	r22, r14
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    2572:	7b 01       	movw	r14, r22
    2574:	8c 01       	movw	r16, r24

		if(zeroFirstFlag){												//This condition checks if the leading digit/digits in the fractional part are zeros, if so print zero (because it will not print it later as zero on the left is not significant).
    2576:	55 20       	and	r5, r5
    2578:	e1 f2       	breq	.-72     	; 0x2532 <LCD_WriteNumber_floatingPoint+0xde>
			if((s32)LCD_NUMBER_tmp%10==0){
    257a:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    257e:	5b 01       	movw	r10, r22
    2580:	6c 01       	movw	r12, r24
    2582:	2a e0       	ldi	r18, 0x0A	; 10
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__divmodsi4>
    258e:	61 15       	cp	r22, r1
    2590:	71 05       	cpc	r23, r1
    2592:	81 05       	cpc	r24, r1
    2594:	91 05       	cpc	r25, r1
    2596:	11 f0       	breq	.+4      	; 0x259c <LCD_WriteNumber_floatingPoint+0x148>
    2598:	55 24       	eor	r5, r5
    259a:	cf cf       	rjmp	.-98     	; 0x253a <LCD_WriteNumber_floatingPoint+0xe6>

	STD_ERROR LOC_ERROR = OK;

	if(Copy_LCD_WR_CHAR <= LCD_MAX_ASCII_CODE){

		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_HIGH);
    259c:	84 e0       	ldi	r24, 0x04	; 4
    259e:	64 e0       	ldi	r22, 0x04	; 4
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    25a6:	84 e0       	ldi	r24, 0x04	; 4
    25a8:	63 e0       	ldi	r22, 0x03	; 3
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	62 e0       	ldi	r22, 0x02	; 2
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, Copy_LCD_WR_CHAR, FLAG_DefaultOrSetFromUser_HIGH);
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	60 e3       	ldi	r22, 0x30	; 48
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    25c4:	84 e0       	ldi	r24, 0x04	; 4
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
		DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    25ce:	84 e0       	ldi	r24, 0x04	; 4
    25d0:	62 e0       	ldi	r22, 0x02	; 2
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    25d8:	55 24       	eor	r5, r5
    25da:	53 94       	inc	r5
    25dc:	ae cf       	rjmp	.-164    	; 0x253a <LCD_WriteNumber_floatingPoint+0xe6>
				zeroFirstFlag=0;
			}
		}
		fractionalCounter*=10;
	}
	if(fractionalCounter<1000000000){
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	68 16       	cp	r6, r24
    25e2:	8a ec       	ldi	r24, 0xCA	; 202
    25e4:	78 06       	cpc	r7, r24
    25e6:	8a e9       	ldi	r24, 0x9A	; 154
    25e8:	88 06       	cpc	r8, r24
    25ea:	8b e3       	ldi	r24, 0x3B	; 59
    25ec:	98 06       	cpc	r9, r24
    25ee:	18 f1       	brcs	.+70     	; 0x2636 <LCD_WriteNumber_floatingPoint+0x1e2>
		LCD_WriteNumber(LCD_NUMBER*fractionalCounter);
	}
	else {
		LCD_WriteNumber(LCD_NUMBER*100000000);
    25f0:	69 81       	ldd	r22, Y+1	; 0x01
    25f2:	7a 81       	ldd	r23, Y+2	; 0x02
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	20 e2       	ldi	r18, 0x20	; 32
    25fa:	3c eb       	ldi	r19, 0xBC	; 188
    25fc:	4e eb       	ldi	r20, 0xBE	; 190
    25fe:	5c e4       	ldi	r21, 0x4C	; 76
    2600:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    2604:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    2608:	0e 94 25 11 	call	0x224a	; 0x224a <LCD_WriteNumber>
	}

	return (LOC_ERROR);
}
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	df 90       	pop	r13
    2624:	cf 90       	pop	r12
    2626:	bf 90       	pop	r11
    2628:	af 90       	pop	r10
    262a:	9f 90       	pop	r9
    262c:	8f 90       	pop	r8
    262e:	7f 90       	pop	r7
    2630:	6f 90       	pop	r6
    2632:	5f 90       	pop	r5
    2634:	08 95       	ret
				zeroFirstFlag=0;
			}
		}
		fractionalCounter*=10;
	}
	if(fractionalCounter<1000000000){
    2636:	c4 01       	movw	r24, r8
    2638:	b3 01       	movw	r22, r6
    263a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__floatunsisf>
    263e:	9b 01       	movw	r18, r22
    2640:	ac 01       	movw	r20, r24
		LCD_WriteNumber(LCD_NUMBER*fractionalCounter);
    2642:	69 81       	ldd	r22, Y+1	; 0x01
    2644:	7a 81       	ldd	r23, Y+2	; 0x02
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    264e:	0e 94 ab 03 	call	0x756	; 0x756 <__fixsfsi>
    2652:	0e 94 25 11 	call	0x224a	; 0x224a <LCD_WriteNumber>
    2656:	da cf       	rjmp	.-76     	; 0x260c <LCD_WriteNumber_floatingPoint+0x1b8>
	u8 zeroFirstFlag=1;

	LCD_NUMBER=(f32)(LCD_NUMBER-LCD_NUMBER_INTEGRAL);					//This makes LCD_NUMBER its fractional part only without the whole number (e.g. 0.23 the integral part has to be 0).

	if(LCD_NUMBER<0){
		if(!LCD_NUMBER_INTEGRAL){
    2658:	a1 14       	cp	r10, r1
    265a:	b1 04       	cpc	r11, r1
    265c:	c1 04       	cpc	r12, r1
    265e:	d1 04       	cpc	r13, r1
    2660:	79 f0       	breq	.+30     	; 0x2680 <LCD_WriteNumber_floatingPoint+0x22c>
			LCD_WriteChar('-');											//Only print the negative sign if the integral part of the number is zero, because the negative sign will not be printed later if the integral part is zero and the fractional part is negative (e.g. -0.23).
		}
		LCD_NUMBER=0-LCD_NUMBER;
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	29 81       	ldd	r18, Y+1	; 0x01
    266c:	3a 81       	ldd	r19, Y+2	; 0x02
    266e:	4b 81       	ldd	r20, Y+3	; 0x03
    2670:	5c 81       	ldd	r21, Y+4	; 0x04
    2672:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    2676:	69 83       	std	Y+1, r22	; 0x01
    2678:	7a 83       	std	Y+2, r23	; 0x02
    267a:	8b 83       	std	Y+3, r24	; 0x03
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	18 cf       	rjmp	.-464    	; 0x24b0 <LCD_WriteNumber_floatingPoint+0x5c>

	LCD_NUMBER=(f32)(LCD_NUMBER-LCD_NUMBER_INTEGRAL);					//This makes LCD_NUMBER its fractional part only without the whole number (e.g. 0.23 the integral part has to be 0).

	if(LCD_NUMBER<0){
		if(!LCD_NUMBER_INTEGRAL){
			LCD_WriteChar('-');											//Only print the negative sign if the integral part of the number is zero, because the negative sign will not be printed later if the integral part is zero and the fractional part is negative (e.g. -0.23).
    2680:	8d e2       	ldi	r24, 0x2D	; 45
    2682:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_WriteChar>
    2686:	ed cf       	rjmp	.-38     	; 0x2662 <LCD_WriteNumber_floatingPoint+0x20e>

	LCD_WriteChar('.');													//Print the decimal point.

	f32 LCD_NUMBER_tmp=LCD_NUMBER;										//This iteration counts the number of digits in the fractional part to print all of it, but as AVR does not support f64, there are some problems in representing the fractional numbers.

	while(LCD_NUMBER_tmp!=(s32)LCD_NUMBER_tmp){							//As long as the integral part of the number is not equal the number (for example 0.23 is not equal 0).
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	d8 cf       	rjmp	.-80     	; 0x2642 <LCD_WriteNumber_floatingPoint+0x1ee>

00002692 <LCD_GoTo_X_Y>:
		TMR1_Delay_us(100);
	}
	return (LOC_ERROR);
}

STD_ERROR LCD_GoTo_X_Y (u8 const x, u8 const y) {
    2692:	1f 93       	push	r17
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	18 2f       	mov	r17, r24

	STD_ERROR LOC_ERROR = OK;
	switch(y) {
    26a0:	66 23       	and	r22, r22
    26a2:	49 f4       	brne	.+18     	; 0x26b6 <LCD_GoTo_X_Y+0x24>
	case 0:
		if((x >= ZERO) && (x < LCD_MAX_CHAR_PER_LINE)) {
    26a4:	80 31       	cpi	r24, 0x10	; 16
    26a6:	08 f4       	brcc	.+2      	; 0x26aa <LCD_GoTo_X_Y+0x18>
    26a8:	41 c0       	rjmp	.+130    	; 0x272c <LCD_GoTo_X_Y+0x9a>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
	TMR1_Delay_ms(2);
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
	TMR1_Delay_us(500);
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
	default:
		LOC_ERROR = NOT_OK;
		break;
	}
	return LOC_ERROR;
}
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	1f 91       	pop	r17
    26b4:	08 95       	ret
}

STD_ERROR LCD_GoTo_X_Y (u8 const x, u8 const y) {

	STD_ERROR LOC_ERROR = OK;
	switch(y) {
    26b6:	61 30       	cpi	r22, 0x01	; 1
    26b8:	c1 f7       	brne	.-16     	; 0x26aa <LCD_GoTo_X_Y+0x18>
		else {
			LOC_ERROR = NOT_OK;
		}
		break;
	case 1:
		if((x >= ZERO) && (x < LCD_MAX_CHAR_PER_LINE)) {
    26ba:	80 31       	cpi	r24, 0x10	; 16
    26bc:	b0 f7       	brcc	.-20     	; 0x26aa <LCD_GoTo_X_Y+0x18>

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	be 01       	movw	r22, r28
    26c2:	6f 5f       	subi	r22, 0xFF	; 255
    26c4:	7f 4f       	sbci	r23, 0xFF	; 255
    26c6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    26ca:	84 e0       	ldi	r24, 0x04	; 4
    26cc:	64 e0       	ldi	r22, 0x04	; 4
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    26d4:	84 e0       	ldi	r24, 0x04	; 4
    26d6:	63 e0       	ldi	r22, 0x03	; 3
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    26e8:	10 54       	subi	r17, 0x40	; 64
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	61 2f       	mov	r22, r17
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_LOW);
    26f4:	84 e0       	ldi	r24, 0x04	; 4
    26f6:	62 e0       	ldi	r22, 0x02	; 2
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_ms(2);
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    2706:	84 e0       	ldi	r24, 0x04	; 4
    2708:	62 e0       	ldi	r22, 0x02	; 2
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	TMR1_Delay_us(500);
    2710:	84 ef       	ldi	r24, 0xF4	; 244
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <TMR1_Delay_us>
	DIO_SetPortDir(LCD_DATA_CONNECTED_PORT, tmp_DataPortDirectionHolder);
    2718:	83 e0       	ldi	r24, 0x03	; 3
    271a:	69 81       	ldd	r22, Y+1	; 0x01
    271c:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
    2720:	80 e0       	ldi	r24, 0x00	; 0
	default:
		LOC_ERROR = NOT_OK;
		break;
	}
	return LOC_ERROR;
}
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	1f 91       	pop	r17
    272a:	08 95       	ret

STD_ERROR LCD_SendCommand (u8 LCD_COM_){
	STD_ERROR LOC_ERROR = OK;

	u8 tmp_DataPortDirectionHolder;
	DIO_GetPortDir(LCD_DATA_CONNECTED_PORT, &tmp_DataPortDirectionHolder);
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	be 01       	movw	r22, r28
    2730:	6f 5f       	subi	r22, 0xFF	; 255
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <DIO_GetPortDir>

	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, RS, DIO_PIN_VALUE_LOW);
    2738:	84 e0       	ldi	r24, 0x04	; 4
    273a:	64 e0       	ldi	r22, 0x04	; 4
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, R_W, DIO_PIN_VALUE_LOW);
    2742:	84 e0       	ldi	r24, 0x04	; 4
    2744:	63 e0       	ldi	r22, 0x03	; 3
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_CONNECTED_PORT, E, DIO_PIN_VALUE_HIGH);
    274c:	84 e0       	ldi	r24, 0x04	; 4
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	DIO_SetPortValue(LCD_DATA_CONNECTED_PORT, LCD_COM_, FLAG_DefaultOrSetFromUser_HIGH);
    2756:	10 58       	subi	r17, 0x80	; 128
    2758:	c8 cf       	rjmp	.-112    	; 0x26ea <LCD_GoTo_X_Y+0x58>

0000275a <KEYPAD_GetPressedKey>:
																													//so if the button is pressed (the circuit is closed) nothing happens as VCC is connected to VCC.

	return LOC_ERROR;
}

u8 KEYPAD_GetPressedKey(void) {
    275a:	9f 92       	push	r9
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	0f 92       	push	r0
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
	u8 Pin_Value = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	99 24       	eor	r9, r9
    277c:	9a 94       	dec	r9
    277e:	aa 24       	eor	r10, r10
    2780:	bb 24       	eor	r11, r11
    2782:	6e 01       	movw	r12, r28
    2784:	08 94       	sec
    2786:	c1 1c       	adc	r12, r1
    2788:	d1 1c       	adc	r13, r1
    278a:	0a 2d       	mov	r16, r10

	u16 buttonPressTime=0;

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
																					//Also each 4 buttons forming a row are connected together to a pin (4 pins), those pins' direction are a pulled up input (connected to VCC via a resistor).
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_LOW);				//Activating a certain column by setting its value to low, so that now when a button (from the 4 buttons in the column) is pressed, it will drive the input pin of its row to the ground.
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	6a 2d       	mov	r22, r10
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
    2796:	75 01       	movw	r14, r10
    2798:	ee 0c       	add	r14, r14
    279a:	ff 1c       	adc	r15, r15
    279c:	ee 0c       	add	r14, r14
    279e:	ff 1c       	adc	r15, r15
    27a0:	87 e9       	ldi	r24, 0x97	; 151
    27a2:	91 e0       	ldi	r25, 0x01	; 1
    27a4:	e8 0e       	add	r14, r24
    27a6:	f9 1e       	adc	r15, r25
    27a8:	14 e0       	ldi	r17, 0x04	; 4

		for(int j = ROW_START; j < ROW_FIN; j++){
			DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);					//Looping on the 4 buttons of the column (4 rows), to find the pressed button.
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	61 2f       	mov	r22, r17
    27ae:	a6 01       	movw	r20, r12
    27b0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_GetPinValue>
			if(Pin_Value == PRESSED){												//Checking if this pin is the pressed pin.
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	88 23       	and	r24, r24
    27b8:	71 f4       	brne	.+28     	; 0x27d6 <KEYPAD_GetPressedKey+0x7c>
				Return_Value = Pressed_Key[i-COL_START][j-ROW_START];				//If i find it, i now know which button is pressed, by knowing its certain column (the activated one) and its certain row (the row that is driven to ground, i.e. reads as 0).
    27ba:	f7 01       	movw	r30, r14
    27bc:	90 80       	ld	r9, Z
				while(Pin_Value == PRESSED){										//This loop makes sure that the function does not keep checking on a pressed button as long as the button is being pressed.
					DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	61 2f       	mov	r22, r17
    27c2:	a6 01       	movw	r20, r12
    27c4:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_GetPinValue>

		for(int j = ROW_START; j < ROW_FIN; j++){
			DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);					//Looping on the 4 buttons of the column (4 rows), to find the pressed button.
			if(Pin_Value == PRESSED){												//Checking if this pin is the pressed pin.
				Return_Value = Pressed_Key[i-COL_START][j-ROW_START];				//If i find it, i now know which button is pressed, by knowing its certain column (the activated one) and its certain row (the row that is driven to ground, i.e. reads as 0).
				while(Pin_Value == PRESSED){										//This loop makes sure that the function does not keep checking on a pressed button as long as the button is being pressed.
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	88 23       	and	r24, r24
    27cc:	c1 f3       	breq	.-16     	; 0x27be <KEYPAD_GetPressedKey+0x64>
					DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);
				}
				TMR1_Delay_ms(10);
    27ce:	8a e0       	ldi	r24, 0x0A	; 10
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	0e 94 28 0b 	call	0x1650	; 0x1650 <TMR1_Delay_ms>
    27d6:	1f 5f       	subi	r17, 0xFF	; 255
    27d8:	08 94       	sec
    27da:	e1 1c       	adc	r14, r1
    27dc:	f1 1c       	adc	r15, r1

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
																					//Also each 4 buttons forming a row are connected together to a pin (4 pins), those pins' direction are a pulled up input (connected to VCC via a resistor).
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_LOW);				//Activating a certain column by setting its value to low, so that now when a button (from the 4 buttons in the column) is pressed, it will drive the input pin of its row to the ground.

		for(int j = ROW_START; j < ROW_FIN; j++){
    27de:	18 30       	cpi	r17, 0x08	; 8
    27e0:	21 f7       	brne	.-56     	; 0x27aa <KEYPAD_GetPressedKey+0x50>
					DIO_GetPinValue(KEYPAD_CONNECTED_PORT, j, &Pin_Value);
				}
				TMR1_Delay_ms(10);
			}
		}
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_HIGH);				//Deactivating the column that i activated, to activate another in the next iteration.
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	60 2f       	mov	r22, r16
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 88 0c 	call	0x1910	; 0x1910 <DIO_SetPinValue>
	u8 Pin_Value = 1;
	u8 Return_Value = 0xFF;															//Return value is all ones as initially with no buttons pressed the keypad output is high (no buttons

	u16 buttonPressTime=0;

	for(int i = COL_START; i < COL_FIN; i++){										//The keypad is 4x4 buttons, the idea is that each 4 buttons forming a column are connected together to a pin (4 pins), those pins' direction are output.
    27ec:	08 94       	sec
    27ee:	a1 1c       	adc	r10, r1
    27f0:	b1 1c       	adc	r11, r1
    27f2:	f4 e0       	ldi	r31, 0x04	; 4
    27f4:	af 16       	cp	r10, r31
    27f6:	b1 04       	cpc	r11, r1
    27f8:	41 f6       	brne	.-112    	; 0x278a <KEYPAD_GetPressedKey+0x30>
		}
		DIO_SetPinValue(KEYPAD_CONNECTED_PORT, i, DIO_PIN_VALUE_HIGH);				//Deactivating the column that i activated, to activate another in the next iteration.
	}																				//The processor clock is much faster than the human reaction time, that is why the MCU can loop on the 4 columns activating one a time, and still be able to know which button is pressed.

	return Return_Value;
}
    27fa:	89 2d       	mov	r24, r9
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
    280e:	bf 90       	pop	r11
    2810:	af 90       	pop	r10
    2812:	9f 90       	pop	r9
    2814:	08 95       	ret

00002816 <KEYPAD_INIT>:
};

STD_ERROR KEYPAD_INIT(void) {
	STD_ERROR LOC_ERROR = OK;

	DIO_SetPortDir(KEYPAD_CONNECTED_PORT, DIO_PORT_DIR_FIRST_HALF_OUTPUT);											//First 4 pins are output (for the columns), and last 4 pins are input (for the rows).
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	6f e0       	ldi	r22, 0x0F	; 15
    281a:	0e 94 12 0c 	call	0x1824	; 0x1824 <DIO_SetPortDir>
	DIO_SetPortValue(KEYPAD_CONNECTED_PORT, DIO_PORT_VALUE_FULL_HIGH, FLAG_DefaultOrSetFromUser_LOW);				//Initially the output pins are high and the input pins are pulled up (also high). So now the button terminals are both connected to VCC,
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	6f ef       	ldi	r22, 0xFF	; 255
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DIO_SetPortValue>
																													//so if the button is pressed (the circuit is closed) nothing happens as VCC is connected to VCC.

	return LOC_ERROR;
}
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	08 95       	ret

0000282c <main>:

/*void uart_callback(void){
	LCD_WriteChar(RX_Char);
}*/

int main(void){
    282c:	df 92       	push	r13
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17

	DIO_INIT();
    2836:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_INIT>
	UART_Init();
    283a:	0e 94 6d 06 	call	0xcda	; 0xcda <UART_Init>
	LCD_INIT();
    283e:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_INIT>
	KEYPAD_INIT();
    2842:	0e 94 0b 14 	call	0x2816	; 0x2816 <KEYPAD_INIT>
	u8 input=0;														//This is the user input on the keypad.
	u8 ctr_moreThan15CharsOnLCD=0;
	u8 tmp_ctr_moreThan15CharsOnLCD=0;
	u8 equal_sign_pressed_flag=0;
	u8 charHolder=0;
	UART_RecieveChar_Interrupt();
    2846:	0e 94 16 07 	call	0xe2c	; 0xe2c <UART_RecieveChar_Interrupt>
    284a:	00 e0       	ldi	r16, 0x00	; 0
    284c:	ee 24       	eor	r14, r14
    284e:	dd 24       	eor	r13, r13

	while(1){

		input=KEYPAD_GetPressedKey();
    2850:	0e 94 ad 13 	call	0x275a	; 0x275a <KEYPAD_GetPressedKey>
    2854:	f8 2e       	mov	r15, r24

		charHolder=RX_Char;
    2856:	10 91 b0 01 	lds	r17, 0x01B0
		if(charHolder==0){
    285a:	11 23       	and	r17, r17
    285c:	71 f1       	breq	.+92     	; 0x28ba <main+0x8e>

		}
		else if(charHolder=='C'){
    285e:	13 34       	cpi	r17, 0x43	; 67
    2860:	09 f4       	brne	.+2      	; 0x2864 <main+0x38>
    2862:	46 c0       	rjmp	.+140    	; 0x28f0 <main+0xc4>
			LCD_SendCommand(LCD_COM_CLEAR);
			ctr_moreThan15CharsOnLCD=0;
			tmp_ctr_moreThan15CharsOnLCD=0;
			equal_sign_pressed_flag=0;
		}
		else if(charHolder=='B'){
    2864:	12 34       	cpi	r17, 0x42	; 66
    2866:	09 f4       	brne	.+2      	; 0x286a <main+0x3e>
    2868:	49 c0       	rjmp	.+146    	; 0x28fc <main+0xd0>
			LCD_SendCommand(LCD_COM_DISPLAY_ON_CURSOR_BLINK);
		}
		else if(charHolder=='O'){
    286a:	1f 34       	cpi	r17, 0x4F	; 79
    286c:	09 f4       	brne	.+2      	; 0x2870 <main+0x44>
    286e:	4a c0       	rjmp	.+148    	; 0x2904 <main+0xd8>
			LCD_SendCommand(LCD_COM_DISPLAY_ON);							//Remove the blinking cursor when '=' is entered.
		}
		else if(charHolder=='D'){
    2870:	14 34       	cpi	r17, 0x44	; 68
    2872:	09 f4       	brne	.+2      	; 0x2876 <main+0x4a>
    2874:	4b c0       	rjmp	.+150    	; 0x290c <main+0xe0>
			LCD_DeleteChar();
			ctr_moreThan15CharsOnLCD--;
			tmp_ctr_moreThan15CharsOnLCD--;
		}
		else if(charHolder=='S'){
    2876:	13 35       	cpi	r17, 0x53	; 83
    2878:	09 f4       	brne	.+2      	; 0x287c <main+0x50>
    287a:	4d c0       	rjmp	.+154    	; 0x2916 <main+0xea>
			LCD_SendCommand(LCD_COM_SET_CURSOR_SECOND_LINE);
		}
		else if(charHolder=='Q'){
    287c:	11 35       	cpi	r17, 0x51	; 81
    287e:	09 f4       	brne	.+2      	; 0x2882 <main+0x56>
    2880:	5c c0       	rjmp	.+184    	; 0x293a <main+0x10e>
			LCD_WriteString("LCD Limit Exceed");
		}
		else if(charHolder=='W'){
    2882:	17 35       	cpi	r17, 0x57	; 87
    2884:	09 f4       	brne	.+2      	; 0x2888 <main+0x5c>
    2886:	5e c0       	rjmp	.+188    	; 0x2944 <main+0x118>
			LCD_WriteString("VariableOverflow");
		}
		else if(charHolder=='E'){
    2888:	15 34       	cpi	r17, 0x45	; 69
    288a:	09 f4       	brne	.+2      	; 0x288e <main+0x62>
    288c:	60 c0       	rjmp	.+192    	; 0x294e <main+0x122>
			LCD_WriteString("Syntax Error");
		}
		else if(charHolder=='L'){
    288e:	1c 34       	cpi	r17, 0x4C	; 76
    2890:	09 f4       	brne	.+2      	; 0x2894 <main+0x68>
    2892:	62 c0       	rjmp	.+196    	; 0x2958 <main+0x12c>
			LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
		}
		else if(charHolder=='R'){
    2894:	12 35       	cpi	r17, 0x52	; 82
    2896:	09 f4       	brne	.+2      	; 0x289a <main+0x6e>
    2898:	63 c0       	rjmp	.+198    	; 0x2960 <main+0x134>
			LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_RIGHT);
		}
		else if(charHolder=='H'){
    289a:	18 34       	cpi	r17, 0x48	; 72
    289c:	09 f0       	breq	.+2      	; 0x28a0 <main+0x74>
    289e:	3f c0       	rjmp	.+126    	; 0x291e <main+0xf2>
			if(ctr_moreThan15CharsOnLCD){
    28a0:	00 23       	and	r16, r16
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <main+0x7a>
    28a4:	61 c0       	rjmp	.+194    	; 0x2968 <main+0x13c>
			if(charHolder=='='){
				tmp_ctr_moreThan15CharsOnLCD=15;
				equal_sign_pressed_flag=1;
			}
		}
		RX_Char=0;
    28a6:	10 92 b0 01 	sts	0x01B0, r1
    28aa:	00 e0       	ldi	r16, 0x00	; 0
	u8 charHolder=0;
	UART_RecieveChar_Interrupt();

	while(1){

		input=KEYPAD_GetPressedKey();
    28ac:	0e 94 ad 13 	call	0x275a	; 0x275a <KEYPAD_GetPressedKey>
    28b0:	f8 2e       	mov	r15, r24

		charHolder=RX_Char;
    28b2:	10 91 b0 01 	lds	r17, 0x01B0
		if(charHolder==0){
    28b6:	11 23       	and	r17, r17
    28b8:	91 f6       	brne	.-92     	; 0x285e <main+0x32>
			if(charHolder=='='){
				tmp_ctr_moreThan15CharsOnLCD=15;
				equal_sign_pressed_flag=1;
			}
		}
		RX_Char=0;
    28ba:	10 92 b0 01 	sts	0x01B0, r1

		if(ctr_moreThan15CharsOnLCD>15){
    28be:	00 31       	cpi	r16, 0x10	; 16
    28c0:	38 f2       	brcs	.-114    	; 0x2850 <main+0x24>
			if(input=='A' && tmp_ctr_moreThan15CharsOnLCD>15){
    28c2:	81 e4       	ldi	r24, 0x41	; 65
    28c4:	f8 16       	cp	r15, r24
    28c6:	59 f0       	breq	.+22     	; 0x28de <main+0xb2>
				LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_RIGHT);
				tmp_ctr_moreThan15CharsOnLCD--;
			}
			else if(input=='=' && tmp_ctr_moreThan15CharsOnLCD<ctr_moreThan15CharsOnLCD){
    28c8:	8d e3       	ldi	r24, 0x3D	; 61
    28ca:	f8 16       	cp	r15, r24
    28cc:	09 f6       	brne	.-126    	; 0x2850 <main+0x24>
    28ce:	e0 16       	cp	r14, r16
    28d0:	08 f0       	brcs	.+2      	; 0x28d4 <main+0xa8>
    28d2:	be cf       	rjmp	.-132    	; 0x2850 <main+0x24>
				LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
    28d4:	88 e1       	ldi	r24, 0x18	; 24
    28d6:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
				tmp_ctr_moreThan15CharsOnLCD++;
    28da:	e3 94       	inc	r14
    28dc:	b9 cf       	rjmp	.-142    	; 0x2850 <main+0x24>
			}
		}
		RX_Char=0;

		if(ctr_moreThan15CharsOnLCD>15){
			if(input=='A' && tmp_ctr_moreThan15CharsOnLCD>15){
    28de:	8f e0       	ldi	r24, 0x0F	; 15
    28e0:	8e 15       	cp	r24, r14
    28e2:	08 f0       	brcs	.+2      	; 0x28e6 <main+0xba>
    28e4:	b5 cf       	rjmp	.-150    	; 0x2850 <main+0x24>
				LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_RIGHT);
    28e6:	8c e1       	ldi	r24, 0x1C	; 28
    28e8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
				tmp_ctr_moreThan15CharsOnLCD--;
    28ec:	ea 94       	dec	r14
    28ee:	b0 cf       	rjmp	.-160    	; 0x2850 <main+0x24>
		charHolder=RX_Char;
		if(charHolder==0){

		}
		else if(charHolder=='C'){
			LCD_SendCommand(LCD_COM_CLEAR);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    28f6:	ee 24       	eor	r14, r14
    28f8:	dd 24       	eor	r13, r13
    28fa:	d5 cf       	rjmp	.-86     	; 0x28a6 <main+0x7a>
			ctr_moreThan15CharsOnLCD=0;
			tmp_ctr_moreThan15CharsOnLCD=0;
			equal_sign_pressed_flag=0;
		}
		else if(charHolder=='B'){
			LCD_SendCommand(LCD_COM_DISPLAY_ON_CURSOR_BLINK);
    28fc:	8d e0       	ldi	r24, 0x0D	; 13
    28fe:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    2902:	db cf       	rjmp	.-74     	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='O'){
			LCD_SendCommand(LCD_COM_DISPLAY_ON);							//Remove the blinking cursor when '=' is entered.
    2904:	8c e0       	ldi	r24, 0x0C	; 12
    2906:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    290a:	d7 cf       	rjmp	.-82     	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='D'){
			LCD_DeleteChar();
    290c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_DeleteChar>
			ctr_moreThan15CharsOnLCD--;
    2910:	01 50       	subi	r16, 0x01	; 1
			tmp_ctr_moreThan15CharsOnLCD--;
    2912:	ea 94       	dec	r14
    2914:	d2 cf       	rjmp	.-92     	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='S'){
			LCD_SendCommand(LCD_COM_SET_CURSOR_SECOND_LINE);
    2916:	80 ec       	ldi	r24, 0xC0	; 192
    2918:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    291c:	ce cf       	rjmp	.-100    	; 0x28ba <main+0x8e>
			if(ctr_moreThan15CharsOnLCD){
				LCD_SendCommand(LCD_COM_HOME);
			}
		}
		else {
			LCD_WriteChar(charHolder);
    291e:	81 2f       	mov	r24, r17
    2920:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_WriteChar>
			if(!equal_sign_pressed_flag){
    2924:	dd 20       	and	r13, r13
    2926:	11 f4       	brne	.+4      	; 0x292c <main+0x100>
				ctr_moreThan15CharsOnLCD++;
    2928:	0f 5f       	subi	r16, 0xFF	; 255
				tmp_ctr_moreThan15CharsOnLCD++;
    292a:	e3 94       	inc	r14
			}
			if(charHolder=='='){
    292c:	1d 33       	cpi	r17, 0x3D	; 61
    292e:	29 f6       	brne	.-118    	; 0x28ba <main+0x8e>
    2930:	8f e0       	ldi	r24, 0x0F	; 15
    2932:	e8 2e       	mov	r14, r24
    2934:	dd 24       	eor	r13, r13
    2936:	d3 94       	inc	r13
    2938:	c0 cf       	rjmp	.-128    	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='S'){
			LCD_SendCommand(LCD_COM_SET_CURSOR_SECOND_LINE);
		}
		else if(charHolder=='Q'){
			LCD_WriteString("LCD Limit Exceed");
    293a:	80 e6       	ldi	r24, 0x60	; 96
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_WriteString>
    2942:	bb cf       	rjmp	.-138    	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='W'){
			LCD_WriteString("VariableOverflow");
    2944:	81 e7       	ldi	r24, 0x71	; 113
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_WriteString>
    294c:	b6 cf       	rjmp	.-148    	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='E'){
			LCD_WriteString("Syntax Error");
    294e:	82 e8       	ldi	r24, 0x82	; 130
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <LCD_WriteString>
    2956:	b1 cf       	rjmp	.-158    	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='L'){
			LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_LEFT);
    2958:	88 e1       	ldi	r24, 0x18	; 24
    295a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    295e:	ad cf       	rjmp	.-166    	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='R'){
			LCD_SendCommand(LCD_COM_DISPLAY_SHIFT_RIGHT);
    2960:	8c e1       	ldi	r24, 0x1C	; 28
    2962:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    2966:	a9 cf       	rjmp	.-174    	; 0x28ba <main+0x8e>
		}
		else if(charHolder=='H'){
			if(ctr_moreThan15CharsOnLCD){
				LCD_SendCommand(LCD_COM_HOME);
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_SendCommand>
    296e:	a5 cf       	rjmp	.-182    	; 0x28ba <main+0x8e>

00002970 <__mulsi3>:
    2970:	62 9f       	mul	r22, r18
    2972:	d0 01       	movw	r26, r0
    2974:	73 9f       	mul	r23, r19
    2976:	f0 01       	movw	r30, r0
    2978:	82 9f       	mul	r24, r18
    297a:	e0 0d       	add	r30, r0
    297c:	f1 1d       	adc	r31, r1
    297e:	64 9f       	mul	r22, r20
    2980:	e0 0d       	add	r30, r0
    2982:	f1 1d       	adc	r31, r1
    2984:	92 9f       	mul	r25, r18
    2986:	f0 0d       	add	r31, r0
    2988:	83 9f       	mul	r24, r19
    298a:	f0 0d       	add	r31, r0
    298c:	74 9f       	mul	r23, r20
    298e:	f0 0d       	add	r31, r0
    2990:	65 9f       	mul	r22, r21
    2992:	f0 0d       	add	r31, r0
    2994:	99 27       	eor	r25, r25
    2996:	72 9f       	mul	r23, r18
    2998:	b0 0d       	add	r27, r0
    299a:	e1 1d       	adc	r30, r1
    299c:	f9 1f       	adc	r31, r25
    299e:	63 9f       	mul	r22, r19
    29a0:	b0 0d       	add	r27, r0
    29a2:	e1 1d       	adc	r30, r1
    29a4:	f9 1f       	adc	r31, r25
    29a6:	bd 01       	movw	r22, r26
    29a8:	cf 01       	movw	r24, r30
    29aa:	11 24       	eor	r1, r1
    29ac:	08 95       	ret

000029ae <__udivmodhi4>:
    29ae:	aa 1b       	sub	r26, r26
    29b0:	bb 1b       	sub	r27, r27
    29b2:	51 e1       	ldi	r21, 0x11	; 17
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <__udivmodhi4_ep>

000029b6 <__udivmodhi4_loop>:
    29b6:	aa 1f       	adc	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	a6 17       	cp	r26, r22
    29bc:	b7 07       	cpc	r27, r23
    29be:	10 f0       	brcs	.+4      	; 0x29c4 <__udivmodhi4_ep>
    29c0:	a6 1b       	sub	r26, r22
    29c2:	b7 0b       	sbc	r27, r23

000029c4 <__udivmodhi4_ep>:
    29c4:	88 1f       	adc	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	5a 95       	dec	r21
    29ca:	a9 f7       	brne	.-22     	; 0x29b6 <__udivmodhi4_loop>
    29cc:	80 95       	com	r24
    29ce:	90 95       	com	r25
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	08 95       	ret

000029d6 <__udivmodsi4>:
    29d6:	a1 e2       	ldi	r26, 0x21	; 33
    29d8:	1a 2e       	mov	r1, r26
    29da:	aa 1b       	sub	r26, r26
    29dc:	bb 1b       	sub	r27, r27
    29de:	fd 01       	movw	r30, r26
    29e0:	0d c0       	rjmp	.+26     	; 0x29fc <__udivmodsi4_ep>

000029e2 <__udivmodsi4_loop>:
    29e2:	aa 1f       	adc	r26, r26
    29e4:	bb 1f       	adc	r27, r27
    29e6:	ee 1f       	adc	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	a2 17       	cp	r26, r18
    29ec:	b3 07       	cpc	r27, r19
    29ee:	e4 07       	cpc	r30, r20
    29f0:	f5 07       	cpc	r31, r21
    29f2:	20 f0       	brcs	.+8      	; 0x29fc <__udivmodsi4_ep>
    29f4:	a2 1b       	sub	r26, r18
    29f6:	b3 0b       	sbc	r27, r19
    29f8:	e4 0b       	sbc	r30, r20
    29fa:	f5 0b       	sbc	r31, r21

000029fc <__udivmodsi4_ep>:
    29fc:	66 1f       	adc	r22, r22
    29fe:	77 1f       	adc	r23, r23
    2a00:	88 1f       	adc	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	1a 94       	dec	r1
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <__udivmodsi4_loop>
    2a08:	60 95       	com	r22
    2a0a:	70 95       	com	r23
    2a0c:	80 95       	com	r24
    2a0e:	90 95       	com	r25
    2a10:	9b 01       	movw	r18, r22
    2a12:	ac 01       	movw	r20, r24
    2a14:	bd 01       	movw	r22, r26
    2a16:	cf 01       	movw	r24, r30
    2a18:	08 95       	ret

00002a1a <__divmodsi4>:
    2a1a:	97 fb       	bst	r25, 7
    2a1c:	09 2e       	mov	r0, r25
    2a1e:	05 26       	eor	r0, r21
    2a20:	0e d0       	rcall	.+28     	; 0x2a3e <__divmodsi4_neg1>
    2a22:	57 fd       	sbrc	r21, 7
    2a24:	04 d0       	rcall	.+8      	; 0x2a2e <__divmodsi4_neg2>
    2a26:	d7 df       	rcall	.-82     	; 0x29d6 <__udivmodsi4>
    2a28:	0a d0       	rcall	.+20     	; 0x2a3e <__divmodsi4_neg1>
    2a2a:	00 1c       	adc	r0, r0
    2a2c:	38 f4       	brcc	.+14     	; 0x2a3c <__divmodsi4_exit>

00002a2e <__divmodsi4_neg2>:
    2a2e:	50 95       	com	r21
    2a30:	40 95       	com	r20
    2a32:	30 95       	com	r19
    2a34:	21 95       	neg	r18
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	4f 4f       	sbci	r20, 0xFF	; 255
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255

00002a3c <__divmodsi4_exit>:
    2a3c:	08 95       	ret

00002a3e <__divmodsi4_neg1>:
    2a3e:	f6 f7       	brtc	.-4      	; 0x2a3c <__divmodsi4_exit>
    2a40:	90 95       	com	r25
    2a42:	80 95       	com	r24
    2a44:	70 95       	com	r23
    2a46:	61 95       	neg	r22
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	08 95       	ret

00002a50 <__prologue_saves__>:
    2a50:	2f 92       	push	r2
    2a52:	3f 92       	push	r3
    2a54:	4f 92       	push	r4
    2a56:	5f 92       	push	r5
    2a58:	6f 92       	push	r6
    2a5a:	7f 92       	push	r7
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	ca 1b       	sub	r28, r26
    2a7a:	db 0b       	sbc	r29, r27
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	09 94       	ijmp

00002a88 <__epilogue_restores__>:
    2a88:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8a:	39 88       	ldd	r3, Y+17	; 0x11
    2a8c:	48 88       	ldd	r4, Y+16	; 0x10
    2a8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a9e:	df 80       	ldd	r13, Y+7	; 0x07
    2aa0:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa2:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa4:	0c 81       	ldd	r16, Y+4	; 0x04
    2aa6:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    2aac:	ce 0f       	add	r28, r30
    2aae:	d1 1d       	adc	r29, r1
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	ed 01       	movw	r28, r26
    2abc:	08 95       	ret

00002abe <_exit>:
    2abe:	f8 94       	cli

00002ac0 <__stop_program>:
    2ac0:	ff cf       	rjmp	.-2      	; 0x2ac0 <__stop_program>
